# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class InstanceTypeGroupCreate(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {"name": "str", "instance_types": "list[InstanceTypeCreate]"}

    attribute_map = {"name": "name", "instance_types": "instance_types"}

    def __init__(self, name=None, instance_types=None, **kwargs):
        """
        InstanceTypeGroupCreate - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._name = None
        self._instance_types = None
        self.discriminator = None

        self.name = name
        if instance_types is not None:
            self.instance_types = instance_types

    @property
    def name(self):
        """
        Gets the name of this InstanceTypeGroupCreate

        :return: the name of this InstanceTypeGroupCreate
        :rtype: str
        """

        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InstanceTypeGroupCreate

        :param name: the name of this InstanceTypeGroupCreate
        :type: str
        """

        if self.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if self.client_side_validation and (name is not None and not isinstance(name, str)):
            raise ValueError("Parameter `name` must be a string")

        if self.client_side_validation and (name is not None and len(name) > 256):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if self.client_side_validation and (name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def instance_types(self):
        """
        Gets the instance_types of this InstanceTypeGroupCreate

        :return: the instance_types of this InstanceTypeGroupCreate
        :rtype: list[InstanceTypeCreate]
        """

        return self._instance_types

    @instance_types.setter
    def instance_types(self, instance_types):
        """
        Sets the instance_types of this InstanceTypeGroupCreate

        :param instance_types: the instance_types of this InstanceTypeGroupCreate
        :type: list[InstanceTypeCreate]
        """

        if self.client_side_validation and (instance_types is not None and not isinstance(instance_types, list)):
            raise ValueError("Parameter `instance_types` must be a list")
        if self.client_side_validation and instance_types is not None:
            from ubiops.models.instance_type_create import InstanceTypeCreate

            instance_types = [InstanceTypeCreate(**item) if isinstance(item, dict) else item for item in instance_types]

        self._instance_types = instance_types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, InstanceTypeGroupCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, InstanceTypeGroupCreate):
            return True

        return self.to_dict() != other.to_dict()
