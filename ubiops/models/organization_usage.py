# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class OrganizationUsage(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {
        "interval": "str",
        "data_organization": "list[TimeSeriesDataPointList]",
        "data_projects": "list[OrganizationProjectUsage]",
        "data_deleted_projects": "list[TimeSeriesDataPointList]",
    }

    attribute_map = {
        "interval": "interval",
        "data_organization": "data_organization",
        "data_projects": "data_projects",
        "data_deleted_projects": "data_deleted_projects",
    }

    def __init__(self, interval=None, data_organization=None, data_projects=None, data_deleted_projects=None, **kwargs):
        """
        OrganizationUsage - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._interval = None
        self._data_organization = None
        self._data_projects = None
        self._data_deleted_projects = None
        self.discriminator = None

        self.interval = interval
        self.data_organization = data_organization
        self.data_projects = data_projects
        self.data_deleted_projects = data_deleted_projects

    @property
    def interval(self):
        """
        Gets the interval of this OrganizationUsage

        :return: the interval of this OrganizationUsage
        :rtype: str
        """

        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this OrganizationUsage

        :param interval: the interval of this OrganizationUsage
        :type: str
        """

        if self.client_side_validation and interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")
        if self.client_side_validation and (interval is not None and not isinstance(interval, str)):
            raise ValueError("Parameter `interval` must be a string")

        if self.client_side_validation and (interval is not None and len(interval) < 1):
            raise ValueError("Invalid value for `interval`, length must be greater than or equal to `1`")

        self._interval = interval

    @property
    def data_organization(self):
        """
        Gets the data_organization of this OrganizationUsage

        :return: the data_organization of this OrganizationUsage
        :rtype: list[TimeSeriesDataPointList]
        """

        return self._data_organization

    @data_organization.setter
    def data_organization(self, data_organization):
        """
        Sets the data_organization of this OrganizationUsage

        :param data_organization: the data_organization of this OrganizationUsage
        :type: list[TimeSeriesDataPointList]
        """

        if self.client_side_validation and data_organization is None:
            raise ValueError("Invalid value for `data_organization`, must not be `None`")
        if self.client_side_validation and (data_organization is not None and not isinstance(data_organization, list)):
            raise ValueError("Parameter `data_organization` must be a list")
        if self.client_side_validation and data_organization is not None:
            from ubiops.models.time_series_data_point_list import TimeSeriesDataPointList

            data_organization = [
                TimeSeriesDataPointList(**item) if isinstance(item, dict) else item for item in data_organization
            ]

        self._data_organization = data_organization

    @property
    def data_projects(self):
        """
        Gets the data_projects of this OrganizationUsage

        :return: the data_projects of this OrganizationUsage
        :rtype: list[OrganizationProjectUsage]
        """

        return self._data_projects

    @data_projects.setter
    def data_projects(self, data_projects):
        """
        Sets the data_projects of this OrganizationUsage

        :param data_projects: the data_projects of this OrganizationUsage
        :type: list[OrganizationProjectUsage]
        """

        if self.client_side_validation and data_projects is None:
            raise ValueError("Invalid value for `data_projects`, must not be `None`")
        if self.client_side_validation and (data_projects is not None and not isinstance(data_projects, list)):
            raise ValueError("Parameter `data_projects` must be a list")
        if self.client_side_validation and data_projects is not None:
            from ubiops.models.organization_project_usage import OrganizationProjectUsage

            data_projects = [
                OrganizationProjectUsage(**item) if isinstance(item, dict) else item for item in data_projects
            ]

        self._data_projects = data_projects

    @property
    def data_deleted_projects(self):
        """
        Gets the data_deleted_projects of this OrganizationUsage

        :return: the data_deleted_projects of this OrganizationUsage
        :rtype: list[TimeSeriesDataPointList]
        """

        return self._data_deleted_projects

    @data_deleted_projects.setter
    def data_deleted_projects(self, data_deleted_projects):
        """
        Sets the data_deleted_projects of this OrganizationUsage

        :param data_deleted_projects: the data_deleted_projects of this OrganizationUsage
        :type: list[TimeSeriesDataPointList]
        """

        if self.client_side_validation and data_deleted_projects is None:
            raise ValueError("Invalid value for `data_deleted_projects`, must not be `None`")
        if self.client_side_validation and (
            data_deleted_projects is not None and not isinstance(data_deleted_projects, list)
        ):
            raise ValueError("Parameter `data_deleted_projects` must be a list")
        if self.client_side_validation and data_deleted_projects is not None:
            from ubiops.models.time_series_data_point_list import TimeSeriesDataPointList

            data_deleted_projects = [
                TimeSeriesDataPointList(**item) if isinstance(item, dict) else item for item in data_deleted_projects
            ]

        self._data_deleted_projects = data_deleted_projects

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, OrganizationUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, OrganizationUsage):
            return True

        return self.to_dict() != other.to_dict()
