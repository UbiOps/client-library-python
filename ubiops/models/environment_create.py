# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class EnvironmentCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'base_environment': 'str',
        'description': 'str',
        'labels': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'base_environment': 'base_environment',
        'description': 'description',
        'labels': 'labels'
    }

    def __init__(self, name=None, display_name=None, base_environment=None, description=None, labels=None, local_vars_configuration=None, **kwargs):  # noqa: E501
        """EnvironmentCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._base_environment = None
        self._description = None
        self._labels = None
        self.discriminator = None

        self.name = name
        if display_name is not None:
            self.display_name = display_name
        self.base_environment = base_environment
        if description is not None:
            self.description = description
        if labels is not None:
            self.labels = labels

    @property
    def name(self):
        """Gets the name of this EnvironmentCreate.  # noqa: E501


        :return: The name of this EnvironmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnvironmentCreate.


        :param name: The name of this EnvironmentCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            name is not None and not isinstance(name, str)
        ):
            raise ValueError("Parameter `name` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            name is not None and len(name) > 1024
        ):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            name is not None and len(name) < 1
        ):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this EnvironmentCreate.  # noqa: E501


        :return: The display_name of this EnvironmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EnvironmentCreate.


        :param display_name: The display_name of this EnvironmentCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            display_name is not None and not isinstance(display_name, str)
        ):
            raise ValueError("Parameter `display_name` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            display_name is not None and len(display_name) < 1
        ):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def base_environment(self):
        """Gets the base_environment of this EnvironmentCreate.  # noqa: E501


        :return: The base_environment of this EnvironmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._base_environment

    @base_environment.setter
    def base_environment(self, base_environment):
        """Sets the base_environment of this EnvironmentCreate.


        :param base_environment: The base_environment of this EnvironmentCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and base_environment is None:  # noqa: E501
            raise ValueError("Invalid value for `base_environment`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            base_environment is not None and not isinstance(base_environment, str)
        ):
            raise ValueError("Parameter `base_environment` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            base_environment is not None and len(base_environment) < 1
        ):
            raise ValueError("Invalid value for `base_environment`, length must be greater than or equal to `1`")  # noqa: E501

        self._base_environment = base_environment

    @property
    def description(self):
        """Gets the description of this EnvironmentCreate.  # noqa: E501


        :return: The description of this EnvironmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EnvironmentCreate.


        :param description: The description of this EnvironmentCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            description is not None and not isinstance(description, str)
        ):
            raise ValueError("Parameter `description` must be a string")  # noqa: E501

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this EnvironmentCreate.  # noqa: E501


        :return: The labels of this EnvironmentCreate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this EnvironmentCreate.


        :param labels: The labels of this EnvironmentCreate.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and (
            labels is not None and not isinstance(labels, dict)
        ):
            raise ValueError("Parameter `labels` must be a dictionary")  # noqa: E501

        self._labels = labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnvironmentCreate):
            return True

        return self.to_dict() != other.to_dict()
