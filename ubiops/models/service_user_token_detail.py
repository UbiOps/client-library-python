# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class ServiceUserTokenDetail(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {
        "id": "str",
        "email": "str",
        "token": "str",
        "name": "str",
        "creation_date": "str",
        "expiry_date": "str",
    }

    attribute_map = {
        "id": "id",
        "email": "email",
        "token": "token",
        "name": "name",
        "creation_date": "creation_date",
        "expiry_date": "expiry_date",
    }

    def __init__(self, id=None, email=None, token=None, name=None, creation_date=None, expiry_date=None, **kwargs):
        """
        ServiceUserTokenDetail - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._id = None
        self._email = None
        self._token = None
        self._name = None
        self._creation_date = None
        self._expiry_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.email = email
        if token is not None:
            self.token = token
        self.name = name
        if creation_date is not None:
            self.creation_date = creation_date
        self.expiry_date = expiry_date

    @property
    def id(self):
        """
        Gets the id of this ServiceUserTokenDetail

        :return: the id of this ServiceUserTokenDetail
        :rtype: str
        """

        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ServiceUserTokenDetail

        :param id: the id of this ServiceUserTokenDetail
        :type: str
        """

        if self.client_side_validation and (id is not None and not isinstance(id, str)):
            raise ValueError("Parameter `id` must be a string")

        self._id = id

    @property
    def email(self):
        """
        Gets the email of this ServiceUserTokenDetail

        :return: the email of this ServiceUserTokenDetail
        :rtype: str
        """

        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this ServiceUserTokenDetail

        :param email: the email of this ServiceUserTokenDetail
        :type: str
        """

        if self.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if self.client_side_validation and (email is not None and not isinstance(email, str)):
            raise ValueError("Parameter `email` must be a string")

        if self.client_side_validation and (email is not None and len(email) > 254):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")
        if self.client_side_validation and (email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def token(self):
        """
        Gets the token of this ServiceUserTokenDetail

        :return: the token of this ServiceUserTokenDetail
        :rtype: str
        """

        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this ServiceUserTokenDetail

        :param token: the token of this ServiceUserTokenDetail
        :type: str
        """

        if self.client_side_validation and (token is not None and not isinstance(token, str)):
            raise ValueError("Parameter `token` must be a string")

        self._token = token

    @property
    def name(self):
        """
        Gets the name of this ServiceUserTokenDetail

        :return: the name of this ServiceUserTokenDetail
        :rtype: str
        """

        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ServiceUserTokenDetail

        :param name: the name of this ServiceUserTokenDetail
        :type: str
        """

        if self.client_side_validation and (name is not None and not isinstance(name, str)):
            raise ValueError("Parameter `name` must be a string")

        if self.client_side_validation and (name is not None and len(name) > 256):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")

        self._name = name

    @property
    def creation_date(self):
        """
        Gets the creation_date of this ServiceUserTokenDetail

        :return: the creation_date of this ServiceUserTokenDetail
        :rtype: str
        """

        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this ServiceUserTokenDetail

        :param creation_date: the creation_date of this ServiceUserTokenDetail
        :type: str
        """

        if self.client_side_validation and (creation_date is not None and not isinstance(creation_date, str)):
            raise ValueError("Parameter `creation_date` must be a string")

        self._creation_date = creation_date

    @property
    def expiry_date(self):
        """
        Gets the expiry_date of this ServiceUserTokenDetail

        :return: the expiry_date of this ServiceUserTokenDetail
        :rtype: str
        """

        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """
        Sets the expiry_date of this ServiceUserTokenDetail

        :param expiry_date: the expiry_date of this ServiceUserTokenDetail
        :type: str
        """

        if self.client_side_validation and (expiry_date is not None and not isinstance(expiry_date, str)):
            raise ValueError("Parameter `expiry_date` must be a string")

        if self.client_side_validation and (expiry_date is not None and len(expiry_date) < 1):
            raise ValueError("Invalid value for `expiry_date`, length must be greater than or equal to `1`")

        self._expiry_date = expiry_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, ServiceUserTokenDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, ServiceUserTokenDetail):
            return True

        return self.to_dict() != other.to_dict()
