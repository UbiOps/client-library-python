# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class ProjectUsage(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {
        "interval": "str",
        "data_project": "list[TimeSeriesDataPointList]",
        "data_deployments": "list[ProjectDeploymentVersionUsage]",
        "data_deleted_deployments": "list[TimeSeriesDataPointList]",
    }

    attribute_map = {
        "interval": "interval",
        "data_project": "data_project",
        "data_deployments": "data_deployments",
        "data_deleted_deployments": "data_deleted_deployments",
    }

    def __init__(
        self, interval=None, data_project=None, data_deployments=None, data_deleted_deployments=None, **kwargs
    ):
        """
        ProjectUsage - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._interval = None
        self._data_project = None
        self._data_deployments = None
        self._data_deleted_deployments = None
        self.discriminator = None

        self.interval = interval
        self.data_project = data_project
        self.data_deployments = data_deployments
        self.data_deleted_deployments = data_deleted_deployments

    @property
    def interval(self):
        """
        Gets the interval of this ProjectUsage

        :return: the interval of this ProjectUsage
        :rtype: str
        """

        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this ProjectUsage

        :param interval: the interval of this ProjectUsage
        :type: str
        """

        if self.client_side_validation and interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")
        if self.client_side_validation and (interval is not None and not isinstance(interval, str)):
            raise ValueError("Parameter `interval` must be a string")

        if self.client_side_validation and (interval is not None and len(interval) < 1):
            raise ValueError("Invalid value for `interval`, length must be greater than or equal to `1`")

        self._interval = interval

    @property
    def data_project(self):
        """
        Gets the data_project of this ProjectUsage

        :return: the data_project of this ProjectUsage
        :rtype: list[TimeSeriesDataPointList]
        """

        return self._data_project

    @data_project.setter
    def data_project(self, data_project):
        """
        Sets the data_project of this ProjectUsage

        :param data_project: the data_project of this ProjectUsage
        :type: list[TimeSeriesDataPointList]
        """

        if self.client_side_validation and data_project is None:
            raise ValueError("Invalid value for `data_project`, must not be `None`")
        if self.client_side_validation and (data_project is not None and not isinstance(data_project, list)):
            raise ValueError("Parameter `data_project` must be a list")
        if self.client_side_validation and data_project is not None:
            from ubiops.models.time_series_data_point_list import TimeSeriesDataPointList

            data_project = [
                TimeSeriesDataPointList(**item) if isinstance(item, dict) else item for item in data_project
            ]

        self._data_project = data_project

    @property
    def data_deployments(self):
        """
        Gets the data_deployments of this ProjectUsage

        :return: the data_deployments of this ProjectUsage
        :rtype: list[ProjectDeploymentVersionUsage]
        """

        return self._data_deployments

    @data_deployments.setter
    def data_deployments(self, data_deployments):
        """
        Sets the data_deployments of this ProjectUsage

        :param data_deployments: the data_deployments of this ProjectUsage
        :type: list[ProjectDeploymentVersionUsage]
        """

        if self.client_side_validation and data_deployments is None:
            raise ValueError("Invalid value for `data_deployments`, must not be `None`")
        if self.client_side_validation and (data_deployments is not None and not isinstance(data_deployments, list)):
            raise ValueError("Parameter `data_deployments` must be a list")
        if self.client_side_validation and data_deployments is not None:
            from ubiops.models.project_deployment_version_usage import ProjectDeploymentVersionUsage

            data_deployments = [
                ProjectDeploymentVersionUsage(**item) if isinstance(item, dict) else item for item in data_deployments
            ]

        self._data_deployments = data_deployments

    @property
    def data_deleted_deployments(self):
        """
        Gets the data_deleted_deployments of this ProjectUsage

        :return: the data_deleted_deployments of this ProjectUsage
        :rtype: list[TimeSeriesDataPointList]
        """

        return self._data_deleted_deployments

    @data_deleted_deployments.setter
    def data_deleted_deployments(self, data_deleted_deployments):
        """
        Sets the data_deleted_deployments of this ProjectUsage

        :param data_deleted_deployments: the data_deleted_deployments of this ProjectUsage
        :type: list[TimeSeriesDataPointList]
        """

        if self.client_side_validation and data_deleted_deployments is None:
            raise ValueError("Invalid value for `data_deleted_deployments`, must not be `None`")
        if self.client_side_validation and (
            data_deleted_deployments is not None and not isinstance(data_deleted_deployments, list)
        ):
            raise ValueError("Parameter `data_deleted_deployments` must be a list")
        if self.client_side_validation and data_deleted_deployments is not None:
            from ubiops.models.time_series_data_point_list import TimeSeriesDataPointList

            data_deleted_deployments = [
                TimeSeriesDataPointList(**item) if isinstance(item, dict) else item for item in data_deleted_deployments
            ]

        self._data_deleted_deployments = data_deleted_deployments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, ProjectUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, ProjectUsage):
            return True

        return self.to_dict() != other.to_dict()
