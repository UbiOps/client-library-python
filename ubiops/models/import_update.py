# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class ImportUpdate(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {
        "deployments": "dict(str, object)",
        "pipelines": "dict(str, object)",
        "environment_variables": "dict(str, object)",
        "environments": "dict(str, object)",
    }

    attribute_map = {
        "deployments": "deployments",
        "pipelines": "pipelines",
        "environment_variables": "environment_variables",
        "environments": "environments",
    }

    def __init__(self, deployments=None, pipelines=None, environment_variables=None, environments=None, **kwargs):
        """
        ImportUpdate - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._deployments = None
        self._pipelines = None
        self._environment_variables = None
        self._environments = None
        self.discriminator = None

        if deployments is not None:
            self.deployments = deployments
        if pipelines is not None:
            self.pipelines = pipelines
        if environment_variables is not None:
            self.environment_variables = environment_variables
        if environments is not None:
            self.environments = environments

    @property
    def deployments(self):
        """
        Gets the deployments of this ImportUpdate

        :return: the deployments of this ImportUpdate
        :rtype: dict(str, object)
        """

        return self._deployments

    @deployments.setter
    def deployments(self, deployments):
        """
        Sets the deployments of this ImportUpdate

        :param deployments: the deployments of this ImportUpdate
        :type: dict(str, object)
        """

        if self.client_side_validation and (deployments is not None and not isinstance(deployments, dict)):
            raise ValueError("Parameter `deployments` must be a dictionary")

        self._deployments = deployments

    @property
    def pipelines(self):
        """
        Gets the pipelines of this ImportUpdate

        :return: the pipelines of this ImportUpdate
        :rtype: dict(str, object)
        """

        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines):
        """
        Sets the pipelines of this ImportUpdate

        :param pipelines: the pipelines of this ImportUpdate
        :type: dict(str, object)
        """

        if self.client_side_validation and (pipelines is not None and not isinstance(pipelines, dict)):
            raise ValueError("Parameter `pipelines` must be a dictionary")

        self._pipelines = pipelines

    @property
    def environment_variables(self):
        """
        Gets the environment_variables of this ImportUpdate

        :return: the environment_variables of this ImportUpdate
        :rtype: dict(str, object)
        """

        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """
        Sets the environment_variables of this ImportUpdate

        :param environment_variables: the environment_variables of this ImportUpdate
        :type: dict(str, object)
        """

        if self.client_side_validation and (
            environment_variables is not None and not isinstance(environment_variables, dict)
        ):
            raise ValueError("Parameter `environment_variables` must be a dictionary")

        self._environment_variables = environment_variables

    @property
    def environments(self):
        """
        Gets the environments of this ImportUpdate

        :return: the environments of this ImportUpdate
        :rtype: dict(str, object)
        """

        return self._environments

    @environments.setter
    def environments(self, environments):
        """
        Sets the environments of this ImportUpdate

        :param environments: the environments of this ImportUpdate
        :type: dict(str, object)
        """

        if self.client_side_validation and (environments is not None and not isinstance(environments, dict)):
            raise ValueError("Parameter `environments` must be a dictionary")

        self._environments = environments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, ImportUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, ImportUpdate):
            return True

        return self.to_dict() != other.to_dict()
