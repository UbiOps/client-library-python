# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class BatchPipelineRequestResultList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'status': 'str',
        'time_created': 'datetime',
        'time_last_updated': 'datetime',
        'request_data': 'object',
        'model_requests': 'list[BatchPipelineRequestModelRequest]',
        'error_message': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'time_created': 'time_created',
        'time_last_updated': 'time_last_updated',
        'request_data': 'request_data',
        'model_requests': 'model_requests',
        'error_message': 'error_message'
    }

    def __init__(self, id=None, status=None, time_created=None, time_last_updated=None, request_data=None, model_requests=None, error_message=None, local_vars_configuration=None):  # noqa: E501
        """BatchPipelineRequestResultList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._status = None
        self._time_created = None
        self._time_last_updated = None
        self._request_data = None
        self._model_requests = None
        self._error_message = None
        self.discriminator = None

        self.id = id
        self.status = status
        self.time_created = time_created
        if time_last_updated is not None:
            self.time_last_updated = time_last_updated
        if request_data is not None:
            self.request_data = request_data
        self.model_requests = model_requests
        self.error_message = error_message

    @property
    def id(self):
        """Gets the id of this BatchPipelineRequestResultList.  # noqa: E501


        :return: The id of this BatchPipelineRequestResultList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BatchPipelineRequestResultList.


        :param id: The id of this BatchPipelineRequestResultList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this BatchPipelineRequestResultList.  # noqa: E501


        :return: The status of this BatchPipelineRequestResultList.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchPipelineRequestResultList.


        :param status: The status of this BatchPipelineRequestResultList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "processing", "completed", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_created(self):
        """Gets the time_created of this BatchPipelineRequestResultList.  # noqa: E501


        :return: The time_created of this BatchPipelineRequestResultList.  # noqa: E501
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this BatchPipelineRequestResultList.


        :param time_created: The time_created of this BatchPipelineRequestResultList.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and time_created is None:  # noqa: E501
            raise ValueError("Invalid value for `time_created`, must not be `None`")  # noqa: E501

        self._time_created = time_created

    @property
    def time_last_updated(self):
        """Gets the time_last_updated of this BatchPipelineRequestResultList.  # noqa: E501


        :return: The time_last_updated of this BatchPipelineRequestResultList.  # noqa: E501
        :rtype: datetime
        """
        return self._time_last_updated

    @time_last_updated.setter
    def time_last_updated(self, time_last_updated):
        """Sets the time_last_updated of this BatchPipelineRequestResultList.


        :param time_last_updated: The time_last_updated of this BatchPipelineRequestResultList.  # noqa: E501
        :type: datetime
        """

        self._time_last_updated = time_last_updated

    @property
    def request_data(self):
        """Gets the request_data of this BatchPipelineRequestResultList.  # noqa: E501


        :return: The request_data of this BatchPipelineRequestResultList.  # noqa: E501
        :rtype: object
        """
        return self._request_data

    @request_data.setter
    def request_data(self, request_data):
        """Sets the request_data of this BatchPipelineRequestResultList.


        :param request_data: The request_data of this BatchPipelineRequestResultList.  # noqa: E501
        :type: object
        """

        self._request_data = request_data

    @property
    def model_requests(self):
        """Gets the model_requests of this BatchPipelineRequestResultList.  # noqa: E501


        :return: The model_requests of this BatchPipelineRequestResultList.  # noqa: E501
        :rtype: list[BatchPipelineRequestModelRequest]
        """
        return self._model_requests

    @model_requests.setter
    def model_requests(self, model_requests):
        """Sets the model_requests of this BatchPipelineRequestResultList.


        :param model_requests: The model_requests of this BatchPipelineRequestResultList.  # noqa: E501
        :type: list[BatchPipelineRequestModelRequest]
        """

        self._model_requests = model_requests

    @property
    def error_message(self):
        """Gets the error_message of this BatchPipelineRequestResultList.  # noqa: E501


        :return: The error_message of this BatchPipelineRequestResultList.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BatchPipelineRequestResultList.


        :param error_message: The error_message of this BatchPipelineRequestResultList.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchPipelineRequestResultList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchPipelineRequestResultList):
            return True

        return self.to_dict() != other.to_dict()
