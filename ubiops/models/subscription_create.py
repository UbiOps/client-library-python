# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class SubscriptionCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'max_projects': 'int',
        'max_users': 'int',
        'logs_retention_days': 'int',
        'gb_seconds': 'int',
        'resources': 'int',
        'agreement': 'str',
        'terms_conditions': 'str',
        'hidden': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'max_projects': 'max_projects',
        'max_users': 'max_users',
        'logs_retention_days': 'logs_retention_days',
        'gb_seconds': 'gb_seconds',
        'resources': 'resources',
        'agreement': 'agreement',
        'terms_conditions': 'terms_conditions',
        'hidden': 'hidden'
    }

    def __init__(self, name=None, max_projects=None, max_users=None, logs_retention_days=None, gb_seconds=None, resources=None, agreement=None, terms_conditions=None, hidden=None, local_vars_configuration=None):  # noqa: E501
        """SubscriptionCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._max_projects = None
        self._max_users = None
        self._logs_retention_days = None
        self._gb_seconds = None
        self._resources = None
        self._agreement = None
        self._terms_conditions = None
        self._hidden = None
        self.discriminator = None

        self.name = name
        self.max_projects = max_projects
        self.max_users = max_users
        self.logs_retention_days = logs_retention_days
        self.gb_seconds = gb_seconds
        self.resources = resources
        if agreement is not None:
            self.agreement = agreement
        if terms_conditions is not None:
            self.terms_conditions = terms_conditions
        if hidden is not None:
            self.hidden = hidden

    @property
    def name(self):
        """Gets the name of this SubscriptionCreate.  # noqa: E501


        :return: The name of this SubscriptionCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionCreate.


        :param name: The name of this SubscriptionCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 64):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def max_projects(self):
        """Gets the max_projects of this SubscriptionCreate.  # noqa: E501


        :return: The max_projects of this SubscriptionCreate.  # noqa: E501
        :rtype: int
        """
        return self._max_projects

    @max_projects.setter
    def max_projects(self, max_projects):
        """Sets the max_projects of this SubscriptionCreate.


        :param max_projects: The max_projects of this SubscriptionCreate.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and max_projects is None:  # noqa: E501
            raise ValueError("Invalid value for `max_projects`, must not be `None`")  # noqa: E501

        self._max_projects = max_projects

    @property
    def max_users(self):
        """Gets the max_users of this SubscriptionCreate.  # noqa: E501


        :return: The max_users of this SubscriptionCreate.  # noqa: E501
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """Sets the max_users of this SubscriptionCreate.


        :param max_users: The max_users of this SubscriptionCreate.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and max_users is None:  # noqa: E501
            raise ValueError("Invalid value for `max_users`, must not be `None`")  # noqa: E501

        self._max_users = max_users

    @property
    def logs_retention_days(self):
        """Gets the logs_retention_days of this SubscriptionCreate.  # noqa: E501


        :return: The logs_retention_days of this SubscriptionCreate.  # noqa: E501
        :rtype: int
        """
        return self._logs_retention_days

    @logs_retention_days.setter
    def logs_retention_days(self, logs_retention_days):
        """Sets the logs_retention_days of this SubscriptionCreate.


        :param logs_retention_days: The logs_retention_days of this SubscriptionCreate.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and logs_retention_days is None:  # noqa: E501
            raise ValueError("Invalid value for `logs_retention_days`, must not be `None`")  # noqa: E501

        self._logs_retention_days = logs_retention_days

    @property
    def gb_seconds(self):
        """Gets the gb_seconds of this SubscriptionCreate.  # noqa: E501


        :return: The gb_seconds of this SubscriptionCreate.  # noqa: E501
        :rtype: int
        """
        return self._gb_seconds

    @gb_seconds.setter
    def gb_seconds(self, gb_seconds):
        """Sets the gb_seconds of this SubscriptionCreate.


        :param gb_seconds: The gb_seconds of this SubscriptionCreate.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and gb_seconds is None:  # noqa: E501
            raise ValueError("Invalid value for `gb_seconds`, must not be `None`")  # noqa: E501

        self._gb_seconds = gb_seconds

    @property
    def resources(self):
        """Gets the resources of this SubscriptionCreate.  # noqa: E501


        :return: The resources of this SubscriptionCreate.  # noqa: E501
        :rtype: int
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this SubscriptionCreate.


        :param resources: The resources of this SubscriptionCreate.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and resources is None:  # noqa: E501
            raise ValueError("Invalid value for `resources`, must not be `None`")  # noqa: E501

        self._resources = resources

    @property
    def agreement(self):
        """Gets the agreement of this SubscriptionCreate.  # noqa: E501


        :return: The agreement of this SubscriptionCreate.  # noqa: E501
        :rtype: str
        """
        return self._agreement

    @agreement.setter
    def agreement(self, agreement):
        """Sets the agreement of this SubscriptionCreate.


        :param agreement: The agreement of this SubscriptionCreate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                agreement is not None and len(agreement) > 1024):
            raise ValueError("Invalid value for `agreement`, length must be less than or equal to `1024`")  # noqa: E501

        self._agreement = agreement

    @property
    def terms_conditions(self):
        """Gets the terms_conditions of this SubscriptionCreate.  # noqa: E501


        :return: The terms_conditions of this SubscriptionCreate.  # noqa: E501
        :rtype: str
        """
        return self._terms_conditions

    @terms_conditions.setter
    def terms_conditions(self, terms_conditions):
        """Sets the terms_conditions of this SubscriptionCreate.


        :param terms_conditions: The terms_conditions of this SubscriptionCreate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                terms_conditions is not None and len(terms_conditions) > 1024):
            raise ValueError("Invalid value for `terms_conditions`, length must be less than or equal to `1024`")  # noqa: E501

        self._terms_conditions = terms_conditions

    @property
    def hidden(self):
        """Gets the hidden of this SubscriptionCreate.  # noqa: E501


        :return: The hidden of this SubscriptionCreate.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this SubscriptionCreate.


        :param hidden: The hidden of this SubscriptionCreate.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionCreate):
            return True

        return self.to_dict() != other.to_dict()
