# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class AttachmentFieldsCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_field_name': 'str',
        'destination_field_name': 'str'
    }

    attribute_map = {
        'source_field_name': 'source_field_name',
        'destination_field_name': 'destination_field_name'
    }

    def __init__(self, source_field_name=None, destination_field_name=None, local_vars_configuration=None):  # noqa: E501
        """AttachmentFieldsCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._source_field_name = None
        self._destination_field_name = None
        self.discriminator = None

        self.source_field_name = source_field_name
        self.destination_field_name = destination_field_name

    @property
    def source_field_name(self):
        """Gets the source_field_name of this AttachmentFieldsCreate.  # noqa: E501


        :return: The source_field_name of this AttachmentFieldsCreate.  # noqa: E501
        :rtype: str
        """
        return self._source_field_name

    @source_field_name.setter
    def source_field_name(self, source_field_name):
        """Sets the source_field_name of this AttachmentFieldsCreate.


        :param source_field_name: The source_field_name of this AttachmentFieldsCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source_field_name is None:  # noqa: E501
            raise ValueError("Invalid value for `source_field_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                source_field_name is not None and not isinstance(source_field_name, str)):
            raise ValueError("Parameter `source_field_name` must be a string")  # noqa: E501

        if (self.local_vars_configuration.client_side_validation and
                source_field_name is not None and len(source_field_name) < 1):
            raise ValueError("Invalid value for `source_field_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_field_name = source_field_name

    @property
    def destination_field_name(self):
        """Gets the destination_field_name of this AttachmentFieldsCreate.  # noqa: E501


        :return: The destination_field_name of this AttachmentFieldsCreate.  # noqa: E501
        :rtype: str
        """
        return self._destination_field_name

    @destination_field_name.setter
    def destination_field_name(self, destination_field_name):
        """Sets the destination_field_name of this AttachmentFieldsCreate.


        :param destination_field_name: The destination_field_name of this AttachmentFieldsCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and destination_field_name is None:  # noqa: E501
            raise ValueError("Invalid value for `destination_field_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                destination_field_name is not None and not isinstance(destination_field_name, str)):
            raise ValueError("Parameter `destination_field_name` must be a string")  # noqa: E501

        if (self.local_vars_configuration.client_side_validation and
                destination_field_name is not None and len(destination_field_name) < 1):
            raise ValueError("Invalid value for `destination_field_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._destination_field_name = destination_field_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentFieldsCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttachmentFieldsCreate):
            return True

        return self.to_dict() != other.to_dict()
