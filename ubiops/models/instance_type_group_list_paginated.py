# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class InstanceTypeGroupListPaginated(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {"next": "str", "previous": "str", "results": "list[InstanceTypeGroupList]"}

    attribute_map = {"next": "next", "previous": "previous", "results": "results"}

    def __init__(self, next=None, previous=None, results=None, **kwargs):
        """
        InstanceTypeGroupListPaginated - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._next = None
        self._previous = None
        self._results = None
        self.discriminator = None

        self.next = next
        self.previous = previous
        self.results = results

    @property
    def next(self):
        """
        Gets the next of this InstanceTypeGroupListPaginated

        :return: the next of this InstanceTypeGroupListPaginated
        :rtype: str
        """

        return self._next

    @next.setter
    def next(self, next):
        """
        Sets the next of this InstanceTypeGroupListPaginated

        :param next: the next of this InstanceTypeGroupListPaginated
        :type: str
        """

        if self.client_side_validation and (next is not None and not isinstance(next, str)):
            raise ValueError("Parameter `next` must be a string")

        self._next = next

    @property
    def previous(self):
        """
        Gets the previous of this InstanceTypeGroupListPaginated

        :return: the previous of this InstanceTypeGroupListPaginated
        :rtype: str
        """

        return self._previous

    @previous.setter
    def previous(self, previous):
        """
        Sets the previous of this InstanceTypeGroupListPaginated

        :param previous: the previous of this InstanceTypeGroupListPaginated
        :type: str
        """

        if self.client_side_validation and (previous is not None and not isinstance(previous, str)):
            raise ValueError("Parameter `previous` must be a string")

        self._previous = previous

    @property
    def results(self):
        """
        Gets the results of this InstanceTypeGroupListPaginated

        :return: the results of this InstanceTypeGroupListPaginated
        :rtype: list[InstanceTypeGroupList]
        """

        return self._results

    @results.setter
    def results(self, results):
        """
        Sets the results of this InstanceTypeGroupListPaginated

        :param results: the results of this InstanceTypeGroupListPaginated
        :type: list[InstanceTypeGroupList]
        """

        if self.client_side_validation and results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")
        if self.client_side_validation and (results is not None and not isinstance(results, list)):
            raise ValueError("Parameter `results` must be a list")
        if self.client_side_validation and results is not None:
            from ubiops.models.instance_type_group_list import InstanceTypeGroupList

            results = [InstanceTypeGroupList(**item) if isinstance(item, dict) else item for item in results]

        self._results = results

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, InstanceTypeGroupListPaginated):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, InstanceTypeGroupListPaginated):
            return True

        return self.to_dict() != other.to_dict()
