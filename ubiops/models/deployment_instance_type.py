# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class DeploymentInstanceType(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {
        "id": "str",
        "name": "str",
        "display_name": "str",
        "memory_allocation": "int",
        "cpu_allocation": "int",
        "gpu_allocation": "int",
        "storage_allocation": "int",
        "credit_rate": "float",
        "accelerator": "bool",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "display_name": "display_name",
        "memory_allocation": "memory_allocation",
        "cpu_allocation": "cpu_allocation",
        "gpu_allocation": "gpu_allocation",
        "storage_allocation": "storage_allocation",
        "credit_rate": "credit_rate",
        "accelerator": "accelerator",
    }

    def __init__(
        self,
        id=None,
        name=None,
        display_name=None,
        memory_allocation=None,
        cpu_allocation=None,
        gpu_allocation=None,
        storage_allocation=None,
        credit_rate=None,
        accelerator=None,
        **kwargs,
    ):
        """
        DeploymentInstanceType - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._id = None
        self._name = None
        self._display_name = None
        self._memory_allocation = None
        self._cpu_allocation = None
        self._gpu_allocation = None
        self._storage_allocation = None
        self._credit_rate = None
        self._accelerator = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.display_name = display_name
        if memory_allocation is not None:
            self.memory_allocation = memory_allocation
        if cpu_allocation is not None:
            self.cpu_allocation = cpu_allocation
        if gpu_allocation is not None:
            self.gpu_allocation = gpu_allocation
        if storage_allocation is not None:
            self.storage_allocation = storage_allocation
        if credit_rate is not None:
            self.credit_rate = credit_rate
        if accelerator is not None:
            self.accelerator = accelerator

    @property
    def id(self):
        """
        Gets the id of this DeploymentInstanceType

        :return: the id of this DeploymentInstanceType
        :rtype: str
        """

        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeploymentInstanceType

        :param id: the id of this DeploymentInstanceType
        :type: str
        """

        if self.client_side_validation and (id is not None and not isinstance(id, str)):
            raise ValueError("Parameter `id` must be a string")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DeploymentInstanceType

        :return: the name of this DeploymentInstanceType
        :rtype: str
        """

        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DeploymentInstanceType

        :param name: the name of this DeploymentInstanceType
        :type: str
        """

        if self.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if self.client_side_validation and (name is not None and not isinstance(name, str)):
            raise ValueError("Parameter `name` must be a string")

        if self.client_side_validation and (name is not None and len(name) > 256):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if self.client_side_validation and (name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def display_name(self):
        """
        Gets the display_name of this DeploymentInstanceType

        :return: the display_name of this DeploymentInstanceType
        :rtype: str
        """

        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this DeploymentInstanceType

        :param display_name: the display_name of this DeploymentInstanceType
        :type: str
        """

        if self.client_side_validation and (display_name is not None and not isinstance(display_name, str)):
            raise ValueError("Parameter `display_name` must be a string")

        if self.client_side_validation and (display_name is not None and len(display_name) > 256):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `256`")

        self._display_name = display_name

    @property
    def memory_allocation(self):
        """
        Gets the memory_allocation of this DeploymentInstanceType

        :return: the memory_allocation of this DeploymentInstanceType
        :rtype: int
        """

        return self._memory_allocation

    @memory_allocation.setter
    def memory_allocation(self, memory_allocation):
        """
        Sets the memory_allocation of this DeploymentInstanceType

        :param memory_allocation: the memory_allocation of this DeploymentInstanceType
        :type: int
        """

        if self.client_side_validation and (memory_allocation is not None and not isinstance(memory_allocation, int)):
            raise ValueError("Parameter `memory_allocation` must be an integer")

        self._memory_allocation = memory_allocation

    @property
    def cpu_allocation(self):
        """
        Gets the cpu_allocation of this DeploymentInstanceType

        :return: the cpu_allocation of this DeploymentInstanceType
        :rtype: int
        """

        return self._cpu_allocation

    @cpu_allocation.setter
    def cpu_allocation(self, cpu_allocation):
        """
        Sets the cpu_allocation of this DeploymentInstanceType

        :param cpu_allocation: the cpu_allocation of this DeploymentInstanceType
        :type: int
        """

        if self.client_side_validation and (cpu_allocation is not None and not isinstance(cpu_allocation, int)):
            raise ValueError("Parameter `cpu_allocation` must be an integer")

        self._cpu_allocation = cpu_allocation

    @property
    def gpu_allocation(self):
        """
        Gets the gpu_allocation of this DeploymentInstanceType

        :return: the gpu_allocation of this DeploymentInstanceType
        :rtype: int
        """

        return self._gpu_allocation

    @gpu_allocation.setter
    def gpu_allocation(self, gpu_allocation):
        """
        Sets the gpu_allocation of this DeploymentInstanceType

        :param gpu_allocation: the gpu_allocation of this DeploymentInstanceType
        :type: int
        """

        if self.client_side_validation and (gpu_allocation is not None and not isinstance(gpu_allocation, int)):
            raise ValueError("Parameter `gpu_allocation` must be an integer")

        self._gpu_allocation = gpu_allocation

    @property
    def storage_allocation(self):
        """
        Gets the storage_allocation of this DeploymentInstanceType

        :return: the storage_allocation of this DeploymentInstanceType
        :rtype: int
        """

        return self._storage_allocation

    @storage_allocation.setter
    def storage_allocation(self, storage_allocation):
        """
        Sets the storage_allocation of this DeploymentInstanceType

        :param storage_allocation: the storage_allocation of this DeploymentInstanceType
        :type: int
        """

        if self.client_side_validation and (storage_allocation is not None and not isinstance(storage_allocation, int)):
            raise ValueError("Parameter `storage_allocation` must be an integer")

        self._storage_allocation = storage_allocation

    @property
    def credit_rate(self):
        """
        Gets the credit_rate of this DeploymentInstanceType

        :return: the credit_rate of this DeploymentInstanceType
        :rtype: float
        """

        return self._credit_rate

    @credit_rate.setter
    def credit_rate(self, credit_rate):
        """
        Sets the credit_rate of this DeploymentInstanceType

        :param credit_rate: the credit_rate of this DeploymentInstanceType
        :type: float
        """

        if self.client_side_validation and (credit_rate is not None and not isinstance(credit_rate, (int, float))):
            raise ValueError("Parameter `credit_rate` must be a float")

        self._credit_rate = credit_rate

    @property
    def accelerator(self):
        """
        Gets the accelerator of this DeploymentInstanceType

        :return: the accelerator of this DeploymentInstanceType
        :rtype: bool
        """

        return self._accelerator

    @accelerator.setter
    def accelerator(self, accelerator):
        """
        Sets the accelerator of this DeploymentInstanceType

        :param accelerator: the accelerator of this DeploymentInstanceType
        :type: bool
        """

        if self.client_side_validation and (accelerator is not None and not isinstance(accelerator, bool)):
            raise ValueError("Parameter `accelerator` must be a boolean")

        self._accelerator = accelerator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, DeploymentInstanceType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, DeploymentInstanceType):
            return True

        return self.to_dict() != other.to_dict()
