# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class ProjectDeploymentVersionUsage(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {
        "deployment_id": "str",
        "deployment_name": "str",
        "version_id": "str",
        "version": "str",
        "data": "list[TimeSeriesDataPointList]",
    }

    attribute_map = {
        "deployment_id": "deployment_id",
        "deployment_name": "deployment_name",
        "version_id": "version_id",
        "version": "version",
        "data": "data",
    }

    def __init__(self, deployment_id=None, deployment_name=None, version_id=None, version=None, data=None, **kwargs):
        """
        ProjectDeploymentVersionUsage - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._deployment_id = None
        self._deployment_name = None
        self._version_id = None
        self._version = None
        self._data = None
        self.discriminator = None

        self.deployment_id = deployment_id
        self.deployment_name = deployment_name
        self.version_id = version_id
        self.version = version
        self.data = data

    @property
    def deployment_id(self):
        """
        Gets the deployment_id of this ProjectDeploymentVersionUsage

        :return: the deployment_id of this ProjectDeploymentVersionUsage
        :rtype: str
        """

        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """
        Sets the deployment_id of this ProjectDeploymentVersionUsage

        :param deployment_id: the deployment_id of this ProjectDeploymentVersionUsage
        :type: str
        """

        if self.client_side_validation and deployment_id is None:
            raise ValueError("Invalid value for `deployment_id`, must not be `None`")
        if self.client_side_validation and (deployment_id is not None and not isinstance(deployment_id, str)):
            raise ValueError("Parameter `deployment_id` must be a string")

        self._deployment_id = deployment_id

    @property
    def deployment_name(self):
        """
        Gets the deployment_name of this ProjectDeploymentVersionUsage

        :return: the deployment_name of this ProjectDeploymentVersionUsage
        :rtype: str
        """

        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """
        Sets the deployment_name of this ProjectDeploymentVersionUsage

        :param deployment_name: the deployment_name of this ProjectDeploymentVersionUsage
        :type: str
        """

        if self.client_side_validation and deployment_name is None:
            raise ValueError("Invalid value for `deployment_name`, must not be `None`")
        if self.client_side_validation and (deployment_name is not None and not isinstance(deployment_name, str)):
            raise ValueError("Parameter `deployment_name` must be a string")

        if self.client_side_validation and (deployment_name is not None and len(deployment_name) < 1):
            raise ValueError("Invalid value for `deployment_name`, length must be greater than or equal to `1`")

        self._deployment_name = deployment_name

    @property
    def version_id(self):
        """
        Gets the version_id of this ProjectDeploymentVersionUsage

        :return: the version_id of this ProjectDeploymentVersionUsage
        :rtype: str
        """

        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """
        Sets the version_id of this ProjectDeploymentVersionUsage

        :param version_id: the version_id of this ProjectDeploymentVersionUsage
        :type: str
        """

        if self.client_side_validation and version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")
        if self.client_side_validation and (version_id is not None and not isinstance(version_id, str)):
            raise ValueError("Parameter `version_id` must be a string")

        self._version_id = version_id

    @property
    def version(self):
        """
        Gets the version of this ProjectDeploymentVersionUsage

        :return: the version of this ProjectDeploymentVersionUsage
        :rtype: str
        """

        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ProjectDeploymentVersionUsage

        :param version: the version of this ProjectDeploymentVersionUsage
        :type: str
        """

        if self.client_side_validation and version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if self.client_side_validation and (version is not None and not isinstance(version, str)):
            raise ValueError("Parameter `version` must be a string")

        if self.client_side_validation and (version is not None and len(version) < 1):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")

        self._version = version

    @property
    def data(self):
        """
        Gets the data of this ProjectDeploymentVersionUsage

        :return: the data of this ProjectDeploymentVersionUsage
        :rtype: list[TimeSeriesDataPointList]
        """

        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this ProjectDeploymentVersionUsage

        :param data: the data of this ProjectDeploymentVersionUsage
        :type: list[TimeSeriesDataPointList]
        """

        if self.client_side_validation and data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")
        if self.client_side_validation and (data is not None and not isinstance(data, list)):
            raise ValueError("Parameter `data` must be a list")
        if self.client_side_validation and data is not None:
            from ubiops.models.time_series_data_point_list import TimeSeriesDataPointList

            data = [TimeSeriesDataPointList(**item) if isinstance(item, dict) else item for item in data]

        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, ProjectDeploymentVersionUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, ProjectDeploymentVersionUsage):
            return True

        return self.to_dict() != other.to_dict()
