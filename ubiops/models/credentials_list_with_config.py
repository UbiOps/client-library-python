# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class CredentialsListWithConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'status': 'str',
        'error_message': 'str',
        'reference_count': 'str',
        'project': 'str',
        'configuration': 'str',
        'creation_date': 'datetime',
        'last_modified': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'status': 'status',
        'error_message': 'error_message',
        'reference_count': 'reference_count',
        'project': 'project',
        'configuration': 'configuration',
        'creation_date': 'creation_date',
        'last_modified': 'last_modified'
    }

    def __init__(self, id=None, name=None, type=None, status=None, error_message=None, reference_count=None, project=None, configuration=None, creation_date=None, last_modified=None, local_vars_configuration=None):  # noqa: E501
        """CredentialsListWithConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._type = None
        self._status = None
        self._error_message = None
        self._reference_count = None
        self._project = None
        self._configuration = None
        self._creation_date = None
        self._last_modified = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.type = type
        self.status = status
        self.error_message = error_message
        if reference_count is not None:
            self.reference_count = reference_count
        self.project = project
        if configuration is not None:
            self.configuration = configuration
        if creation_date is not None:
            self.creation_date = creation_date
        if last_modified is not None:
            self.last_modified = last_modified

    @property
    def id(self):
        """Gets the id of this CredentialsListWithConfig.  # noqa: E501


        :return: The id of this CredentialsListWithConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CredentialsListWithConfig.


        :param id: The id of this CredentialsListWithConfig.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CredentialsListWithConfig.  # noqa: E501


        :return: The name of this CredentialsListWithConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CredentialsListWithConfig.


        :param name: The name of this CredentialsListWithConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 64):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this CredentialsListWithConfig.  # noqa: E501


        :return: The type of this CredentialsListWithConfig.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CredentialsListWithConfig.


        :param type: The type of this CredentialsListWithConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) > 64):
            raise ValueError("Invalid value for `type`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) < 1):
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def status(self):
        """Gets the status of this CredentialsListWithConfig.  # noqa: E501


        :return: The status of this CredentialsListWithConfig.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CredentialsListWithConfig.


        :param status: The status of this CredentialsListWithConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                status is not None and len(status) < 1):
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")  # noqa: E501

        self._status = status

    @property
    def error_message(self):
        """Gets the error_message of this CredentialsListWithConfig.  # noqa: E501


        :return: The error_message of this CredentialsListWithConfig.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CredentialsListWithConfig.


        :param error_message: The error_message of this CredentialsListWithConfig.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                error_message is not None and len(error_message) > 500):
            raise ValueError("Invalid value for `error_message`, length must be less than or equal to `500`")  # noqa: E501

        self._error_message = error_message

    @property
    def reference_count(self):
        """Gets the reference_count of this CredentialsListWithConfig.  # noqa: E501


        :return: The reference_count of this CredentialsListWithConfig.  # noqa: E501
        :rtype: str
        """
        return self._reference_count

    @reference_count.setter
    def reference_count(self, reference_count):
        """Sets the reference_count of this CredentialsListWithConfig.


        :param reference_count: The reference_count of this CredentialsListWithConfig.  # noqa: E501
        :type: str
        """

        self._reference_count = reference_count

    @property
    def project(self):
        """Gets the project of this CredentialsListWithConfig.  # noqa: E501


        :return: The project of this CredentialsListWithConfig.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CredentialsListWithConfig.


        :param project: The project of this CredentialsListWithConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project is None:  # noqa: E501
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                project is not None and len(project) < 1):
            raise ValueError("Invalid value for `project`, length must be greater than or equal to `1`")  # noqa: E501

        self._project = project

    @property
    def configuration(self):
        """Gets the configuration of this CredentialsListWithConfig.  # noqa: E501


        :return: The configuration of this CredentialsListWithConfig.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CredentialsListWithConfig.


        :param configuration: The configuration of this CredentialsListWithConfig.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    @property
    def creation_date(self):
        """Gets the creation_date of this CredentialsListWithConfig.  # noqa: E501


        :return: The creation_date of this CredentialsListWithConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CredentialsListWithConfig.


        :param creation_date: The creation_date of this CredentialsListWithConfig.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_modified(self):
        """Gets the last_modified of this CredentialsListWithConfig.  # noqa: E501


        :return: The last_modified of this CredentialsListWithConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this CredentialsListWithConfig.


        :param last_modified: The last_modified of this CredentialsListWithConfig.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialsListWithConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CredentialsListWithConfig):
            return True

        return self.to_dict() != other.to_dict()
