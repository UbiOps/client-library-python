# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import warnings


class DeploymentRequestSingleDetail(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {
        "id": "str",
        "deployment": "str",
        "version": "str",
        "status": "str",
        "success": "bool",
        "time_created": "datetime",
        "time_started": "datetime",
        "time_completed": "datetime",
        "error_message": "str",
        "retries": "int",
        "timeout": "int",
        "request_data": "object",
        "result": "object",
        "notification_group": "str",
        "origin": "dict(str, str)",
    }

    attribute_map = {
        "id": "id",
        "deployment": "deployment",
        "version": "version",
        "status": "status",
        "success": "success",
        "time_created": "time_created",
        "time_started": "time_started",
        "time_completed": "time_completed",
        "error_message": "error_message",
        "retries": "retries",
        "timeout": "timeout",
        "request_data": "request_data",
        "result": "result",
        "notification_group": "notification_group",
        "origin": "origin",
    }

    def __init__(
        self,
        id=None,
        deployment=None,
        version=None,
        status=None,
        success=None,
        time_created=None,
        time_started=None,
        time_completed=None,
        error_message=None,
        retries=None,
        timeout=None,
        request_data=None,
        result=None,
        notification_group=None,
        origin=None,
        **kwargs,
    ):
        """
        DeploymentRequestSingleDetail - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._id = None
        self._deployment = None
        self._version = None
        self._status = None
        self._success = None
        self._time_created = None
        self._time_started = None
        self._time_completed = None
        self._error_message = None
        self._retries = None
        self._timeout = None
        self._request_data = None
        self._result = None
        self._notification_group = None
        self._origin = None
        self.discriminator = None

        self.id = id
        self.deployment = deployment
        self.version = version
        self.status = status
        self.success = success
        self.time_created = time_created
        self.time_started = time_started
        self.time_completed = time_completed
        self.error_message = error_message
        if retries is not None:
            self.retries = retries
        self.timeout = timeout
        self.request_data = request_data
        self.result = result
        self.notification_group = notification_group
        self.origin = origin

    @property
    def id(self):
        """
        Gets the id of this DeploymentRequestSingleDetail

        :return: the id of this DeploymentRequestSingleDetail
        :rtype: str
        """

        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeploymentRequestSingleDetail

        :param id: the id of this DeploymentRequestSingleDetail
        :type: str
        """

        if self.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if self.client_side_validation and (id is not None and not isinstance(id, str)):
            raise ValueError("Parameter `id` must be a string")

        self._id = id

    @property
    def deployment(self):
        """
        Gets the deployment of this DeploymentRequestSingleDetail

        :return: the deployment of this DeploymentRequestSingleDetail
        :rtype: str
        """

        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """
        Sets the deployment of this DeploymentRequestSingleDetail

        :param deployment: the deployment of this DeploymentRequestSingleDetail
        :type: str
        """

        if self.client_side_validation and (deployment is not None and not isinstance(deployment, str)):
            raise ValueError("Parameter `deployment` must be a string")

        self._deployment = deployment

    @property
    def version(self):
        """
        Gets the version of this DeploymentRequestSingleDetail

        :return: the version of this DeploymentRequestSingleDetail
        :rtype: str
        """

        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this DeploymentRequestSingleDetail

        :param version: the version of this DeploymentRequestSingleDetail
        :type: str
        """

        if self.client_side_validation and (version is not None and not isinstance(version, str)):
            raise ValueError("Parameter `version` must be a string")

        if self.client_side_validation and (version is not None and len(version) < 1):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")

        self._version = version

    @property
    def status(self):
        """
        Gets the status of this DeploymentRequestSingleDetail

        :return: the status of this DeploymentRequestSingleDetail
        :rtype: str
        """

        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DeploymentRequestSingleDetail

        :param status: the status of this DeploymentRequestSingleDetail
        :type: str
        """

        if self.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        if self.client_side_validation and (status is not None and not isinstance(status, str)):
            raise ValueError("Parameter `status` must be a string")

        self._status = status

    @property
    def success(self):
        """
        Gets the success of this DeploymentRequestSingleDetail

        :return: the success of this DeploymentRequestSingleDetail
        :rtype: bool
        """
        warnings.warn(
            message="success is deprecated and will be removed after October 2024. Use status instead.",
            category=DeprecationWarning,
            stacklevel=2,
        )

        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this DeploymentRequestSingleDetail

        :param success: the success of this DeploymentRequestSingleDetail
        :type: bool
        """

        if self.client_side_validation and (success is not None and not isinstance(success, bool)):
            raise ValueError("Parameter `success` must be a boolean")

        self._success = success

    @property
    def time_created(self):
        """
        Gets the time_created of this DeploymentRequestSingleDetail

        :return: the time_created of this DeploymentRequestSingleDetail
        :rtype: datetime
        """

        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """
        Sets the time_created of this DeploymentRequestSingleDetail

        :param time_created: the time_created of this DeploymentRequestSingleDetail
        :type: datetime
        """

        if self.client_side_validation and time_created is None:
            raise ValueError("Invalid value for `time_created`, must not be `None`")

        self._time_created = time_created

    @property
    def time_started(self):
        """
        Gets the time_started of this DeploymentRequestSingleDetail

        :return: the time_started of this DeploymentRequestSingleDetail
        :rtype: datetime
        """

        return self._time_started

    @time_started.setter
    def time_started(self, time_started):
        """
        Sets the time_started of this DeploymentRequestSingleDetail

        :param time_started: the time_started of this DeploymentRequestSingleDetail
        :type: datetime
        """

        self._time_started = time_started

    @property
    def time_completed(self):
        """
        Gets the time_completed of this DeploymentRequestSingleDetail

        :return: the time_completed of this DeploymentRequestSingleDetail
        :rtype: datetime
        """

        return self._time_completed

    @time_completed.setter
    def time_completed(self, time_completed):
        """
        Sets the time_completed of this DeploymentRequestSingleDetail

        :param time_completed: the time_completed of this DeploymentRequestSingleDetail
        :type: datetime
        """

        self._time_completed = time_completed

    @property
    def error_message(self):
        """
        Gets the error_message of this DeploymentRequestSingleDetail

        :return: the error_message of this DeploymentRequestSingleDetail
        :rtype: str
        """

        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this DeploymentRequestSingleDetail

        :param error_message: the error_message of this DeploymentRequestSingleDetail
        :type: str
        """

        if self.client_side_validation and (error_message is not None and not isinstance(error_message, str)):
            raise ValueError("Parameter `error_message` must be a string")

        self._error_message = error_message

    @property
    def retries(self):
        """
        Gets the retries of this DeploymentRequestSingleDetail

        :return: the retries of this DeploymentRequestSingleDetail
        :rtype: int
        """

        return self._retries

    @retries.setter
    def retries(self, retries):
        """
        Sets the retries of this DeploymentRequestSingleDetail

        :param retries: the retries of this DeploymentRequestSingleDetail
        :type: int
        """

        if self.client_side_validation and (retries is not None and not isinstance(retries, int)):
            raise ValueError("Parameter `retries` must be an integer")

        self._retries = retries

    @property
    def timeout(self):
        """
        Gets the timeout of this DeploymentRequestSingleDetail

        :return: the timeout of this DeploymentRequestSingleDetail
        :rtype: int
        """

        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this DeploymentRequestSingleDetail

        :param timeout: the timeout of this DeploymentRequestSingleDetail
        :type: int
        """

        if self.client_side_validation and (timeout is not None and not isinstance(timeout, int)):
            raise ValueError("Parameter `timeout` must be an integer")

        self._timeout = timeout

    @property
    def request_data(self):
        """
        Gets the request_data of this DeploymentRequestSingleDetail

        :return: the request_data of this DeploymentRequestSingleDetail
        :rtype: object
        """

        return self._request_data

    @request_data.setter
    def request_data(self, request_data):
        """
        Sets the request_data of this DeploymentRequestSingleDetail

        :param request_data: the request_data of this DeploymentRequestSingleDetail
        :type: object
        """

        self._request_data = request_data

    @property
    def result(self):
        """
        Gets the result of this DeploymentRequestSingleDetail

        :return: the result of this DeploymentRequestSingleDetail
        :rtype: object
        """

        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this DeploymentRequestSingleDetail

        :param result: the result of this DeploymentRequestSingleDetail
        :type: object
        """

        self._result = result

    @property
    def notification_group(self):
        """
        Gets the notification_group of this DeploymentRequestSingleDetail

        :return: the notification_group of this DeploymentRequestSingleDetail
        :rtype: str
        """

        return self._notification_group

    @notification_group.setter
    def notification_group(self, notification_group):
        """
        Sets the notification_group of this DeploymentRequestSingleDetail

        :param notification_group: the notification_group of this DeploymentRequestSingleDetail
        :type: str
        """

        if self.client_side_validation and (notification_group is not None and not isinstance(notification_group, str)):
            raise ValueError("Parameter `notification_group` must be a string")

        self._notification_group = notification_group

    @property
    def origin(self):
        """
        Gets the origin of this DeploymentRequestSingleDetail

        :return: the origin of this DeploymentRequestSingleDetail
        :rtype: dict(str, str)
        """

        return self._origin

    @origin.setter
    def origin(self, origin):
        """
        Sets the origin of this DeploymentRequestSingleDetail

        :param origin: the origin of this DeploymentRequestSingleDetail
        :type: dict(str, str)
        """

        if self.client_side_validation and (origin is not None and not isinstance(origin, dict)):
            raise ValueError("Parameter `origin` must be a dictionary")

        self._origin = origin

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, DeploymentRequestSingleDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, DeploymentRequestSingleDetail):
            return True

        return self.to_dict() != other.to_dict()
