# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class PipelineVersionObjectConfigurationList(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {
        "batch_size": "int",
        "error_message": "str",
        "expression": "str",
        "input_fields": "list[InputOutputFieldBase]",
        "output_fields": "list[InputOutputFieldBase]",
        "output_values": "list[OutputValueList]",
        "on_error": "str",
    }

    attribute_map = {
        "batch_size": "batch_size",
        "error_message": "error_message",
        "expression": "expression",
        "input_fields": "input_fields",
        "output_fields": "output_fields",
        "output_values": "output_values",
        "on_error": "on_error",
    }

    def __init__(
        self,
        batch_size=None,
        error_message=None,
        expression=None,
        input_fields=None,
        output_fields=None,
        output_values=None,
        on_error=None,
        **kwargs,
    ):
        """
        PipelineVersionObjectConfigurationList - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._batch_size = None
        self._error_message = None
        self._expression = None
        self._input_fields = None
        self._output_fields = None
        self._output_values = None
        self._on_error = None
        self.discriminator = None

        if batch_size is not None:
            self.batch_size = batch_size
        if error_message is not None:
            self.error_message = error_message
        if expression is not None:
            self.expression = expression
        if input_fields is not None:
            self.input_fields = input_fields
        if output_fields is not None:
            self.output_fields = output_fields
        if output_values is not None:
            self.output_values = output_values
        if on_error is not None:
            self.on_error = on_error

    @property
    def batch_size(self):
        """
        Gets the batch_size of this PipelineVersionObjectConfigurationList

        :return: the batch_size of this PipelineVersionObjectConfigurationList
        :rtype: int
        """

        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """
        Sets the batch_size of this PipelineVersionObjectConfigurationList

        :param batch_size: the batch_size of this PipelineVersionObjectConfigurationList
        :type: int
        """

        if self.client_side_validation and (batch_size is not None and not isinstance(batch_size, int)):
            raise ValueError("Parameter `batch_size` must be an integer")

        self._batch_size = batch_size

    @property
    def error_message(self):
        """
        Gets the error_message of this PipelineVersionObjectConfigurationList

        :return: the error_message of this PipelineVersionObjectConfigurationList
        :rtype: str
        """

        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this PipelineVersionObjectConfigurationList

        :param error_message: the error_message of this PipelineVersionObjectConfigurationList
        :type: str
        """

        if self.client_side_validation and (error_message is not None and not isinstance(error_message, str)):
            raise ValueError("Parameter `error_message` must be a string")

        self._error_message = error_message

    @property
    def expression(self):
        """
        Gets the expression of this PipelineVersionObjectConfigurationList

        :return: the expression of this PipelineVersionObjectConfigurationList
        :rtype: str
        """

        return self._expression

    @expression.setter
    def expression(self, expression):
        """
        Sets the expression of this PipelineVersionObjectConfigurationList

        :param expression: the expression of this PipelineVersionObjectConfigurationList
        :type: str
        """

        if self.client_side_validation and (expression is not None and not isinstance(expression, str)):
            raise ValueError("Parameter `expression` must be a string")

        self._expression = expression

    @property
    def input_fields(self):
        """
        Gets the input_fields of this PipelineVersionObjectConfigurationList

        :return: the input_fields of this PipelineVersionObjectConfigurationList
        :rtype: list[InputOutputFieldBase]
        """

        return self._input_fields

    @input_fields.setter
    def input_fields(self, input_fields):
        """
        Sets the input_fields of this PipelineVersionObjectConfigurationList

        :param input_fields: the input_fields of this PipelineVersionObjectConfigurationList
        :type: list[InputOutputFieldBase]
        """

        if self.client_side_validation and (input_fields is not None and not isinstance(input_fields, list)):
            raise ValueError("Parameter `input_fields` must be a list")
        if self.client_side_validation and input_fields is not None:
            from ubiops.models.input_output_field_base import InputOutputFieldBase

            input_fields = [InputOutputFieldBase(**item) if isinstance(item, dict) else item for item in input_fields]

        self._input_fields = input_fields

    @property
    def output_fields(self):
        """
        Gets the output_fields of this PipelineVersionObjectConfigurationList

        :return: the output_fields of this PipelineVersionObjectConfigurationList
        :rtype: list[InputOutputFieldBase]
        """

        return self._output_fields

    @output_fields.setter
    def output_fields(self, output_fields):
        """
        Sets the output_fields of this PipelineVersionObjectConfigurationList

        :param output_fields: the output_fields of this PipelineVersionObjectConfigurationList
        :type: list[InputOutputFieldBase]
        """

        if self.client_side_validation and (output_fields is not None and not isinstance(output_fields, list)):
            raise ValueError("Parameter `output_fields` must be a list")
        if self.client_side_validation and output_fields is not None:
            from ubiops.models.input_output_field_base import InputOutputFieldBase

            output_fields = [InputOutputFieldBase(**item) if isinstance(item, dict) else item for item in output_fields]

        self._output_fields = output_fields

    @property
    def output_values(self):
        """
        Gets the output_values of this PipelineVersionObjectConfigurationList

        :return: the output_values of this PipelineVersionObjectConfigurationList
        :rtype: list[OutputValueList]
        """

        return self._output_values

    @output_values.setter
    def output_values(self, output_values):
        """
        Sets the output_values of this PipelineVersionObjectConfigurationList

        :param output_values: the output_values of this PipelineVersionObjectConfigurationList
        :type: list[OutputValueList]
        """

        if self.client_side_validation and (output_values is not None and not isinstance(output_values, list)):
            raise ValueError("Parameter `output_values` must be a list")
        if self.client_side_validation and output_values is not None:
            from ubiops.models.output_value_list import OutputValueList

            output_values = [OutputValueList(**item) if isinstance(item, dict) else item for item in output_values]

        self._output_values = output_values

    @property
    def on_error(self):
        """
        Gets the on_error of this PipelineVersionObjectConfigurationList

        :return: the on_error of this PipelineVersionObjectConfigurationList
        :rtype: str
        """

        return self._on_error

    @on_error.setter
    def on_error(self, on_error):
        """
        Sets the on_error of this PipelineVersionObjectConfigurationList

        :param on_error: the on_error of this PipelineVersionObjectConfigurationList
        :type: str
        """

        if self.client_side_validation and (on_error is not None and not isinstance(on_error, str)):
            raise ValueError("Parameter `on_error` must be a string")

        self._on_error = on_error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, PipelineVersionObjectConfigurationList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, PipelineVersionObjectConfigurationList):
            return True

        return self.to_dict() != other.to_dict()
