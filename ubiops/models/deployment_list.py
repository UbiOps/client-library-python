# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class DeploymentList(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {
        "id": "str",
        "name": "str",
        "project": "str",
        "description": "str",
        "input_type": "str",
        "output_type": "str",
        "input_fields": "list[InputOutputFieldList]",
        "output_fields": "list[InputOutputFieldList]",
        "labels": "dict(str, str)",
        "creation_date": "datetime",
        "last_updated": "datetime",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "project": "project",
        "description": "description",
        "input_type": "input_type",
        "output_type": "output_type",
        "input_fields": "input_fields",
        "output_fields": "output_fields",
        "labels": "labels",
        "creation_date": "creation_date",
        "last_updated": "last_updated",
    }

    def __init__(
        self,
        id=None,
        name=None,
        project=None,
        description=None,
        input_type=None,
        output_type=None,
        input_fields=None,
        output_fields=None,
        labels=None,
        creation_date=None,
        last_updated=None,
        **kwargs,
    ):
        """
        DeploymentList - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._id = None
        self._name = None
        self._project = None
        self._description = None
        self._input_type = None
        self._output_type = None
        self._input_fields = None
        self._output_fields = None
        self._labels = None
        self._creation_date = None
        self._last_updated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.project = project
        if description is not None:
            self.description = description
        self.input_type = input_type
        self.output_type = output_type
        if input_fields is not None:
            self.input_fields = input_fields
        if output_fields is not None:
            self.output_fields = output_fields
        if labels is not None:
            self.labels = labels
        if creation_date is not None:
            self.creation_date = creation_date
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def id(self):
        """
        Gets the id of this DeploymentList

        :return: the id of this DeploymentList
        :rtype: str
        """

        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeploymentList

        :param id: the id of this DeploymentList
        :type: str
        """

        if self.client_side_validation and (id is not None and not isinstance(id, str)):
            raise ValueError("Parameter `id` must be a string")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DeploymentList

        :return: the name of this DeploymentList
        :rtype: str
        """

        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DeploymentList

        :param name: the name of this DeploymentList
        :type: str
        """

        if self.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if self.client_side_validation and (name is not None and not isinstance(name, str)):
            raise ValueError("Parameter `name` must be a string")

        if self.client_side_validation and (name is not None and len(name) > 64):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if self.client_side_validation and (name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def project(self):
        """
        Gets the project of this DeploymentList

        :return: the project of this DeploymentList
        :rtype: str
        """

        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this DeploymentList

        :param project: the project of this DeploymentList
        :type: str
        """

        if self.client_side_validation and project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")
        if self.client_side_validation and (project is not None and not isinstance(project, str)):
            raise ValueError("Parameter `project` must be a string")

        if self.client_side_validation and (project is not None and len(project) < 1):
            raise ValueError("Invalid value for `project`, length must be greater than or equal to `1`")

        self._project = project

    @property
    def description(self):
        """
        Gets the description of this DeploymentList

        :return: the description of this DeploymentList
        :rtype: str
        """

        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DeploymentList

        :param description: the description of this DeploymentList
        :type: str
        """

        if self.client_side_validation and (description is not None and not isinstance(description, str)):
            raise ValueError("Parameter `description` must be a string")

        if self.client_side_validation and (description is not None and len(description) > 400):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `400`")

        self._description = description

    @property
    def input_type(self):
        """
        Gets the input_type of this DeploymentList

        :return: the input_type of this DeploymentList
        :rtype: str
        """

        return self._input_type

    @input_type.setter
    def input_type(self, input_type):
        """
        Sets the input_type of this DeploymentList

        :param input_type: the input_type of this DeploymentList
        :type: str
        """

        if self.client_side_validation and input_type is None:
            raise ValueError("Invalid value for `input_type`, must not be `None`")
        if self.client_side_validation and (input_type is not None and not isinstance(input_type, str)):
            raise ValueError("Parameter `input_type` must be a string")

        if self.client_side_validation and (input_type is not None and len(input_type) < 1):
            raise ValueError("Invalid value for `input_type`, length must be greater than or equal to `1`")

        self._input_type = input_type

    @property
    def output_type(self):
        """
        Gets the output_type of this DeploymentList

        :return: the output_type of this DeploymentList
        :rtype: str
        """

        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """
        Sets the output_type of this DeploymentList

        :param output_type: the output_type of this DeploymentList
        :type: str
        """

        if self.client_side_validation and output_type is None:
            raise ValueError("Invalid value for `output_type`, must not be `None`")
        if self.client_side_validation and (output_type is not None and not isinstance(output_type, str)):
            raise ValueError("Parameter `output_type` must be a string")

        if self.client_side_validation and (output_type is not None and len(output_type) < 1):
            raise ValueError("Invalid value for `output_type`, length must be greater than or equal to `1`")

        self._output_type = output_type

    @property
    def input_fields(self):
        """
        Gets the input_fields of this DeploymentList

        :return: the input_fields of this DeploymentList
        :rtype: list[InputOutputFieldList]
        """

        return self._input_fields

    @input_fields.setter
    def input_fields(self, input_fields):
        """
        Sets the input_fields of this DeploymentList

        :param input_fields: the input_fields of this DeploymentList
        :type: list[InputOutputFieldList]
        """

        if self.client_side_validation and (input_fields is not None and not isinstance(input_fields, list)):
            raise ValueError("Parameter `input_fields` must be a list")
        if self.client_side_validation and input_fields is not None:
            from ubiops.models.input_output_field_list import InputOutputFieldList

            input_fields = [InputOutputFieldList(**item) if isinstance(item, dict) else item for item in input_fields]

        self._input_fields = input_fields

    @property
    def output_fields(self):
        """
        Gets the output_fields of this DeploymentList

        :return: the output_fields of this DeploymentList
        :rtype: list[InputOutputFieldList]
        """

        return self._output_fields

    @output_fields.setter
    def output_fields(self, output_fields):
        """
        Sets the output_fields of this DeploymentList

        :param output_fields: the output_fields of this DeploymentList
        :type: list[InputOutputFieldList]
        """

        if self.client_side_validation and (output_fields is not None and not isinstance(output_fields, list)):
            raise ValueError("Parameter `output_fields` must be a list")
        if self.client_side_validation and output_fields is not None:
            from ubiops.models.input_output_field_list import InputOutputFieldList

            output_fields = [InputOutputFieldList(**item) if isinstance(item, dict) else item for item in output_fields]

        self._output_fields = output_fields

    @property
    def labels(self):
        """
        Gets the labels of this DeploymentList

        :return: the labels of this DeploymentList
        :rtype: dict(str, str)
        """

        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this DeploymentList

        :param labels: the labels of this DeploymentList
        :type: dict(str, str)
        """

        if self.client_side_validation and (labels is not None and not isinstance(labels, dict)):
            raise ValueError("Parameter `labels` must be a dictionary")

        self._labels = labels

    @property
    def creation_date(self):
        """
        Gets the creation_date of this DeploymentList

        :return: the creation_date of this DeploymentList
        :rtype: datetime
        """

        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this DeploymentList

        :param creation_date: the creation_date of this DeploymentList
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_updated(self):
        """
        Gets the last_updated of this DeploymentList

        :return: the last_updated of this DeploymentList
        :rtype: datetime
        """

        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """
        Sets the last_updated of this DeploymentList

        :param last_updated: the last_updated of this DeploymentList
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, DeploymentList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, DeploymentList):
            return True

        return self.to_dict() != other.to_dict()
