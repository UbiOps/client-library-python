# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class LogList(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {"timestamp": "int", "timestamp_str": "str", "log": "str", "metadata": "LogMetadata"}

    attribute_map = {"timestamp": "timestamp", "timestamp_str": "timestamp_str", "log": "log", "metadata": "metadata"}

    def __init__(self, timestamp=None, timestamp_str=None, log=None, metadata=None, **kwargs):
        """
        LogList - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._timestamp = None
        self._timestamp_str = None
        self._log = None
        self._metadata = None
        self.discriminator = None

        self.timestamp = timestamp
        if timestamp_str is not None:
            self.timestamp_str = timestamp_str
        self.log = log
        if metadata is not None:
            self.metadata = metadata

    @property
    def timestamp(self):
        """
        Gets the timestamp of this LogList

        :return: the timestamp of this LogList
        :rtype: int
        """

        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this LogList

        :param timestamp: the timestamp of this LogList
        :type: int
        """

        if self.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")
        if self.client_side_validation and (timestamp is not None and not isinstance(timestamp, int)):
            raise ValueError("Parameter `timestamp` must be an integer")

        self._timestamp = timestamp

    @property
    def timestamp_str(self):
        """
        Gets the timestamp_str of this LogList

        :return: the timestamp_str of this LogList
        :rtype: str
        """

        return self._timestamp_str

    @timestamp_str.setter
    def timestamp_str(self, timestamp_str):
        """
        Sets the timestamp_str of this LogList

        :param timestamp_str: the timestamp_str of this LogList
        :type: str
        """

        if self.client_side_validation and (timestamp_str is not None and not isinstance(timestamp_str, str)):
            raise ValueError("Parameter `timestamp_str` must be a string")

        self._timestamp_str = timestamp_str

    @property
    def log(self):
        """
        Gets the log of this LogList

        :return: the log of this LogList
        :rtype: str
        """

        return self._log

    @log.setter
    def log(self, log):
        """
        Sets the log of this LogList

        :param log: the log of this LogList
        :type: str
        """

        if self.client_side_validation and log is None:
            raise ValueError("Invalid value for `log`, must not be `None`")
        if self.client_side_validation and (log is not None and not isinstance(log, str)):
            raise ValueError("Parameter `log` must be a string")

        self._log = log

    @property
    def metadata(self):
        """
        Gets the metadata of this LogList

        :return: the metadata of this LogList
        :rtype: LogMetadata
        """

        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this LogList

        :param metadata: the metadata of this LogList
        :type: LogMetadata
        """

        if self.client_side_validation and metadata is not None:
            if isinstance(metadata, dict):
                from ubiops.models.log_metadata import LogMetadata

                metadata = LogMetadata(**metadata)

        self._metadata = metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, LogList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, LogList):
            return True

        return self.to_dict() != other.to_dict()
