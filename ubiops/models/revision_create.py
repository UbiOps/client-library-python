# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class RevisionCreate(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {"success": "bool", "revision": "str", "build": "str"}

    attribute_map = {"success": "success", "revision": "revision", "build": "build"}

    def __init__(self, success=None, revision=None, build=None, **kwargs):
        """
        RevisionCreate - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._success = None
        self._revision = None
        self._build = None
        self.discriminator = None

        self.success = success
        self.revision = revision
        if build is not None:
            self.build = build

    @property
    def success(self):
        """
        Gets the success of this RevisionCreate

        :return: the success of this RevisionCreate
        :rtype: bool
        """

        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this RevisionCreate

        :param success: the success of this RevisionCreate
        :type: bool
        """

        if self.client_side_validation and success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")
        if self.client_side_validation and (success is not None and not isinstance(success, bool)):
            raise ValueError("Parameter `success` must be a boolean")

        self._success = success

    @property
    def revision(self):
        """
        Gets the revision of this RevisionCreate

        :return: the revision of this RevisionCreate
        :rtype: str
        """

        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this RevisionCreate

        :param revision: the revision of this RevisionCreate
        :type: str
        """

        if self.client_side_validation and revision is None:
            raise ValueError("Invalid value for `revision`, must not be `None`")
        if self.client_side_validation and (revision is not None and not isinstance(revision, str)):
            raise ValueError("Parameter `revision` must be a string")

        self._revision = revision

    @property
    def build(self):
        """
        Gets the build of this RevisionCreate

        :return: the build of this RevisionCreate
        :rtype: str
        """

        return self._build

    @build.setter
    def build(self, build):
        """
        Sets the build of this RevisionCreate

        :param build: the build of this RevisionCreate
        :type: str
        """

        if self.client_side_validation and (build is not None and not isinstance(build, str)):
            raise ValueError("Parameter `build` must be a string")

        self._build = build

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, RevisionCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, RevisionCreate):
            return True

        return self.to_dict() != other.to_dict()
