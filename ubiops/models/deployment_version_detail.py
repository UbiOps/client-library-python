# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class DeploymentVersionDetail(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {
        "id": "str",
        "deployment": "str",
        "version": "str",
        "description": "str",
        "environment": "str",
        "environment_display_name": "str",
        "status": "str",
        "active_revision": "str",
        "latest_revision": "str",
        "instance_type": "str",
        "maximum_instances": "int",
        "minimum_instances": "int",
        "maximum_idle_time": "int",
        "labels": "dict(str, str)",
        "creation_date": "datetime",
        "last_updated": "datetime",
        "request_retention_time": "int",
        "request_retention_mode": "str",
        "monitoring": "str",
        "default_notification_group": "str",
        "maximum_queue_size_express": "int",
        "maximum_queue_size_batch": "int",
        "static_ip": "bool",
        "restart_request_interruption": "bool",
        "last_file_upload": "datetime",
        "has_request_method": "bool",
        "has_requests_method": "bool",
    }

    attribute_map = {
        "id": "id",
        "deployment": "deployment",
        "version": "version",
        "description": "description",
        "environment": "environment",
        "environment_display_name": "environment_display_name",
        "status": "status",
        "active_revision": "active_revision",
        "latest_revision": "latest_revision",
        "instance_type": "instance_type",
        "maximum_instances": "maximum_instances",
        "minimum_instances": "minimum_instances",
        "maximum_idle_time": "maximum_idle_time",
        "labels": "labels",
        "creation_date": "creation_date",
        "last_updated": "last_updated",
        "request_retention_time": "request_retention_time",
        "request_retention_mode": "request_retention_mode",
        "monitoring": "monitoring",
        "default_notification_group": "default_notification_group",
        "maximum_queue_size_express": "maximum_queue_size_express",
        "maximum_queue_size_batch": "maximum_queue_size_batch",
        "static_ip": "static_ip",
        "restart_request_interruption": "restart_request_interruption",
        "last_file_upload": "last_file_upload",
        "has_request_method": "has_request_method",
        "has_requests_method": "has_requests_method",
    }

    def __init__(
        self,
        id=None,
        deployment=None,
        version=None,
        description=None,
        environment=None,
        environment_display_name=None,
        status=None,
        active_revision=None,
        latest_revision=None,
        instance_type=None,
        maximum_instances=None,
        minimum_instances=None,
        maximum_idle_time=None,
        labels=None,
        creation_date=None,
        last_updated=None,
        request_retention_time=None,
        request_retention_mode=None,
        monitoring=None,
        default_notification_group=None,
        maximum_queue_size_express=None,
        maximum_queue_size_batch=None,
        static_ip=None,
        restart_request_interruption=None,
        last_file_upload=None,
        has_request_method=None,
        has_requests_method=None,
        **kwargs,
    ):
        """
        DeploymentVersionDetail - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._id = None
        self._deployment = None
        self._version = None
        self._description = None
        self._environment = None
        self._environment_display_name = None
        self._status = None
        self._active_revision = None
        self._latest_revision = None
        self._instance_type = None
        self._maximum_instances = None
        self._minimum_instances = None
        self._maximum_idle_time = None
        self._labels = None
        self._creation_date = None
        self._last_updated = None
        self._request_retention_time = None
        self._request_retention_mode = None
        self._monitoring = None
        self._default_notification_group = None
        self._maximum_queue_size_express = None
        self._maximum_queue_size_batch = None
        self._static_ip = None
        self._restart_request_interruption = None
        self._last_file_upload = None
        self._has_request_method = None
        self._has_requests_method = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.deployment = deployment
        self.version = version
        if description is not None:
            self.description = description
        if environment is not None:
            self.environment = environment
        if environment_display_name is not None:
            self.environment_display_name = environment_display_name
        if status is not None:
            self.status = status
        if active_revision is not None:
            self.active_revision = active_revision
        if latest_revision is not None:
            self.latest_revision = latest_revision
        self.instance_type = instance_type
        if maximum_instances is not None:
            self.maximum_instances = maximum_instances
        if minimum_instances is not None:
            self.minimum_instances = minimum_instances
        if maximum_idle_time is not None:
            self.maximum_idle_time = maximum_idle_time
        if labels is not None:
            self.labels = labels
        if creation_date is not None:
            self.creation_date = creation_date
        if last_updated is not None:
            self.last_updated = last_updated
        if request_retention_time is not None:
            self.request_retention_time = request_retention_time
        self.request_retention_mode = request_retention_mode
        if monitoring is not None:
            self.monitoring = monitoring
        if default_notification_group is not None:
            self.default_notification_group = default_notification_group
        if maximum_queue_size_express is not None:
            self.maximum_queue_size_express = maximum_queue_size_express
        if maximum_queue_size_batch is not None:
            self.maximum_queue_size_batch = maximum_queue_size_batch
        if static_ip is not None:
            self.static_ip = static_ip
        if restart_request_interruption is not None:
            self.restart_request_interruption = restart_request_interruption
        self.last_file_upload = last_file_upload
        self.has_request_method = has_request_method
        self.has_requests_method = has_requests_method

    @property
    def id(self):
        """
        Gets the id of this DeploymentVersionDetail

        :return: the id of this DeploymentVersionDetail
        :rtype: str
        """

        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeploymentVersionDetail

        :param id: the id of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and (id is not None and not isinstance(id, str)):
            raise ValueError("Parameter `id` must be a string")

        self._id = id

    @property
    def deployment(self):
        """
        Gets the deployment of this DeploymentVersionDetail

        :return: the deployment of this DeploymentVersionDetail
        :rtype: str
        """

        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """
        Sets the deployment of this DeploymentVersionDetail

        :param deployment: the deployment of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and deployment is None:
            raise ValueError("Invalid value for `deployment`, must not be `None`")
        if self.client_side_validation and (deployment is not None and not isinstance(deployment, str)):
            raise ValueError("Parameter `deployment` must be a string")

        if self.client_side_validation and (deployment is not None and len(deployment) < 1):
            raise ValueError("Invalid value for `deployment`, length must be greater than or equal to `1`")

        self._deployment = deployment

    @property
    def version(self):
        """
        Gets the version of this DeploymentVersionDetail

        :return: the version of this DeploymentVersionDetail
        :rtype: str
        """

        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this DeploymentVersionDetail

        :param version: the version of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if self.client_side_validation and (version is not None and not isinstance(version, str)):
            raise ValueError("Parameter `version` must be a string")

        if self.client_side_validation and (version is not None and len(version) > 64):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `64`")
        if self.client_side_validation and (version is not None and len(version) < 1):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")

        self._version = version

    @property
    def description(self):
        """
        Gets the description of this DeploymentVersionDetail

        :return: the description of this DeploymentVersionDetail
        :rtype: str
        """

        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DeploymentVersionDetail

        :param description: the description of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and (description is not None and not isinstance(description, str)):
            raise ValueError("Parameter `description` must be a string")

        if self.client_side_validation and (description is not None and len(description) > 400):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `400`")

        self._description = description

    @property
    def environment(self):
        """
        Gets the environment of this DeploymentVersionDetail

        :return: the environment of this DeploymentVersionDetail
        :rtype: str
        """

        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this DeploymentVersionDetail

        :param environment: the environment of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and (environment is not None and not isinstance(environment, str)):
            raise ValueError("Parameter `environment` must be a string")

        if self.client_side_validation and (environment is not None and len(environment) < 1):
            raise ValueError("Invalid value for `environment`, length must be greater than or equal to `1`")

        self._environment = environment

    @property
    def environment_display_name(self):
        """
        Gets the environment_display_name of this DeploymentVersionDetail

        :return: the environment_display_name of this DeploymentVersionDetail
        :rtype: str
        """

        return self._environment_display_name

    @environment_display_name.setter
    def environment_display_name(self, environment_display_name):
        """
        Sets the environment_display_name of this DeploymentVersionDetail

        :param environment_display_name: the environment_display_name of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and (
            environment_display_name is not None and not isinstance(environment_display_name, str)
        ):
            raise ValueError("Parameter `environment_display_name` must be a string")

        if self.client_side_validation and (environment_display_name is not None and len(environment_display_name) < 1):
            raise ValueError(
                "Invalid value for `environment_display_name`, length must be greater than or equal to `1`"
            )

        self._environment_display_name = environment_display_name

    @property
    def status(self):
        """
        Gets the status of this DeploymentVersionDetail

        :return: the status of this DeploymentVersionDetail
        :rtype: str
        """

        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DeploymentVersionDetail

        :param status: the status of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and (status is not None and not isinstance(status, str)):
            raise ValueError("Parameter `status` must be a string")

        self._status = status

    @property
    def active_revision(self):
        """
        Gets the active_revision of this DeploymentVersionDetail

        :return: the active_revision of this DeploymentVersionDetail
        :rtype: str
        """

        return self._active_revision

    @active_revision.setter
    def active_revision(self, active_revision):
        """
        Sets the active_revision of this DeploymentVersionDetail

        :param active_revision: the active_revision of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and (active_revision is not None and not isinstance(active_revision, str)):
            raise ValueError("Parameter `active_revision` must be a string")

        self._active_revision = active_revision

    @property
    def latest_revision(self):
        """
        Gets the latest_revision of this DeploymentVersionDetail

        :return: the latest_revision of this DeploymentVersionDetail
        :rtype: str
        """

        return self._latest_revision

    @latest_revision.setter
    def latest_revision(self, latest_revision):
        """
        Sets the latest_revision of this DeploymentVersionDetail

        :param latest_revision: the latest_revision of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and (latest_revision is not None and not isinstance(latest_revision, str)):
            raise ValueError("Parameter `latest_revision` must be a string")

        self._latest_revision = latest_revision

    @property
    def instance_type(self):
        """
        Gets the instance_type of this DeploymentVersionDetail

        :return: the instance_type of this DeploymentVersionDetail
        :rtype: str
        """

        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """
        Sets the instance_type of this DeploymentVersionDetail

        :param instance_type: the instance_type of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")
        if self.client_side_validation and (instance_type is not None and not isinstance(instance_type, str)):
            raise ValueError("Parameter `instance_type` must be a string")

        if self.client_side_validation and (instance_type is not None and len(instance_type) < 1):
            raise ValueError("Invalid value for `instance_type`, length must be greater than or equal to `1`")

        self._instance_type = instance_type

    @property
    def maximum_instances(self):
        """
        Gets the maximum_instances of this DeploymentVersionDetail

        :return: the maximum_instances of this DeploymentVersionDetail
        :rtype: int
        """

        return self._maximum_instances

    @maximum_instances.setter
    def maximum_instances(self, maximum_instances):
        """
        Sets the maximum_instances of this DeploymentVersionDetail

        :param maximum_instances: the maximum_instances of this DeploymentVersionDetail
        :type: int
        """

        if self.client_side_validation and (maximum_instances is not None and not isinstance(maximum_instances, int)):
            raise ValueError("Parameter `maximum_instances` must be an integer")

        self._maximum_instances = maximum_instances

    @property
    def minimum_instances(self):
        """
        Gets the minimum_instances of this DeploymentVersionDetail

        :return: the minimum_instances of this DeploymentVersionDetail
        :rtype: int
        """

        return self._minimum_instances

    @minimum_instances.setter
    def minimum_instances(self, minimum_instances):
        """
        Sets the minimum_instances of this DeploymentVersionDetail

        :param minimum_instances: the minimum_instances of this DeploymentVersionDetail
        :type: int
        """

        if self.client_side_validation and (minimum_instances is not None and not isinstance(minimum_instances, int)):
            raise ValueError("Parameter `minimum_instances` must be an integer")

        self._minimum_instances = minimum_instances

    @property
    def maximum_idle_time(self):
        """
        Gets the maximum_idle_time of this DeploymentVersionDetail

        :return: the maximum_idle_time of this DeploymentVersionDetail
        :rtype: int
        """

        return self._maximum_idle_time

    @maximum_idle_time.setter
    def maximum_idle_time(self, maximum_idle_time):
        """
        Sets the maximum_idle_time of this DeploymentVersionDetail

        :param maximum_idle_time: the maximum_idle_time of this DeploymentVersionDetail
        :type: int
        """

        if self.client_side_validation and (maximum_idle_time is not None and not isinstance(maximum_idle_time, int)):
            raise ValueError("Parameter `maximum_idle_time` must be an integer")

        self._maximum_idle_time = maximum_idle_time

    @property
    def labels(self):
        """
        Gets the labels of this DeploymentVersionDetail

        :return: the labels of this DeploymentVersionDetail
        :rtype: dict(str, str)
        """

        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this DeploymentVersionDetail

        :param labels: the labels of this DeploymentVersionDetail
        :type: dict(str, str)
        """

        if self.client_side_validation and (labels is not None and not isinstance(labels, dict)):
            raise ValueError("Parameter `labels` must be a dictionary")

        self._labels = labels

    @property
    def creation_date(self):
        """
        Gets the creation_date of this DeploymentVersionDetail

        :return: the creation_date of this DeploymentVersionDetail
        :rtype: datetime
        """

        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this DeploymentVersionDetail

        :param creation_date: the creation_date of this DeploymentVersionDetail
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_updated(self):
        """
        Gets the last_updated of this DeploymentVersionDetail

        :return: the last_updated of this DeploymentVersionDetail
        :rtype: datetime
        """

        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """
        Sets the last_updated of this DeploymentVersionDetail

        :param last_updated: the last_updated of this DeploymentVersionDetail
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def request_retention_time(self):
        """
        Gets the request_retention_time of this DeploymentVersionDetail

        :return: the request_retention_time of this DeploymentVersionDetail
        :rtype: int
        """

        return self._request_retention_time

    @request_retention_time.setter
    def request_retention_time(self, request_retention_time):
        """
        Sets the request_retention_time of this DeploymentVersionDetail

        :param request_retention_time: the request_retention_time of this DeploymentVersionDetail
        :type: int
        """

        if self.client_side_validation and (
            request_retention_time is not None and not isinstance(request_retention_time, int)
        ):
            raise ValueError("Parameter `request_retention_time` must be an integer")

        self._request_retention_time = request_retention_time

    @property
    def request_retention_mode(self):
        """
        Gets the request_retention_mode of this DeploymentVersionDetail

        :return: the request_retention_mode of this DeploymentVersionDetail
        :rtype: str
        """

        return self._request_retention_mode

    @request_retention_mode.setter
    def request_retention_mode(self, request_retention_mode):
        """
        Sets the request_retention_mode of this DeploymentVersionDetail

        :param request_retention_mode: the request_retention_mode of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and request_retention_mode is None:
            raise ValueError("Invalid value for `request_retention_mode`, must not be `None`")
        if self.client_side_validation and (
            request_retention_mode is not None and not isinstance(request_retention_mode, str)
        ):
            raise ValueError("Parameter `request_retention_mode` must be a string")

        if self.client_side_validation and (request_retention_mode is not None and len(request_retention_mode) < 1):
            raise ValueError("Invalid value for `request_retention_mode`, length must be greater than or equal to `1`")

        self._request_retention_mode = request_retention_mode

    @property
    def monitoring(self):
        """
        Gets the monitoring of this DeploymentVersionDetail

        :return: the monitoring of this DeploymentVersionDetail
        :rtype: str
        """

        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """
        Sets the monitoring of this DeploymentVersionDetail

        :param monitoring: the monitoring of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and (monitoring is not None and not isinstance(monitoring, str)):
            raise ValueError("Parameter `monitoring` must be a string")

        self._monitoring = monitoring

    @property
    def default_notification_group(self):
        """
        Gets the default_notification_group of this DeploymentVersionDetail

        :return: the default_notification_group of this DeploymentVersionDetail
        :rtype: str
        """

        return self._default_notification_group

    @default_notification_group.setter
    def default_notification_group(self, default_notification_group):
        """
        Sets the default_notification_group of this DeploymentVersionDetail

        :param default_notification_group: the default_notification_group of this DeploymentVersionDetail
        :type: str
        """

        if self.client_side_validation and (
            default_notification_group is not None and not isinstance(default_notification_group, str)
        ):
            raise ValueError("Parameter `default_notification_group` must be a string")

        self._default_notification_group = default_notification_group

    @property
    def maximum_queue_size_express(self):
        """
        Gets the maximum_queue_size_express of this DeploymentVersionDetail

        :return: the maximum_queue_size_express of this DeploymentVersionDetail
        :rtype: int
        """

        return self._maximum_queue_size_express

    @maximum_queue_size_express.setter
    def maximum_queue_size_express(self, maximum_queue_size_express):
        """
        Sets the maximum_queue_size_express of this DeploymentVersionDetail

        :param maximum_queue_size_express: the maximum_queue_size_express of this DeploymentVersionDetail
        :type: int
        """

        if self.client_side_validation and (
            maximum_queue_size_express is not None and not isinstance(maximum_queue_size_express, int)
        ):
            raise ValueError("Parameter `maximum_queue_size_express` must be an integer")

        self._maximum_queue_size_express = maximum_queue_size_express

    @property
    def maximum_queue_size_batch(self):
        """
        Gets the maximum_queue_size_batch of this DeploymentVersionDetail

        :return: the maximum_queue_size_batch of this DeploymentVersionDetail
        :rtype: int
        """

        return self._maximum_queue_size_batch

    @maximum_queue_size_batch.setter
    def maximum_queue_size_batch(self, maximum_queue_size_batch):
        """
        Sets the maximum_queue_size_batch of this DeploymentVersionDetail

        :param maximum_queue_size_batch: the maximum_queue_size_batch of this DeploymentVersionDetail
        :type: int
        """

        if self.client_side_validation and (
            maximum_queue_size_batch is not None and not isinstance(maximum_queue_size_batch, int)
        ):
            raise ValueError("Parameter `maximum_queue_size_batch` must be an integer")

        self._maximum_queue_size_batch = maximum_queue_size_batch

    @property
    def static_ip(self):
        """
        Gets the static_ip of this DeploymentVersionDetail

        :return: the static_ip of this DeploymentVersionDetail
        :rtype: bool
        """

        return self._static_ip

    @static_ip.setter
    def static_ip(self, static_ip):
        """
        Sets the static_ip of this DeploymentVersionDetail

        :param static_ip: the static_ip of this DeploymentVersionDetail
        :type: bool
        """

        if self.client_side_validation and (static_ip is not None and not isinstance(static_ip, bool)):
            raise ValueError("Parameter `static_ip` must be a boolean")

        self._static_ip = static_ip

    @property
    def restart_request_interruption(self):
        """
        Gets the restart_request_interruption of this DeploymentVersionDetail

        :return: the restart_request_interruption of this DeploymentVersionDetail
        :rtype: bool
        """

        return self._restart_request_interruption

    @restart_request_interruption.setter
    def restart_request_interruption(self, restart_request_interruption):
        """
        Sets the restart_request_interruption of this DeploymentVersionDetail

        :param restart_request_interruption: the restart_request_interruption of this DeploymentVersionDetail
        :type: bool
        """

        if self.client_side_validation and (
            restart_request_interruption is not None and not isinstance(restart_request_interruption, bool)
        ):
            raise ValueError("Parameter `restart_request_interruption` must be a boolean")

        self._restart_request_interruption = restart_request_interruption

    @property
    def last_file_upload(self):
        """
        Gets the last_file_upload of this DeploymentVersionDetail

        :return: the last_file_upload of this DeploymentVersionDetail
        :rtype: datetime
        """

        return self._last_file_upload

    @last_file_upload.setter
    def last_file_upload(self, last_file_upload):
        """
        Sets the last_file_upload of this DeploymentVersionDetail

        :param last_file_upload: the last_file_upload of this DeploymentVersionDetail
        :type: datetime
        """

        self._last_file_upload = last_file_upload

    @property
    def has_request_method(self):
        """
        Gets the has_request_method of this DeploymentVersionDetail

        :return: the has_request_method of this DeploymentVersionDetail
        :rtype: bool
        """

        return self._has_request_method

    @has_request_method.setter
    def has_request_method(self, has_request_method):
        """
        Sets the has_request_method of this DeploymentVersionDetail

        :param has_request_method: the has_request_method of this DeploymentVersionDetail
        :type: bool
        """

        if self.client_side_validation and (
            has_request_method is not None and not isinstance(has_request_method, bool)
        ):
            raise ValueError("Parameter `has_request_method` must be a boolean")

        self._has_request_method = has_request_method

    @property
    def has_requests_method(self):
        """
        Gets the has_requests_method of this DeploymentVersionDetail

        :return: the has_requests_method of this DeploymentVersionDetail
        :rtype: bool
        """

        return self._has_requests_method

    @has_requests_method.setter
    def has_requests_method(self, has_requests_method):
        """
        Sets the has_requests_method of this DeploymentVersionDetail

        :param has_requests_method: the has_requests_method of this DeploymentVersionDetail
        :type: bool
        """

        if self.client_side_validation and (
            has_requests_method is not None and not isinstance(has_requests_method, bool)
        ):
            raise ValueError("Parameter `has_requests_method` must be a boolean")

        self._has_requests_method = has_requests_method

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, DeploymentVersionDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, DeploymentVersionDetail):
            return True

        return self.to_dict() != other.to_dict()
