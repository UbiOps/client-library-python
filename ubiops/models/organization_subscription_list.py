# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class OrganizationSubscriptionList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'subscription': 'str',
        'start_date': 'date'
    }

    attribute_map = {
        'id': 'id',
        'subscription': 'subscription',
        'start_date': 'start_date'
    }

    def __init__(self, id=None, subscription=None, start_date=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationSubscriptionList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._subscription = None
        self._start_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subscription is not None:
            self.subscription = subscription
        self.start_date = start_date

    @property
    def id(self):
        """Gets the id of this OrganizationSubscriptionList.  # noqa: E501


        :return: The id of this OrganizationSubscriptionList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationSubscriptionList.


        :param id: The id of this OrganizationSubscriptionList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def subscription(self):
        """Gets the subscription of this OrganizationSubscriptionList.  # noqa: E501


        :return: The subscription of this OrganizationSubscriptionList.  # noqa: E501
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this OrganizationSubscriptionList.


        :param subscription: The subscription of this OrganizationSubscriptionList.  # noqa: E501
        :type: str
        """

        self._subscription = subscription

    @property
    def start_date(self):
        """Gets the start_date of this OrganizationSubscriptionList.  # noqa: E501


        :return: The start_date of this OrganizationSubscriptionList.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this OrganizationSubscriptionList.


        :param start_date: The start_date of this OrganizationSubscriptionList.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and start_date is None:  # noqa: E501
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationSubscriptionList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationSubscriptionList):
            return True

        return self.to_dict() != other.to_dict()
