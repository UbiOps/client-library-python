# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class OrganizationProjectUsage(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {"project_id": "str", "project_name": "str", "data": "list[TimeSeriesDataPointList]"}

    attribute_map = {"project_id": "project_id", "project_name": "project_name", "data": "data"}

    def __init__(self, project_id=None, project_name=None, data=None, **kwargs):
        """
        OrganizationProjectUsage - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._project_id = None
        self._project_name = None
        self._data = None
        self.discriminator = None

        self.project_id = project_id
        self.project_name = project_name
        self.data = data

    @property
    def project_id(self):
        """
        Gets the project_id of this OrganizationProjectUsage

        :return: the project_id of this OrganizationProjectUsage
        :rtype: str
        """

        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this OrganizationProjectUsage

        :param project_id: the project_id of this OrganizationProjectUsage
        :type: str
        """

        if self.client_side_validation and project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")
        if self.client_side_validation and (project_id is not None and not isinstance(project_id, str)):
            raise ValueError("Parameter `project_id` must be a string")

        self._project_id = project_id

    @property
    def project_name(self):
        """
        Gets the project_name of this OrganizationProjectUsage

        :return: the project_name of this OrganizationProjectUsage
        :rtype: str
        """

        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this OrganizationProjectUsage

        :param project_name: the project_name of this OrganizationProjectUsage
        :type: str
        """

        if self.client_side_validation and project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")
        if self.client_side_validation and (project_name is not None and not isinstance(project_name, str)):
            raise ValueError("Parameter `project_name` must be a string")

        if self.client_side_validation and (project_name is not None and len(project_name) < 1):
            raise ValueError("Invalid value for `project_name`, length must be greater than or equal to `1`")

        self._project_name = project_name

    @property
    def data(self):
        """
        Gets the data of this OrganizationProjectUsage

        :return: the data of this OrganizationProjectUsage
        :rtype: list[TimeSeriesDataPointList]
        """

        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this OrganizationProjectUsage

        :param data: the data of this OrganizationProjectUsage
        :type: list[TimeSeriesDataPointList]
        """

        if self.client_side_validation and data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")
        if self.client_side_validation and (data is not None and not isinstance(data, list)):
            raise ValueError("Parameter `data` must be a list")
        if self.client_side_validation and data is not None:
            from ubiops.models.time_series_data_point_list import TimeSeriesDataPointList

            data = [TimeSeriesDataPointList(**item) if isinstance(item, dict) else item for item in data]

        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, OrganizationProjectUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, OrganizationProjectUsage):
            return True

        return self.to_dict() != other.to_dict()
