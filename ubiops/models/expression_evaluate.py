# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class ExpressionEvaluate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'expression': 'str',
        'input_fields': 'list[ExpressionInputFieldCreate]',
        'request_data': 'object'
    }

    attribute_map = {
        'expression': 'expression',
        'input_fields': 'input_fields',
        'request_data': 'request_data'
    }

    def __init__(self, expression=None, input_fields=None, request_data=None, local_vars_configuration=None, **kwargs):  # noqa: E501
        """ExpressionEvaluate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._expression = None
        self._input_fields = None
        self._request_data = None
        self.discriminator = None

        self.expression = expression
        self.input_fields = input_fields
        self.request_data = request_data

    @property
    def expression(self):
        """Gets the expression of this ExpressionEvaluate.  # noqa: E501


        :return: The expression of this ExpressionEvaluate.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this ExpressionEvaluate.


        :param expression: The expression of this ExpressionEvaluate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and expression is None:  # noqa: E501
            raise ValueError("Invalid value for `expression`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                expression is not None and not isinstance(expression, str)):
            raise ValueError("Parameter `expression` must be a string")  # noqa: E501

        self._expression = expression

    @property
    def input_fields(self):
        """Gets the input_fields of this ExpressionEvaluate.  # noqa: E501


        :return: The input_fields of this ExpressionEvaluate.  # noqa: E501
        :rtype: list[ExpressionInputFieldCreate]
        """
        return self._input_fields

    @input_fields.setter
    def input_fields(self, input_fields):
        """Sets the input_fields of this ExpressionEvaluate.


        :param input_fields: The input_fields of this ExpressionEvaluate.  # noqa: E501
        :type: list[ExpressionInputFieldCreate]
        """
        if self.local_vars_configuration.client_side_validation and input_fields is None:  # noqa: E501
            raise ValueError("Invalid value for `input_fields`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                input_fields is not None and not isinstance(input_fields, list)):
            raise ValueError("Parameter `input_fields` must be a list")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and input_fields is not None:
            from ubiops.models.expression_input_field_create import ExpressionInputFieldCreate

            input_fields = [
                ExpressionInputFieldCreate(**item) if isinstance(item, dict) else item  # noqa: E501
                for item in input_fields
            ]

        self._input_fields = input_fields

    @property
    def request_data(self):
        """Gets the request_data of this ExpressionEvaluate.  # noqa: E501


        :return: The request_data of this ExpressionEvaluate.  # noqa: E501
        :rtype: object
        """
        return self._request_data

    @request_data.setter
    def request_data(self, request_data):
        """Sets the request_data of this ExpressionEvaluate.


        :param request_data: The request_data of this ExpressionEvaluate.  # noqa: E501
        :type: object
        """

        self._request_data = request_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpressionEvaluate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExpressionEvaluate):
            return True

        return self.to_dict() != other.to_dict()
