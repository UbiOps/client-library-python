# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class EnvironmentList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'display_name': 'str',
        'base_environment': 'str',
        'base_environment_display_name': 'str',
        'project': 'str',
        'creation_date': 'datetime',
        'last_updated': 'datetime',
        'description': 'str',
        'labels': 'dict(str, str)',
        'gpu_required': 'bool',
        'status': 'str',
        'implicit': 'bool',
        'hidden': 'bool',
        'deprecated': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'display_name': 'display_name',
        'base_environment': 'base_environment',
        'base_environment_display_name': 'base_environment_display_name',
        'project': 'project',
        'creation_date': 'creation_date',
        'last_updated': 'last_updated',
        'description': 'description',
        'labels': 'labels',
        'gpu_required': 'gpu_required',
        'status': 'status',
        'implicit': 'implicit',
        'hidden': 'hidden',
        'deprecated': 'deprecated'
    }

    def __init__(self, id=None, name=None, display_name=None, base_environment=None, base_environment_display_name=None, project=None, creation_date=None, last_updated=None, description=None, labels=None, gpu_required=None, status=None, implicit=None, hidden=None, deprecated=None, local_vars_configuration=None, **kwargs):  # noqa: E501
        """EnvironmentList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._display_name = None
        self._base_environment = None
        self._base_environment_display_name = None
        self._project = None
        self._creation_date = None
        self._last_updated = None
        self._description = None
        self._labels = None
        self._gpu_required = None
        self._status = None
        self._implicit = None
        self._hidden = None
        self._deprecated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.display_name = display_name
        if base_environment is not None:
            self.base_environment = base_environment
        if base_environment_display_name is not None:
            self.base_environment_display_name = base_environment_display_name
        if project is not None:
            self.project = project
        if creation_date is not None:
            self.creation_date = creation_date
        if last_updated is not None:
            self.last_updated = last_updated
        if description is not None:
            self.description = description
        if labels is not None:
            self.labels = labels
        if gpu_required is not None:
            self.gpu_required = gpu_required
        if status is not None:
            self.status = status
        if implicit is not None:
            self.implicit = implicit
        if hidden is not None:
            self.hidden = hidden
        if deprecated is not None:
            self.deprecated = deprecated

    @property
    def id(self):
        """Gets the id of this EnvironmentList.  # noqa: E501


        :return: The id of this EnvironmentList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnvironmentList.


        :param id: The id of this EnvironmentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            id is not None and not isinstance(id, str)
        ):
            raise ValueError("Parameter `id` must be a string")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this EnvironmentList.  # noqa: E501


        :return: The name of this EnvironmentList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnvironmentList.


        :param name: The name of this EnvironmentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            name is not None and not isinstance(name, str)
        ):
            raise ValueError("Parameter `name` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            name is not None and len(name) > 1024
        ):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            name is not None and len(name) < 1
        ):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this EnvironmentList.  # noqa: E501


        :return: The display_name of this EnvironmentList.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EnvironmentList.


        :param display_name: The display_name of this EnvironmentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            display_name is not None and not isinstance(display_name, str)
        ):
            raise ValueError("Parameter `display_name` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            display_name is not None and len(display_name) > 1024
        ):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `1024`")  # noqa: E501

        self._display_name = display_name

    @property
    def base_environment(self):
        """Gets the base_environment of this EnvironmentList.  # noqa: E501


        :return: The base_environment of this EnvironmentList.  # noqa: E501
        :rtype: str
        """
        return self._base_environment

    @base_environment.setter
    def base_environment(self, base_environment):
        """Sets the base_environment of this EnvironmentList.


        :param base_environment: The base_environment of this EnvironmentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            base_environment is not None and not isinstance(base_environment, str)
        ):
            raise ValueError("Parameter `base_environment` must be a string")  # noqa: E501

        self._base_environment = base_environment

    @property
    def base_environment_display_name(self):
        """Gets the base_environment_display_name of this EnvironmentList.  # noqa: E501


        :return: The base_environment_display_name of this EnvironmentList.  # noqa: E501
        :rtype: str
        """
        return self._base_environment_display_name

    @base_environment_display_name.setter
    def base_environment_display_name(self, base_environment_display_name):
        """Sets the base_environment_display_name of this EnvironmentList.


        :param base_environment_display_name: The base_environment_display_name of this EnvironmentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            base_environment_display_name is not None and not isinstance(base_environment_display_name, str)
        ):
            raise ValueError("Parameter `base_environment_display_name` must be a string")  # noqa: E501

        self._base_environment_display_name = base_environment_display_name

    @property
    def project(self):
        """Gets the project of this EnvironmentList.  # noqa: E501


        :return: The project of this EnvironmentList.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this EnvironmentList.


        :param project: The project of this EnvironmentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            project is not None and not isinstance(project, str)
        ):
            raise ValueError("Parameter `project` must be a string")  # noqa: E501

        self._project = project

    @property
    def creation_date(self):
        """Gets the creation_date of this EnvironmentList.  # noqa: E501


        :return: The creation_date of this EnvironmentList.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this EnvironmentList.


        :param creation_date: The creation_date of this EnvironmentList.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_updated(self):
        """Gets the last_updated of this EnvironmentList.  # noqa: E501


        :return: The last_updated of this EnvironmentList.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this EnvironmentList.


        :param last_updated: The last_updated of this EnvironmentList.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def description(self):
        """Gets the description of this EnvironmentList.  # noqa: E501


        :return: The description of this EnvironmentList.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EnvironmentList.


        :param description: The description of this EnvironmentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            description is not None and not isinstance(description, str)
        ):
            raise ValueError("Parameter `description` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            description is not None and len(description) > 400
        ):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `400`")  # noqa: E501

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this EnvironmentList.  # noqa: E501


        :return: The labels of this EnvironmentList.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this EnvironmentList.


        :param labels: The labels of this EnvironmentList.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and (
            labels is not None and not isinstance(labels, dict)
        ):
            raise ValueError("Parameter `labels` must be a dictionary")  # noqa: E501

        self._labels = labels

    @property
    def gpu_required(self):
        """Gets the gpu_required of this EnvironmentList.  # noqa: E501


        :return: The gpu_required of this EnvironmentList.  # noqa: E501
        :rtype: bool
        """
        return self._gpu_required

    @gpu_required.setter
    def gpu_required(self, gpu_required):
        """Sets the gpu_required of this EnvironmentList.


        :param gpu_required: The gpu_required of this EnvironmentList.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and (
            gpu_required is not None and not isinstance(gpu_required, bool)
        ):
            raise ValueError("Parameter `gpu_required` must be a boolean")  # noqa: E501

        self._gpu_required = gpu_required

    @property
    def status(self):
        """Gets the status of this EnvironmentList.  # noqa: E501


        :return: The status of this EnvironmentList.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnvironmentList.


        :param status: The status of this EnvironmentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            status is not None and not isinstance(status, str)
        ):
            raise ValueError("Parameter `status` must be a string")  # noqa: E501

        self._status = status

    @property
    def implicit(self):
        """Gets the implicit of this EnvironmentList.  # noqa: E501


        :return: The implicit of this EnvironmentList.  # noqa: E501
        :rtype: bool
        """
        return self._implicit

    @implicit.setter
    def implicit(self, implicit):
        """Sets the implicit of this EnvironmentList.


        :param implicit: The implicit of this EnvironmentList.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and (
            implicit is not None and not isinstance(implicit, bool)
        ):
            raise ValueError("Parameter `implicit` must be a boolean")  # noqa: E501

        self._implicit = implicit

    @property
    def hidden(self):
        """Gets the hidden of this EnvironmentList.  # noqa: E501


        :return: The hidden of this EnvironmentList.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this EnvironmentList.


        :param hidden: The hidden of this EnvironmentList.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and (
            hidden is not None and not isinstance(hidden, bool)
        ):
            raise ValueError("Parameter `hidden` must be a boolean")  # noqa: E501

        self._hidden = hidden

    @property
    def deprecated(self):
        """Gets the deprecated of this EnvironmentList.  # noqa: E501


        :return: The deprecated of this EnvironmentList.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this EnvironmentList.


        :param deprecated: The deprecated of this EnvironmentList.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and (
            deprecated is not None and not isinstance(deprecated, bool)
        ):
            raise ValueError("Parameter `deprecated` must be a boolean")  # noqa: E501

        self._deprecated = deprecated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnvironmentList):
            return True

        return self.to_dict() != other.to_dict()
