# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class EnvironmentBuildDependency(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {"name": "str", "content": "str"}

    attribute_map = {"name": "name", "content": "content"}

    def __init__(self, name=None, content=None, **kwargs):
        """
        EnvironmentBuildDependency - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._name = None
        self._content = None
        self.discriminator = None

        self.name = name
        self.content = content

    @property
    def name(self):
        """
        Gets the name of this EnvironmentBuildDependency

        :return: the name of this EnvironmentBuildDependency
        :rtype: str
        """

        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnvironmentBuildDependency

        :param name: the name of this EnvironmentBuildDependency
        :type: str
        """

        if self.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if self.client_side_validation and (name is not None and not isinstance(name, str)):
            raise ValueError("Parameter `name` must be a string")

        if self.client_side_validation and (name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def content(self):
        """
        Gets the content of this EnvironmentBuildDependency

        :return: the content of this EnvironmentBuildDependency
        :rtype: str
        """

        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this EnvironmentBuildDependency

        :param content: the content of this EnvironmentBuildDependency
        :type: str
        """

        if self.client_side_validation and (content is not None and not isinstance(content, str)):
            raise ValueError("Parameter `content` must be a string")

        self._content = content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, EnvironmentBuildDependency):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, EnvironmentBuildDependency):
            return True

        return self.to_dict() != other.to_dict()
