# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class FileCompleteMultipartUpload(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {"upload_id": "str", "parts": "list[dict(str, str)]"}

    attribute_map = {"upload_id": "upload_id", "parts": "parts"}

    def __init__(self, upload_id=None, parts=None, **kwargs):
        """
        FileCompleteMultipartUpload - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._upload_id = None
        self._parts = None
        self.discriminator = None

        self.upload_id = upload_id
        self.parts = parts

    @property
    def upload_id(self):
        """
        Gets the upload_id of this FileCompleteMultipartUpload

        :return: the upload_id of this FileCompleteMultipartUpload
        :rtype: str
        """

        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """
        Sets the upload_id of this FileCompleteMultipartUpload

        :param upload_id: the upload_id of this FileCompleteMultipartUpload
        :type: str
        """

        if self.client_side_validation and (upload_id is not None and not isinstance(upload_id, str)):
            raise ValueError("Parameter `upload_id` must be a string")

        self._upload_id = upload_id

    @property
    def parts(self):
        """
        Gets the parts of this FileCompleteMultipartUpload

        :return: the parts of this FileCompleteMultipartUpload
        :rtype: list[dict(str, str)]
        """

        return self._parts

    @parts.setter
    def parts(self, parts):
        """
        Sets the parts of this FileCompleteMultipartUpload

        :param parts: the parts of this FileCompleteMultipartUpload
        :type: list[dict(str, str)]
        """

        if self.client_side_validation and parts is None:
            raise ValueError("Invalid value for `parts`, must not be `None`")
        if self.client_side_validation and (parts is not None and not isinstance(parts, list)):
            raise ValueError("Parameter `parts` must be a list")

        self._parts = parts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, FileCompleteMultipartUpload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, FileCompleteMultipartUpload):
            return True

        return self.to_dict() != other.to_dict()
