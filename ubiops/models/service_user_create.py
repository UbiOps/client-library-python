# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class ServiceUserCreate(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {"name": "str", "allowed_cors_origins": "list[str]", "expiry_date": "datetime"}

    attribute_map = {"name": "name", "allowed_cors_origins": "allowed_cors_origins", "expiry_date": "expiry_date"}

    def __init__(self, name=None, allowed_cors_origins=None, expiry_date=None, **kwargs):
        """
        ServiceUserCreate - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._name = None
        self._allowed_cors_origins = None
        self._expiry_date = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if allowed_cors_origins is not None:
            self.allowed_cors_origins = allowed_cors_origins
        self.expiry_date = expiry_date

    @property
    def name(self):
        """
        Gets the name of this ServiceUserCreate

        :return: the name of this ServiceUserCreate
        :rtype: str
        """

        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ServiceUserCreate

        :param name: the name of this ServiceUserCreate
        :type: str
        """

        if self.client_side_validation and (name is not None and not isinstance(name, str)):
            raise ValueError("Parameter `name` must be a string")

        if self.client_side_validation and (name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def allowed_cors_origins(self):
        """
        Gets the allowed_cors_origins of this ServiceUserCreate

        :return: the allowed_cors_origins of this ServiceUserCreate
        :rtype: list[str]
        """

        return self._allowed_cors_origins

    @allowed_cors_origins.setter
    def allowed_cors_origins(self, allowed_cors_origins):
        """
        Sets the allowed_cors_origins of this ServiceUserCreate

        :param allowed_cors_origins: the allowed_cors_origins of this ServiceUserCreate
        :type: list[str]
        """

        if self.client_side_validation and (
            allowed_cors_origins is not None and not isinstance(allowed_cors_origins, list)
        ):
            raise ValueError("Parameter `allowed_cors_origins` must be a list")

        self._allowed_cors_origins = allowed_cors_origins

    @property
    def expiry_date(self):
        """
        Gets the expiry_date of this ServiceUserCreate

        :return: the expiry_date of this ServiceUserCreate
        :rtype: datetime
        """

        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """
        Sets the expiry_date of this ServiceUserCreate

        :param expiry_date: the expiry_date of this ServiceUserCreate
        :type: datetime
        """

        self._expiry_date = expiry_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, ServiceUserCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, ServiceUserCreate):
            return True

        return self.to_dict() != other.to_dict()
