# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class EnvironmentUsage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'deployment': 'str',
        'version': 'str',
        'environment': 'str',
        'environment_display_name': 'str',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'deployment': 'deployment',
        'version': 'version',
        'environment': 'environment',
        'environment_display_name': 'environment_display_name',
        'status': 'status'
    }

    def __init__(self, id=None, deployment=None, version=None, environment=None, environment_display_name=None, status=None, local_vars_configuration=None, **kwargs):  # noqa: E501
        """EnvironmentUsage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._deployment = None
        self._version = None
        self._environment = None
        self._environment_display_name = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.deployment = deployment
        self.version = version
        self.environment = environment
        self.environment_display_name = environment_display_name
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this EnvironmentUsage.  # noqa: E501


        :return: The id of this EnvironmentUsage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnvironmentUsage.


        :param id: The id of this EnvironmentUsage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            id is not None and not isinstance(id, str)
        ):
            raise ValueError("Parameter `id` must be a string")  # noqa: E501

        self._id = id

    @property
    def deployment(self):
        """Gets the deployment of this EnvironmentUsage.  # noqa: E501


        :return: The deployment of this EnvironmentUsage.  # noqa: E501
        :rtype: str
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this EnvironmentUsage.


        :param deployment: The deployment of this EnvironmentUsage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and deployment is None:  # noqa: E501
            raise ValueError("Invalid value for `deployment`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            deployment is not None and not isinstance(deployment, str)
        ):
            raise ValueError("Parameter `deployment` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            deployment is not None and len(deployment) < 1
        ):
            raise ValueError("Invalid value for `deployment`, length must be greater than or equal to `1`")  # noqa: E501

        self._deployment = deployment

    @property
    def version(self):
        """Gets the version of this EnvironmentUsage.  # noqa: E501


        :return: The version of this EnvironmentUsage.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EnvironmentUsage.


        :param version: The version of this EnvironmentUsage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            version is not None and not isinstance(version, str)
        ):
            raise ValueError("Parameter `version` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            version is not None and len(version) > 64
        ):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `64`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            version is not None and len(version) < 1
        ):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    @property
    def environment(self):
        """Gets the environment of this EnvironmentUsage.  # noqa: E501


        :return: The environment of this EnvironmentUsage.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this EnvironmentUsage.


        :param environment: The environment of this EnvironmentUsage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and environment is None:  # noqa: E501
            raise ValueError("Invalid value for `environment`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            environment is not None and not isinstance(environment, str)
        ):
            raise ValueError("Parameter `environment` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            environment is not None and len(environment) < 1
        ):
            raise ValueError("Invalid value for `environment`, length must be greater than or equal to `1`")  # noqa: E501

        self._environment = environment

    @property
    def environment_display_name(self):
        """Gets the environment_display_name of this EnvironmentUsage.  # noqa: E501


        :return: The environment_display_name of this EnvironmentUsage.  # noqa: E501
        :rtype: str
        """
        return self._environment_display_name

    @environment_display_name.setter
    def environment_display_name(self, environment_display_name):
        """Sets the environment_display_name of this EnvironmentUsage.


        :param environment_display_name: The environment_display_name of this EnvironmentUsage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and environment_display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `environment_display_name`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            environment_display_name is not None and not isinstance(environment_display_name, str)
        ):
            raise ValueError("Parameter `environment_display_name` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            environment_display_name is not None and len(environment_display_name) < 1
        ):
            raise ValueError("Invalid value for `environment_display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._environment_display_name = environment_display_name

    @property
    def status(self):
        """Gets the status of this EnvironmentUsage.  # noqa: E501


        :return: The status of this EnvironmentUsage.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnvironmentUsage.


        :param status: The status of this EnvironmentUsage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            status is not None and not isinstance(status, str)
        ):
            raise ValueError("Parameter `status` must be a string")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnvironmentUsage):
            return True

        return self.to_dict() != other.to_dict()
