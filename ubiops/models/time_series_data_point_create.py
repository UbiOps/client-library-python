# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint


class TimeSeriesDataPointCreate(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type
      attribute_map (dict): The key is attribute name and the value is json key in definition
    """

    openapi_types = {"date": "datetime", "value": "float"}

    attribute_map = {"date": "date", "value": "value"}

    def __init__(self, date=None, value=None, **kwargs):
        """
        TimeSeriesDataPointCreate - a model defined in OpenAPI
        """

        self.client_side_validation = True
        if "local_vars_configuration" in kwargs and kwargs["local_vars_configuration"] is not None:
            self.client_side_validation = kwargs["local_vars_configuration"].client_side_validation

        self._date = None
        self._value = None
        self.discriminator = None

        self.date = date
        self.value = value

    @property
    def date(self):
        """
        Gets the date of this TimeSeriesDataPointCreate

        :return: the date of this TimeSeriesDataPointCreate
        :rtype: datetime
        """

        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this TimeSeriesDataPointCreate

        :param date: the date of this TimeSeriesDataPointCreate
        :type: datetime
        """

        if self.client_side_validation and date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")

        self._date = date

    @property
    def value(self):
        """
        Gets the value of this TimeSeriesDataPointCreate

        :return: the value of this TimeSeriesDataPointCreate
        :rtype: float
        """

        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this TimeSeriesDataPointCreate

        :param value: the value of this TimeSeriesDataPointCreate
        :type: float
        """

        if self.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")
        if self.client_side_validation and (value is not None and not isinstance(value, (int, float))):
            raise ValueError("Parameter `value` must be a float")

        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """

        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """

        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """

        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """

        if not isinstance(other, TimeSeriesDataPointCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """

        if not isinstance(other, TimeSeriesDataPointCreate):
            return True

        return self.to_dict() != other.to_dict()
