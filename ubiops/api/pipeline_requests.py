# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


from ubiops.api_client import ApiClient
from ubiops.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class PipelineRequests(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_pipeline_requests_create_with_http_info(self, project_name, pipeline_name, data, **kwargs):
        """
        Create a batch pipeline request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.batch_pipeline_requests_create_with_http_info(
                project_name, pipeline_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param list[object] data: (required)
        :param kwargs:
            - int timeout:
            - str notification_group:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestBatchCreateResponse], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "batch_pipeline_requests_create"
        optional_params = ["timeout", "notification_group"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(data, list):
                raise ApiValueError(f"Parameter `data` must be a list when calling `{method_name}`")
        if self.api_client.client_side_validation and "timeout" in kwargs and kwargs["timeout"] is not None:
            if not isinstance(kwargs["timeout"], int):
                raise ApiValueError(f"Parameter `timeout` must be an integer when calling `{method_name}`")
        if (
            self.api_client.client_side_validation
            and "notification_group" in kwargs
            and kwargs["notification_group"] is not None
        ):
            if not isinstance(kwargs["notification_group"], str):
                raise ApiValueError(f"Parameter `notification_group` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name

        if "timeout" in kwargs and kwargs["timeout"] is not None:
            query_params.append(("timeout", kwargs["timeout"]))
        if "notification_group" in kwargs and kwargs["notification_group"] is not None:
            query_params.append(("notification_group", kwargs["notification_group"]))

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        if isinstance(body_params, str):
            header_params["Content-Type"] = self.api_client.select_header_content_type(["text/plain"])
        else:
            header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/requests/batch"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[PipelineRequestBatchCreateResponse]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def batch_pipeline_version_requests_create_with_http_info(
        self, project_name, pipeline_name, version, data, **kwargs
    ):
        """
        Create a batch pipeline version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.batch_pipeline_version_requests_create_with_http_info(
                project_name, pipeline_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param list[object] data: (required)
        :param kwargs:
            - int timeout:
            - str notification_group:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestBatchCreateResponse], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "batch_pipeline_version_requests_create"
        optional_params = ["timeout", "notification_group"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(data, list):
                raise ApiValueError(f"Parameter `data` must be a list when calling `{method_name}`")
        if self.api_client.client_side_validation and "timeout" in kwargs and kwargs["timeout"] is not None:
            if not isinstance(kwargs["timeout"], int):
                raise ApiValueError(f"Parameter `timeout` must be an integer when calling `{method_name}`")
        if (
            self.api_client.client_side_validation
            and "notification_group" in kwargs
            and kwargs["notification_group"] is not None
        ):
            if not isinstance(kwargs["notification_group"], str):
                raise ApiValueError(f"Parameter `notification_group` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name
        path_params["version"] = version

        if "timeout" in kwargs and kwargs["timeout"] is not None:
            query_params.append(("timeout", kwargs["timeout"]))
        if "notification_group" in kwargs and kwargs["notification_group"] is not None:
            query_params.append(("notification_group", kwargs["notification_group"]))

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        if isinstance(body_params, str):
            header_params["Content-Type"] = self.api_client.select_header_content_type(["text/plain"])
        else:
            header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/versions/{version}/requests/batch"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[PipelineRequestBatchCreateResponse]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_requests_batch_delete_with_http_info(self, project_name, pipeline_name, data, **kwargs):
        """
        Delete multiple pipeline requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_requests_batch_delete_with_http_info(
                project_name, pipeline_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_requests_batch_delete"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(data, list):
                raise ApiValueError(f"Parameter `data` must be a list when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/requests/delete"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="object",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_requests_batch_get_with_http_info(self, project_name, pipeline_name, data, **kwargs):
        """
        Retrieve multiple pipeline requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_requests_batch_get_with_http_info(
                project_name, pipeline_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_requests_batch_get"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(data, list):
                raise ApiValueError(f"Parameter `data` must be a list when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/requests/collect"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[PipelineRequestDetail]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_requests_create_with_http_info(self, project_name, pipeline_name, data, **kwargs):
        """
        Create a pipeline request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_requests_create_with_http_info(
                project_name, pipeline_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param object data: (required)
        :param kwargs:
            - int pipeline_timeout:
            - int deployment_timeout:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineRequestCreateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_requests_create"
        optional_params = ["pipeline_timeout", "deployment_timeout"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if (
            self.api_client.client_side_validation
            and "pipeline_timeout" in kwargs
            and kwargs["pipeline_timeout"] is not None
        ):
            if not isinstance(kwargs["pipeline_timeout"], int):
                raise ApiValueError(f"Parameter `pipeline_timeout` must be an integer when calling `{method_name}`")
        if (
            self.api_client.client_side_validation
            and "deployment_timeout" in kwargs
            and kwargs["deployment_timeout"] is not None
        ):
            if not isinstance(kwargs["deployment_timeout"], int):
                raise ApiValueError(f"Parameter `deployment_timeout` must be an integer when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name

        if "pipeline_timeout" in kwargs and kwargs["pipeline_timeout"] is not None:
            query_params.append(("pipeline_timeout", kwargs["pipeline_timeout"]))
        if "deployment_timeout" in kwargs and kwargs["deployment_timeout"] is not None:
            query_params.append(("deployment_timeout", kwargs["deployment_timeout"]))

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        if isinstance(body_params, str):
            header_params["Content-Type"] = self.api_client.select_header_content_type(["text/plain"])
        else:
            header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/requests"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="PipelineRequestCreateResponse",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_requests_delete_with_http_info(self, project_name, pipeline_name, request_id, **kwargs):
        """
        Delete a pipeline request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_requests_delete_with_http_info(
                project_name, pipeline_name, request_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str request_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_requests_delete"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and request_id is None:
            raise ApiValueError(f"Missing the required parameter `request_id` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(request_id, str):
                raise ApiValueError(f"Parameter `request_id` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name
        path_params["request_id"] = request_id

        url = "/projects/{project_name}/pipelines/{pipeline_name}/requests/{request_id}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type=None,
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_requests_get_with_http_info(self, project_name, pipeline_name, request_id, **kwargs):
        """
        Get a pipeline request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_requests_get_with_http_info(
                project_name, pipeline_name, request_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str request_id: (required)
        :param kwargs:
            - bool metadata_only:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineRequestSingleDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_requests_get"
        optional_params = ["metadata_only"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and request_id is None:
            raise ApiValueError(f"Missing the required parameter `request_id` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(request_id, str):
                raise ApiValueError(f"Parameter `request_id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "metadata_only" in kwargs and kwargs["metadata_only"] is not None:
            if not isinstance(kwargs["metadata_only"], bool):
                raise ApiValueError(f"Parameter `metadata_only` must be a boolean when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name
        path_params["request_id"] = request_id

        if "metadata_only" in kwargs and kwargs["metadata_only"] is not None:
            query_params.append(("metadata_only", kwargs["metadata_only"]))

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/requests/{request_id}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="PipelineRequestSingleDetail",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_requests_list_with_http_info(self, project_name, pipeline_name, **kwargs):
        """
        List pipeline requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_requests_list_with_http_info(
                project_name, pipeline_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param kwargs:
            - str status:
            - bool success:
            - int limit:
            - int offset:
            - str sort:
            - str request_schedule:
            - str start_date:
            - str end_date:
            - str search_id:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_requests_list"
        optional_params = [
            "status",
            "success",
            "limit",
            "offset",
            "sort",
            "request_schedule",
            "start_date",
            "end_date",
            "search_id",
        ]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "status" in kwargs and kwargs["status"] is not None:
            if not isinstance(kwargs["status"], str):
                raise ApiValueError(f"Parameter `status` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "success" in kwargs and kwargs["success"] is not None:
            if not isinstance(kwargs["success"], bool):
                raise ApiValueError(f"Parameter `success` must be a boolean when calling `{method_name}`")
        if self.api_client.client_side_validation and "limit" in kwargs and kwargs["limit"] is not None:
            if not isinstance(kwargs["limit"], int):
                raise ApiValueError(f"Parameter `limit` must be an integer when calling `{method_name}`")
        if self.api_client.client_side_validation and "offset" in kwargs and kwargs["offset"] is not None:
            if not isinstance(kwargs["offset"], int):
                raise ApiValueError(f"Parameter `offset` must be an integer when calling `{method_name}`")
        if self.api_client.client_side_validation and "sort" in kwargs and kwargs["sort"] is not None:
            if not isinstance(kwargs["sort"], str):
                raise ApiValueError(f"Parameter `sort` must be a string when calling `{method_name}`")
        if (
            self.api_client.client_side_validation
            and "request_schedule" in kwargs
            and kwargs["request_schedule"] is not None
        ):
            if not isinstance(kwargs["request_schedule"], str):
                raise ApiValueError(f"Parameter `request_schedule` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "start_date" in kwargs and kwargs["start_date"] is not None:
            if not isinstance(kwargs["start_date"], str):
                raise ApiValueError(f"Parameter `start_date` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "end_date" in kwargs and kwargs["end_date"] is not None:
            if not isinstance(kwargs["end_date"], str):
                raise ApiValueError(f"Parameter `end_date` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "search_id" in kwargs and kwargs["search_id"] is not None:
            if not isinstance(kwargs["search_id"], str):
                raise ApiValueError(f"Parameter `search_id` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name

        if "status" in kwargs and kwargs["status"] is not None:
            query_params.append(("status", kwargs["status"]))
        if "success" in kwargs and kwargs["success"] is not None:
            query_params.append(("success", kwargs["success"]))
        if "limit" in kwargs and kwargs["limit"] is not None:
            query_params.append(("limit", kwargs["limit"]))
        if "offset" in kwargs and kwargs["offset"] is not None:
            query_params.append(("offset", kwargs["offset"]))
        if "sort" in kwargs and kwargs["sort"] is not None:
            query_params.append(("sort", kwargs["sort"]))
        if "request_schedule" in kwargs and kwargs["request_schedule"] is not None:
            query_params.append(("request_schedule", kwargs["request_schedule"]))
        if "start_date" in kwargs and kwargs["start_date"] is not None:
            query_params.append(("start_date", kwargs["start_date"]))
        if "end_date" in kwargs and kwargs["end_date"] is not None:
            query_params.append(("end_date", kwargs["end_date"]))
        if "search_id" in kwargs and kwargs["search_id"] is not None:
            query_params.append(("search_id", kwargs["search_id"]))

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/requests"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[PipelineRequestList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_version_object_requests_get_with_http_info(
        self, project_name, pipeline_name, request_id, version, **kwargs
    ):
        """
        Get an operator request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_version_object_requests_get_with_http_info(
                project_name, pipeline_name, request_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str request_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool metadata_only:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(OperatorRequestDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_version_object_requests_get"
        optional_params = ["metadata_only"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and request_id is None:
            raise ApiValueError(f"Missing the required parameter `request_id` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(request_id, str):
                raise ApiValueError(f"Parameter `request_id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "metadata_only" in kwargs and kwargs["metadata_only"] is not None:
            if not isinstance(kwargs["metadata_only"], bool):
                raise ApiValueError(f"Parameter `metadata_only` must be a boolean when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name
        path_params["request_id"] = request_id
        path_params["version"] = version

        if "metadata_only" in kwargs and kwargs["metadata_only"] is not None:
            query_params.append(("metadata_only", kwargs["metadata_only"]))

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/versions/{version}/object-requests/{request_id}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="OperatorRequestDetail",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_version_requests_batch_delete_with_http_info(
        self, project_name, pipeline_name, version, data, **kwargs
    ):
        """
        Delete multiple pipeline version requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_version_requests_batch_delete_with_http_info(
                project_name, pipeline_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_version_requests_batch_delete"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(data, list):
                raise ApiValueError(f"Parameter `data` must be a list when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name
        path_params["version"] = version

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/versions/{version}/requests/delete"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="object",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_version_requests_batch_get_with_http_info(self, project_name, pipeline_name, version, data, **kwargs):
        """
        Retrieve multiple pipeline version requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_version_requests_batch_get_with_http_info(
                project_name, pipeline_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_version_requests_batch_get"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(data, list):
                raise ApiValueError(f"Parameter `data` must be a list when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name
        path_params["version"] = version

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/versions/{version}/requests/collect"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[PipelineRequestDetail]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_version_requests_create_with_http_info(self, project_name, pipeline_name, version, data, **kwargs):
        """
        Create a pipeline version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_version_requests_create_with_http_info(
                project_name, pipeline_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param object data: (required)
        :param kwargs:
            - int pipeline_timeout:
            - int deployment_timeout:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineRequestCreateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_version_requests_create"
        optional_params = ["pipeline_timeout", "deployment_timeout"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if (
            self.api_client.client_side_validation
            and "pipeline_timeout" in kwargs
            and kwargs["pipeline_timeout"] is not None
        ):
            if not isinstance(kwargs["pipeline_timeout"], int):
                raise ApiValueError(f"Parameter `pipeline_timeout` must be an integer when calling `{method_name}`")
        if (
            self.api_client.client_side_validation
            and "deployment_timeout" in kwargs
            and kwargs["deployment_timeout"] is not None
        ):
            if not isinstance(kwargs["deployment_timeout"], int):
                raise ApiValueError(f"Parameter `deployment_timeout` must be an integer when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name
        path_params["version"] = version

        if "pipeline_timeout" in kwargs and kwargs["pipeline_timeout"] is not None:
            query_params.append(("pipeline_timeout", kwargs["pipeline_timeout"]))
        if "deployment_timeout" in kwargs and kwargs["deployment_timeout"] is not None:
            query_params.append(("deployment_timeout", kwargs["deployment_timeout"]))

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        if isinstance(body_params, str):
            header_params["Content-Type"] = self.api_client.select_header_content_type(["text/plain"])
        else:
            header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/versions/{version}/requests"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="PipelineRequestCreateResponse",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_version_requests_delete_with_http_info(
        self, project_name, pipeline_name, request_id, version, **kwargs
    ):
        """
        Delete a pipeline version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_version_requests_delete_with_http_info(
                project_name, pipeline_name, request_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str request_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_version_requests_delete"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and request_id is None:
            raise ApiValueError(f"Missing the required parameter `request_id` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(request_id, str):
                raise ApiValueError(f"Parameter `request_id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name
        path_params["request_id"] = request_id
        path_params["version"] = version

        url = (
            "/projects/{project_name}/pipelines/{pipeline_name}/versions/{version}/requests/{request_id}"  # noqa: E501
        )
        return self.api_client.call_api(
            url,
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type=None,
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_version_requests_get_with_http_info(self, project_name, pipeline_name, request_id, version, **kwargs):
        """
        Get a pipeline version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_version_requests_get_with_http_info(
                project_name, pipeline_name, request_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str request_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool metadata_only:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineRequestSingleDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_version_requests_get"
        optional_params = ["metadata_only"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and request_id is None:
            raise ApiValueError(f"Missing the required parameter `request_id` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(request_id, str):
                raise ApiValueError(f"Parameter `request_id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "metadata_only" in kwargs and kwargs["metadata_only"] is not None:
            if not isinstance(kwargs["metadata_only"], bool):
                raise ApiValueError(f"Parameter `metadata_only` must be a boolean when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name
        path_params["request_id"] = request_id
        path_params["version"] = version

        if "metadata_only" in kwargs and kwargs["metadata_only"] is not None:
            query_params.append(("metadata_only", kwargs["metadata_only"]))

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = (
            "/projects/{project_name}/pipelines/{pipeline_name}/versions/{version}/requests/{request_id}"  # noqa: E501
        )
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="PipelineRequestSingleDetail",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def pipeline_version_requests_list_with_http_info(self, project_name, pipeline_name, version, **kwargs):
        """
        List pipeline version requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = PipelineRequests.pipeline_version_requests_list_with_http_info(
                project_name, pipeline_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param kwargs:
            - str status:
            - bool success:
            - int limit:
            - int offset:
            - str sort:
            - str request_schedule:
            - str start_date:
            - str end_date:
            - str search_id:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "pipeline_version_requests_list"
        optional_params = [
            "status",
            "success",
            "limit",
            "offset",
            "sort",
            "request_schedule",
            "start_date",
            "end_date",
            "search_id",
        ]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and pipeline_name is None:
            raise ApiValueError(f"Missing the required parameter `pipeline_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(pipeline_name, str):
                raise ApiValueError(f"Parameter `pipeline_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "status" in kwargs and kwargs["status"] is not None:
            if not isinstance(kwargs["status"], str):
                raise ApiValueError(f"Parameter `status` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "success" in kwargs and kwargs["success"] is not None:
            if not isinstance(kwargs["success"], bool):
                raise ApiValueError(f"Parameter `success` must be a boolean when calling `{method_name}`")
        if self.api_client.client_side_validation and "limit" in kwargs and kwargs["limit"] is not None:
            if not isinstance(kwargs["limit"], int):
                raise ApiValueError(f"Parameter `limit` must be an integer when calling `{method_name}`")
        if self.api_client.client_side_validation and "offset" in kwargs and kwargs["offset"] is not None:
            if not isinstance(kwargs["offset"], int):
                raise ApiValueError(f"Parameter `offset` must be an integer when calling `{method_name}`")
        if self.api_client.client_side_validation and "sort" in kwargs and kwargs["sort"] is not None:
            if not isinstance(kwargs["sort"], str):
                raise ApiValueError(f"Parameter `sort` must be a string when calling `{method_name}`")
        if (
            self.api_client.client_side_validation
            and "request_schedule" in kwargs
            and kwargs["request_schedule"] is not None
        ):
            if not isinstance(kwargs["request_schedule"], str):
                raise ApiValueError(f"Parameter `request_schedule` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "start_date" in kwargs and kwargs["start_date"] is not None:
            if not isinstance(kwargs["start_date"], str):
                raise ApiValueError(f"Parameter `start_date` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "end_date" in kwargs and kwargs["end_date"] is not None:
            if not isinstance(kwargs["end_date"], str):
                raise ApiValueError(f"Parameter `end_date` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "search_id" in kwargs and kwargs["search_id"] is not None:
            if not isinstance(kwargs["search_id"], str):
                raise ApiValueError(f"Parameter `search_id` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["pipeline_name"] = pipeline_name
        path_params["version"] = version

        if "status" in kwargs and kwargs["status"] is not None:
            query_params.append(("status", kwargs["status"]))
        if "success" in kwargs and kwargs["success"] is not None:
            query_params.append(("success", kwargs["success"]))
        if "limit" in kwargs and kwargs["limit"] is not None:
            query_params.append(("limit", kwargs["limit"]))
        if "offset" in kwargs and kwargs["offset"] is not None:
            query_params.append(("offset", kwargs["offset"]))
        if "sort" in kwargs and kwargs["sort"] is not None:
            query_params.append(("sort", kwargs["sort"]))
        if "request_schedule" in kwargs and kwargs["request_schedule"] is not None:
            query_params.append(("request_schedule", kwargs["request_schedule"]))
        if "start_date" in kwargs and kwargs["start_date"] is not None:
            query_params.append(("start_date", kwargs["start_date"]))
        if "end_date" in kwargs and kwargs["end_date"] is not None:
            query_params.append(("end_date", kwargs["end_date"]))
        if "search_id" in kwargs and kwargs["search_id"] is not None:
            query_params.append(("search_id", kwargs["search_id"]))

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/pipelines/{pipeline_name}/versions/{version}/requests"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[PipelineRequestList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )
