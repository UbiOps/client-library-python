# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import warnings  # noqa: F401

from ubiops.api_client import ApiClient

from ubiops.api.blobs import Blobs
from ubiops.api.deployment_requests import DeploymentRequests
from ubiops.api.deployments import Deployments
from ubiops.api.environments import Environments
from ubiops.api.files import Files
from ubiops.api.imports_and_exports import ImportsAndExports
from ubiops.api.metrics import Metrics
from ubiops.api.monitoring import Monitoring
from ubiops.api.organizations import Organizations
from ubiops.api.pipeline_requests import PipelineRequests
from ubiops.api.pipelines import Pipelines
from ubiops.api.projects import Projects
from ubiops.api.request_schedules import RequestSchedules
from ubiops.api.roles import Roles
from ubiops.api.service_users import ServiceUsers
from ubiops.api.status import Status
from ubiops.api.user import User
from ubiops.api.webhooks import Webhooks


class CoreApi(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.blobs = Blobs(api_client=api_client)
        self.deployment_requests = DeploymentRequests(api_client=api_client)
        self.deployments = Deployments(api_client=api_client)
        self.environments = Environments(api_client=api_client)
        self.files = Files(api_client=api_client)
        self.imports_and_exports = ImportsAndExports(api_client=api_client)
        self.metrics = Metrics(api_client=api_client)
        self.monitoring = Monitoring(api_client=api_client)
        self.organizations = Organizations(api_client=api_client)
        self.pipeline_requests = PipelineRequests(api_client=api_client)
        self.pipelines = Pipelines(api_client=api_client)
        self.projects = Projects(api_client=api_client)
        self.request_schedules = RequestSchedules(api_client=api_client)
        self.roles = Roles(api_client=api_client)
        self.service_users = ServiceUsers(api_client=api_client)
        self.status = Status(api_client=api_client)
        self.user = User(api_client=api_client)
        self.webhooks = Webhooks(api_client=api_client)

    def blobs_create(self, project_name, file, **kwargs):
        """
        Upload a blob

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.blobs_create(
                project_name, file, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param file file: (required)
        :param kwargs:
            - int blob_ttl:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(BlobList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        warnings.warn(
            "blobs_create is deprecated and will stop working after May 2024. Use files instead.",
            DeprecationWarning,
            stacklevel=2,
        )

        return self.blobs.blobs_create_with_http_info(project_name, file, **kwargs)

    def blobs_delete(self, project_name, blob_id, **kwargs):
        """
        Delete a blob

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.blobs_delete(
                project_name, blob_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str blob_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        warnings.warn(
            "blobs_delete is deprecated and will stop working after May 2024. Use files instead.",
            DeprecationWarning,
            stacklevel=2,
        )

        return self.blobs.blobs_delete_with_http_info(project_name, blob_id, **kwargs)

    def blobs_get(self, project_name, blob_id, **kwargs):
        """
        Get a blob

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.blobs_get(
                project_name, blob_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str blob_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if True, the file will be downloaded in a folder, which can be defined by
                api_client.configuration.temp_folder_path. Default is False.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        warnings.warn(
            "blobs_get is deprecated and will stop working after May 2024. Use files instead.",
            DeprecationWarning,
            stacklevel=2,
        )

        return self.blobs.blobs_get_with_http_info(project_name, blob_id, **kwargs)

    def blobs_list(self, project_name, **kwargs):
        """
        List blobs

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.blobs_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - int range:
            - str creation_date:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[BlobList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        warnings.warn(
            "blobs_list is deprecated and will stop working after May 2024. Use files instead.",
            DeprecationWarning,
            stacklevel=2,
        )

        return self.blobs.blobs_list_with_http_info(project_name, **kwargs)

    def blobs_update(self, project_name, blob_id, file, **kwargs):
        """
        Update a blob

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.blobs_update(
                project_name, blob_id, file, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str blob_id: (required)
        :param file file: (required)
        :param kwargs:
            - int blob_ttl:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(BlobList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        warnings.warn(
            "blobs_update is deprecated and will stop working after May 2024. Use files instead.",
            DeprecationWarning,
            stacklevel=2,
        )

        return self.blobs.blobs_update_with_http_info(project_name, blob_id, file, **kwargs)

    def batch_deployment_requests_create(self, project_name, deployment_name, data, **kwargs):
        """
        Create a batch deployment request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.batch_deployment_requests_create(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param list[object] data: (required)
        :param kwargs:
            - int timeout:
            - str notification_group:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentRequestBatchCreateResponse], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.batch_deployment_requests_create_with_http_info(
            project_name, deployment_name, data, **kwargs
        )

    def batch_deployment_version_requests_create(self, project_name, deployment_name, version, data, **kwargs):
        """
        Create a batch deployment version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.batch_deployment_version_requests_create(
                project_name, deployment_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param list[object] data: (required)
        :param kwargs:
            - int timeout:
            - str notification_group:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentRequestBatchCreateResponse], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.batch_deployment_version_requests_create_with_http_info(
            project_name, deployment_name, version, data, **kwargs
        )

    def deployment_requests_batch_delete(self, project_name, deployment_name, data, **kwargs):
        """
        Delete multiple deployment requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_requests_batch_delete(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_requests_batch_delete_with_http_info(
            project_name, deployment_name, data, **kwargs
        )

    def deployment_requests_batch_get(self, project_name, deployment_name, data, **kwargs):
        """
        Retrieve multiple deployment requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_requests_batch_get(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentRequestBatchDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_requests_batch_get_with_http_info(
            project_name, deployment_name, data, **kwargs
        )

    def deployment_requests_create(self, project_name, deployment_name, data, **kwargs):
        """
        Create a direct deployment request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_requests_create(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param object data: (required)
        :param kwargs:
            - int timeout:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentRequestCreateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_requests_create_with_http_info(
            project_name, deployment_name, data, **kwargs
        )

    def deployment_requests_delete(self, project_name, deployment_name, request_id, **kwargs):
        """
        Delete a deployment request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_requests_delete(
                project_name, deployment_name, request_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str request_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_requests_delete_with_http_info(
            project_name, deployment_name, request_id, **kwargs
        )

    def deployment_requests_get(self, project_name, deployment_name, request_id, **kwargs):
        """
        Get a deployment request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_requests_get(
                project_name, deployment_name, request_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str request_id: (required)
        :param kwargs:
            - bool metadata_only:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentRequestSingleDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_requests_get_with_http_info(
            project_name, deployment_name, request_id, **kwargs
        )

    def deployment_requests_list(self, project_name, deployment_name, **kwargs):
        """
        List deployment requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_requests_list(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - str status:
            - bool success:
            - int limit:
            - int offset:
            - str sort:
            - bool pipeline:
            - str request_schedule:
            - str start_date:
            - str end_date:
            - str search_id:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentRequestList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_requests_list_with_http_info(project_name, deployment_name, **kwargs)

    def deployment_requests_update(self, project_name, deployment_name, request_id, data, **kwargs):
        """
        Update a deployment request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_requests_update(
                project_name, deployment_name, request_id, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str request_id: (required)
        :param DeploymentRequestUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentRequestUpdateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_requests_update_with_http_info(
            project_name, deployment_name, request_id, data, **kwargs
        )

    def deployment_version_requests_batch_delete(self, project_name, deployment_name, version, data, **kwargs):
        """
        Delete multiple deployment version requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_requests_batch_delete(
                project_name, deployment_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_version_requests_batch_delete_with_http_info(
            project_name, deployment_name, version, data, **kwargs
        )

    def deployment_version_requests_batch_get(self, project_name, deployment_name, version, data, **kwargs):
        """
        Retrieve multiple deployment version requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_requests_batch_get(
                project_name, deployment_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentRequestBatchDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_version_requests_batch_get_with_http_info(
            project_name, deployment_name, version, data, **kwargs
        )

    def deployment_version_requests_create(self, project_name, deployment_name, version, data, **kwargs):
        """
        Create a direct deployment version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_requests_create(
                project_name, deployment_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param object data: (required)
        :param kwargs:
            - int timeout:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentRequestCreateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_version_requests_create_with_http_info(
            project_name, deployment_name, version, data, **kwargs
        )

    def deployment_version_requests_delete(self, project_name, deployment_name, request_id, version, **kwargs):
        """
        Delete a deployment version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_requests_delete(
                project_name, deployment_name, request_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str request_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_version_requests_delete_with_http_info(
            project_name, deployment_name, request_id, version, **kwargs
        )

    def deployment_version_requests_get(self, project_name, deployment_name, request_id, version, **kwargs):
        """
        Get a deployment version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_requests_get(
                project_name, deployment_name, request_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str request_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool metadata_only:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentRequestSingleDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_version_requests_get_with_http_info(
            project_name, deployment_name, request_id, version, **kwargs
        )

    def deployment_version_requests_list(self, project_name, deployment_name, version, **kwargs):
        """
        List deployment version requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_requests_list(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - str status:
            - bool success:
            - int limit:
            - int offset:
            - str sort:
            - bool pipeline:
            - str request_schedule:
            - str start_date:
            - str end_date:
            - str search_id:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentRequestList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_version_requests_list_with_http_info(
            project_name, deployment_name, version, **kwargs
        )

    def deployment_version_requests_update(self, project_name, deployment_name, request_id, version, data, **kwargs):
        """
        Update a deployment version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_requests_update(
                project_name, deployment_name, request_id, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str request_id: (required)
        :param str version: (required)
        :param DeploymentRequestUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentRequestUpdateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployment_requests.deployment_version_requests_update_with_http_info(
            project_name, deployment_name, request_id, version, data, **kwargs
        )

    def builds_get(self, project_name, build_id, deployment_name, version, **kwargs):
        """
        Get build

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.builds_get(
                project_name, build_id, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str build_id: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(BuildList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        warnings.warn(
            "builds_get is deprecated and will stop working after May 2024. Use environments instead.",
            DeprecationWarning,
            stacklevel=2,
        )

        return self.deployments.builds_get_with_http_info(project_name, build_id, deployment_name, version, **kwargs)

    def deployment_audit_events_list(self, project_name, deployment_name, **kwargs):
        """
        List audit events for a deployment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_audit_events_list(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - str action:
            - int limit:
            - int offset:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[AuditList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_audit_events_list_with_http_info(project_name, deployment_name, **kwargs)

    def deployment_environment_variables_copy(self, project_name, deployment_name, data, **kwargs):
        """
        Copy deployment environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_environment_variables_copy(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param EnvironmentVariableCopy data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[InheritedEnvironmentVariableList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_environment_variables_copy_with_http_info(
            project_name, deployment_name, data, **kwargs
        )

    def deployment_environment_variables_create(self, project_name, deployment_name, data, **kwargs):
        """
        Create deployment environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_environment_variables_create(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param EnvironmentVariableCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_environment_variables_create_with_http_info(
            project_name, deployment_name, data, **kwargs
        )

    def deployment_environment_variables_delete(self, project_name, deployment_name, id, **kwargs):
        """
        Delete deployment environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_environment_variables_delete(
                project_name, deployment_name, id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_environment_variables_delete_with_http_info(
            project_name, deployment_name, id, **kwargs
        )

    def deployment_environment_variables_get(self, project_name, deployment_name, id, **kwargs):
        """
        Get deployment environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_environment_variables_get(
                project_name, deployment_name, id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_environment_variables_get_with_http_info(
            project_name, deployment_name, id, **kwargs
        )

    def deployment_environment_variables_list(self, project_name, deployment_name, **kwargs):
        """
        List deployment environment variables

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_environment_variables_list(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[InheritedEnvironmentVariableList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_environment_variables_list_with_http_info(
            project_name, deployment_name, **kwargs
        )

    def deployment_environment_variables_update(self, project_name, deployment_name, id, data, **kwargs):
        """
        Update deployment environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_environment_variables_update(
                project_name, deployment_name, id, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param EnvironmentVariableCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_environment_variables_update_with_http_info(
            project_name, deployment_name, id, data, **kwargs
        )

    def deployment_version_environment_variables_copy(self, project_name, deployment_name, version, data, **kwargs):
        """
        Copy deployment version environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_environment_variables_copy(
                project_name, deployment_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param EnvironmentVariableCopy data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[InheritedEnvironmentVariableList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_version_environment_variables_copy_with_http_info(
            project_name, deployment_name, version, data, **kwargs
        )

    def deployment_version_environment_variables_create(self, project_name, deployment_name, version, data, **kwargs):
        """
        Create deployment version environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_environment_variables_create(
                project_name, deployment_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param EnvironmentVariableCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_version_environment_variables_create_with_http_info(
            project_name, deployment_name, version, data, **kwargs
        )

    def deployment_version_environment_variables_delete(self, project_name, deployment_name, id, version, **kwargs):
        """
        Delete deployment version environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_environment_variables_delete(
                project_name, deployment_name, id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_version_environment_variables_delete_with_http_info(
            project_name, deployment_name, id, version, **kwargs
        )

    def deployment_version_environment_variables_get(self, project_name, deployment_name, id, version, **kwargs):
        """
        Get deployment version environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_environment_variables_get(
                project_name, deployment_name, id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_version_environment_variables_get_with_http_info(
            project_name, deployment_name, id, version, **kwargs
        )

    def deployment_version_environment_variables_list(self, project_name, deployment_name, version, **kwargs):
        """
        List deployment version environment variables

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_environment_variables_list(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[InheritedEnvironmentVariableList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_version_environment_variables_list_with_http_info(
            project_name, deployment_name, version, **kwargs
        )

    def deployment_version_environment_variables_update(
        self, project_name, deployment_name, id, version, data, **kwargs
    ):
        """
        Update deployment version environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_version_environment_variables_update(
                project_name, deployment_name, id, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param str version: (required)
        :param EnvironmentVariableCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_version_environment_variables_update_with_http_info(
            project_name, deployment_name, id, version, data, **kwargs
        )

    def deployment_versions_create(self, project_name, deployment_name, data, **kwargs):
        """
        Create deployment versions

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_versions_create(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param DeploymentVersionCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentVersionList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_versions_create_with_http_info(project_name, deployment_name, data, **kwargs)

    def deployment_versions_delete(self, project_name, deployment_name, version, **kwargs):
        """
        Delete deployment version

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_versions_delete(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_versions_delete_with_http_info(
            project_name, deployment_name, version, **kwargs
        )

    def deployment_versions_get(self, project_name, deployment_name, version, **kwargs):
        """
        Get deployment version

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_versions_get(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentVersionDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_versions_get_with_http_info(project_name, deployment_name, version, **kwargs)

    def deployment_versions_list(self, project_name, deployment_name, **kwargs):
        """
        List deployment versions

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_versions_list(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - str labels:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentVersionList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_versions_list_with_http_info(project_name, deployment_name, **kwargs)

    def deployment_versions_update(self, project_name, deployment_name, version, data, **kwargs):
        """
        Update deployment version

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployment_versions_update(
                project_name, deployment_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param DeploymentVersionUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentVersionDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployment_versions_update_with_http_info(
            project_name, deployment_name, version, data, **kwargs
        )

    def deployments_create(self, project_name, data, **kwargs):
        """
        Create deployments

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployments_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param DeploymentCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentCreateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployments_create_with_http_info(project_name, data, **kwargs)

    def deployments_delete(self, project_name, deployment_name, **kwargs):
        """
        Delete a deployment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployments_delete(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployments_delete_with_http_info(project_name, deployment_name, **kwargs)

    def deployments_get(self, project_name, deployment_name, **kwargs):
        """
        Get details of a deployment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployments_get(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployments_get_with_http_info(project_name, deployment_name, **kwargs)

    def deployments_list(self, project_name, **kwargs):
        """
        List deployments

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployments_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str labels:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployments_list_with_http_info(project_name, **kwargs)

    def deployments_update(self, project_name, deployment_name, data, **kwargs):
        """
        Update a deployment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.deployments_update(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param DeploymentUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.deployments_update_with_http_info(project_name, deployment_name, data, **kwargs)

    def revisions_file_download(self, project_name, deployment_name, revision_id, version, **kwargs):
        """
        Download deployment file

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.revisions_file_download(
                project_name, deployment_name, revision_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str revision_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if True, the file will be downloaded in a folder, which can be defined by
                api_client.configuration.temp_folder_path. Default is False.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.revisions_file_download_with_http_info(
            project_name, deployment_name, revision_id, version, **kwargs
        )

    def revisions_file_upload(self, project_name, deployment_name, version, **kwargs):
        """
        Upload deployment file

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.revisions_file_upload(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - file file:
            - str source_deployment:
            - str source_version:
            - str template_deployment_id:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RevisionCreate, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.revisions_file_upload_with_http_info(project_name, deployment_name, version, **kwargs)

    def revisions_get(self, project_name, deployment_name, revision_id, version, **kwargs):
        """
        Get revision

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.revisions_get(
                project_name, deployment_name, revision_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str revision_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RevisionList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.revisions_get_with_http_info(
            project_name, deployment_name, revision_id, version, **kwargs
        )

    def revisions_list(self, project_name, deployment_name, version, **kwargs):
        """
        List revisions

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.revisions_list(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[RevisionList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.revisions_list_with_http_info(project_name, deployment_name, version, **kwargs)

    def revisions_rebuild(self, project_name, deployment_name, revision_id, version, data, **kwargs):
        """
        Rebuild revision

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.revisions_rebuild(
                project_name, deployment_name, revision_id, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str revision_id: (required)
        :param str version: (required)
        :param object data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RevisionList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.revisions_rebuild_with_http_info(
            project_name, deployment_name, revision_id, version, data, **kwargs
        )

    def template_deployments_list(self, **kwargs):
        """
        List template deployments

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.template_deployments_list(
                async_req=True
            )
        >>> result = thread.get()

        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[TemplateDeploymentList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.deployments.template_deployments_list_with_http_info(**kwargs)

    def environment_build_dependencies_list(self, project_name, build_id, environment_name, revision_id, **kwargs):
        """
        List dependency files

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environment_build_dependencies_list(
                project_name, build_id, environment_name, revision_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str build_id: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[EnvironmentBuildDependency], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environment_build_dependencies_list_with_http_info(
            project_name, build_id, environment_name, revision_id, **kwargs
        )

    def environment_builds_get(self, project_name, build_id, environment_name, revision_id, **kwargs):
        """
        Get build

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environment_builds_get(
                project_name, build_id, environment_name, revision_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str build_id: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentBuildList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environment_builds_get_with_http_info(
            project_name, build_id, environment_name, revision_id, **kwargs
        )

    def environment_builds_list(self, project_name, environment_name, revision_id, **kwargs):
        """
        List builds

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environment_builds_list(
                project_name, environment_name, revision_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[EnvironmentBuildList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environment_builds_list_with_http_info(
            project_name, environment_name, revision_id, **kwargs
        )

    def environment_builds_update(self, project_name, build_id, environment_name, revision_id, data, **kwargs):
        """
        Update build

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environment_builds_update(
                project_name, build_id, environment_name, revision_id, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str build_id: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param EnvironmentBuildUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentBuildList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environment_builds_update_with_http_info(
            project_name, build_id, environment_name, revision_id, data, **kwargs
        )

    def environment_revisions_file_download(self, project_name, environment_name, revision_id, **kwargs):
        """
        Download environment file

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environment_revisions_file_download(
                project_name, environment_name, revision_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if True, the file will be downloaded in a folder, which can be defined by
                api_client.configuration.temp_folder_path. Default is False.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environment_revisions_file_download_with_http_info(
            project_name, environment_name, revision_id, **kwargs
        )

    def environment_revisions_file_upload(self, project_name, environment_name, **kwargs):
        """
        Upload environment file

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environment_revisions_file_upload(
                project_name, environment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str environment_name: (required)
        :param kwargs:
            - file file:
            - str source_environment:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentRevisionCreate, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environment_revisions_file_upload_with_http_info(
            project_name, environment_name, **kwargs
        )

    def environment_revisions_get(self, project_name, environment_name, revision_id, **kwargs):
        """
        Get revision

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environment_revisions_get(
                project_name, environment_name, revision_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentRevisionDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environment_revisions_get_with_http_info(
            project_name, environment_name, revision_id, **kwargs
        )

    def environment_revisions_list(self, project_name, environment_name, **kwargs):
        """
        List revisions

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environment_revisions_list(
                project_name, environment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str environment_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[EnvironmentRevisionDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environment_revisions_list_with_http_info(project_name, environment_name, **kwargs)

    def environment_revisions_rebuild(self, project_name, environment_name, revision_id, **kwargs):
        """
        Rebuild revision

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environment_revisions_rebuild(
                project_name, environment_name, revision_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param kwargs:
            - object data:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentBuildList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environment_revisions_rebuild_with_http_info(
            project_name, environment_name, revision_id, **kwargs
        )

    def environments_create(self, project_name, data, **kwargs):
        """
        Create environments

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environments_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param EnvironmentCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environments_create_with_http_info(project_name, data, **kwargs)

    def environments_delete(self, project_name, environment_name, **kwargs):
        """
        Delete environment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environments_delete(
                project_name, environment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str environment_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environments_delete_with_http_info(project_name, environment_name, **kwargs)

    def environments_get(self, project_name, environment_name, **kwargs):
        """
        Get environment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environments_get(
                project_name, environment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str environment_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environments_get_with_http_info(project_name, environment_name, **kwargs)

    def environments_list(self, project_name, **kwargs):
        """
        List environments

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environments_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str labels:
            - str environment_type:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[EnvironmentList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environments_list_with_http_info(project_name, **kwargs)

    def environments_update(self, project_name, environment_name, data, **kwargs):
        """
        Update environment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environments_update(
                project_name, environment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str environment_name: (required)
        :param EnvironmentUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environments_update_with_http_info(project_name, environment_name, data, **kwargs)

    def environments_usage(self, project_name, environment_name, **kwargs):
        """
        List usage of environment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.environments_usage(
                project_name, environment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str environment_name: (required)
        :param kwargs:
            - str environment_type:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[EnvironmentUsage], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.environments.environments_usage_with_http_info(project_name, environment_name, **kwargs)

    def buckets_create(self, project_name, data, **kwargs):
        """
        Create bucket

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.buckets_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param BucketCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(BucketList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.files.buckets_create_with_http_info(project_name, data, **kwargs)

    def buckets_delete(self, project_name, bucket_name, **kwargs):
        """
        Delete a bucket

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.buckets_delete(
                project_name, bucket_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str bucket_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.files.buckets_delete_with_http_info(project_name, bucket_name, **kwargs)

    def buckets_get(self, project_name, bucket_name, **kwargs):
        """
        Get details of a bucket

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.buckets_get(
                project_name, bucket_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str bucket_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(BucketDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.files.buckets_get_with_http_info(project_name, bucket_name, **kwargs)

    def buckets_list(self, project_name, **kwargs):
        """
        List buckets

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.buckets_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str labels:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[BucketList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.files.buckets_list_with_http_info(project_name, **kwargs)

    def buckets_update(self, project_name, bucket_name, data, **kwargs):
        """
        Update a bucket

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.buckets_update(
                project_name, bucket_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str bucket_name: (required)
        :param BucketUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(BucketDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.files.buckets_update_with_http_info(project_name, bucket_name, data, **kwargs)

    def files_delete(self, project_name, bucket_name, file, **kwargs):
        """
        Delete a file

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.files_delete(
                project_name, bucket_name, file, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str bucket_name: (required)
        :param str file: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.files.files_delete_with_http_info(project_name, bucket_name, file, **kwargs)

    def files_download(self, project_name, bucket_name, file, **kwargs):
        """
        Download a file

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.files_download(
                project_name, bucket_name, file, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str bucket_name: (required)
        :param str file: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(FileUploadResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.files.files_download_with_http_info(project_name, bucket_name, file, **kwargs)

    def files_get(self, project_name, bucket_name, file, **kwargs):
        """
        Get a file

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.files_get(
                project_name, bucket_name, file, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str bucket_name: (required)
        :param str file: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(FileItem, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.files.files_get_with_http_info(project_name, bucket_name, file, **kwargs)

    def files_list(self, project_name, bucket_name, **kwargs):
        """
        List files

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.files_list(
                project_name, bucket_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str bucket_name: (required)
        :param kwargs:
            - str prefix:
            - str delimiter:
            - str continuation_token:
            - int limit:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(FileDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.files.files_list_with_http_info(project_name, bucket_name, **kwargs)

    def files_upload(self, project_name, bucket_name, file, **kwargs):
        """
        Upload a file

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.files_upload(
                project_name, bucket_name, file, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str bucket_name: (required)
        :param str file: (required)
        :param kwargs:
            - object data:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(FileUploadResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.files.files_upload_with_http_info(project_name, bucket_name, file, **kwargs)

    def exports_create(self, project_name, data, **kwargs):
        """
        Create an export

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.exports_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param ExportCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ExportList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.exports_create_with_http_info(project_name, data, **kwargs)

    def exports_delete(self, project_name, export_id, **kwargs):
        """
        Delete an export

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.exports_delete(
                project_name, export_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str export_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.exports_delete_with_http_info(project_name, export_id, **kwargs)

    def exports_download(self, project_name, export_id, **kwargs):
        """
        Download an export

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.exports_download(
                project_name, export_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str export_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if True, the file will be downloaded in a folder, which can be defined by
                api_client.configuration.temp_folder_path. Default is False.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.exports_download_with_http_info(project_name, export_id, **kwargs)

    def exports_get(self, project_name, export_id, **kwargs):
        """
        Get an export

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.exports_get(
                project_name, export_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str export_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ExportDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.exports_get_with_http_info(project_name, export_id, **kwargs)

    def exports_list(self, project_name, **kwargs):
        """
        List exports

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.exports_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str status:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[ExportList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.exports_list_with_http_info(project_name, **kwargs)

    def imports_create(self, project_name, **kwargs):
        """
        Create an import

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.imports_create(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - file file:
            - str import_link:
            - str export_id:
            - bool skip_confirmation:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ImportList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.imports_create_with_http_info(project_name, **kwargs)

    def imports_delete(self, project_name, import_id, **kwargs):
        """
        Delete an import

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.imports_delete(
                project_name, import_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str import_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.imports_delete_with_http_info(project_name, import_id, **kwargs)

    def imports_download(self, project_name, import_id, **kwargs):
        """
        Download an import

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.imports_download(
                project_name, import_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str import_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if True, the file will be downloaded in a folder, which can be defined by
                api_client.configuration.temp_folder_path. Default is False.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.imports_download_with_http_info(project_name, import_id, **kwargs)

    def imports_get(self, project_name, import_id, **kwargs):
        """
        Get an import

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.imports_get(
                project_name, import_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str import_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ImportDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.imports_get_with_http_info(project_name, import_id, **kwargs)

    def imports_list(self, project_name, **kwargs):
        """
        List imports

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.imports_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str status:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[ImportList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.imports_list_with_http_info(project_name, **kwargs)

    def imports_update(self, project_name, import_id, data, **kwargs):
        """
        Confirm an import

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.imports_update(
                project_name, import_id, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str import_id: (required)
        :param ImportUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ImportDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.imports_and_exports.imports_update_with_http_info(project_name, import_id, data, **kwargs)

    def metrics_create(self, project_name, data, **kwargs):
        """
        Create metrics

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.metrics_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param MetricCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(MetricDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.metrics.metrics_create_with_http_info(project_name, data, **kwargs)

    def metrics_delete(self, project_name, metric_name, **kwargs):
        """
        Delete metric

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.metrics_delete(
                project_name, metric_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str metric_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.metrics.metrics_delete_with_http_info(project_name, metric_name, **kwargs)

    def metrics_get(self, project_name, metric_name, **kwargs):
        """
        Get metric

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.metrics_get(
                project_name, metric_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str metric_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(MetricDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.metrics.metrics_get_with_http_info(project_name, metric_name, **kwargs)

    def metrics_list(self, project_name, **kwargs):
        """
        List metrics

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.metrics_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - bool custom:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[MetricDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.metrics.metrics_list_with_http_info(project_name, **kwargs)

    def metrics_update(self, project_name, metric_name, data, **kwargs):
        """
        Update metric

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.metrics_update(
                project_name, metric_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str metric_name: (required)
        :param MetricUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(MetricDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.metrics.metrics_update_with_http_info(project_name, metric_name, data, **kwargs)

    def time_series_data_aggregate(self, project_name, data, **kwargs):
        """
        Aggregate metric data

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.time_series_data_aggregate(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param TimeSeriesDataCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.metrics.time_series_data_aggregate_with_http_info(project_name, data, **kwargs)

    def time_series_data_create(self, project_name, data, **kwargs):
        """
        Create metric data

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.time_series_data_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param TimeSeriesDataCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.metrics.time_series_data_create_with_http_info(project_name, data, **kwargs)

    def time_series_data_list(self, project_name, **kwargs):
        """
        List time series data

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.time_series_data_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str metric:
            - str start_date:
            - str end_date:
            - int aggregation_period:
            - str labels:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(TimeSeriesDataList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.metrics.time_series_data_list_with_http_info(project_name, **kwargs)

    def time_series_delete(self, project_name, time_series_id, **kwargs):
        """
        Delete time series

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.time_series_delete(
                project_name, time_series_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str time_series_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.metrics.time_series_delete_with_http_info(project_name, time_series_id, **kwargs)

    def time_series_search(self, project_name, **kwargs):
        """
        Search time series

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.time_series_search(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str metric:
            - str labels:
            - bool custom:
            - bool exact_match:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[TimeSeriesSearch], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.metrics.time_series_search_with_http_info(project_name, **kwargs)

    def notification_groups_create(self, project_name, data, **kwargs):
        """
        Create notification groups

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.notification_groups_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param NotificationGroupCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(NotificationGroupList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.monitoring.notification_groups_create_with_http_info(project_name, data, **kwargs)

    def notification_groups_delete(self, project_name, notification_group_name, **kwargs):
        """
        Delete notification group

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.notification_groups_delete(
                project_name, notification_group_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str notification_group_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.monitoring.notification_groups_delete_with_http_info(
            project_name, notification_group_name, **kwargs
        )

    def notification_groups_get(self, project_name, notification_group_name, **kwargs):
        """
        Get notification group

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.notification_groups_get(
                project_name, notification_group_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str notification_group_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(NotificationGroupList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.monitoring.notification_groups_get_with_http_info(project_name, notification_group_name, **kwargs)

    def notification_groups_list(self, project_name, **kwargs):
        """
        List notification groups

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.notification_groups_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[NotificationGroupList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.monitoring.notification_groups_list_with_http_info(project_name, **kwargs)

    def notification_groups_update(self, project_name, notification_group_name, data, **kwargs):
        """
        Update notification group

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.notification_groups_update(
                project_name, notification_group_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str notification_group_name: (required)
        :param NotificationGroupUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(NotificationGroupList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.monitoring.notification_groups_update_with_http_info(
            project_name, notification_group_name, data, **kwargs
        )

    def organization_users_create(self, organization_name, data, **kwargs):
        """
        Add a user to an organization

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organization_users_create(
                organization_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str organization_name: (required)
        :param OrganizationUserCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(OrganizationUserDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organization_users_create_with_http_info(organization_name, data, **kwargs)

    def organization_users_delete(self, organization_name, user_id, **kwargs):
        """
        Delete a user from an organization

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organization_users_delete(
                organization_name, user_id, async_req=True
            )
        >>> result = thread.get()

        :param str organization_name: (required)
        :param str user_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organization_users_delete_with_http_info(organization_name, user_id, **kwargs)

    def organization_users_get(self, organization_name, user_id, **kwargs):
        """
        Get details of a user in an organization

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organization_users_get(
                organization_name, user_id, async_req=True
            )
        >>> result = thread.get()

        :param str organization_name: (required)
        :param str user_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(OrganizationUserDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organization_users_get_with_http_info(organization_name, user_id, **kwargs)

    def organization_users_list(self, organization_name, **kwargs):
        """
        List the users in an organization

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organization_users_list(
                organization_name, async_req=True
            )
        >>> result = thread.get()

        :param str organization_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[OrganizationUserDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organization_users_list_with_http_info(organization_name, **kwargs)

    def organization_users_update(self, organization_name, user_id, data, **kwargs):
        """
        Update details of a user in an organization

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organization_users_update(
                organization_name, user_id, data, async_req=True
            )
        >>> result = thread.get()

        :param str organization_name: (required)
        :param str user_id: (required)
        :param OrganizationUserUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(OrganizationUserDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organization_users_update_with_http_info(organization_name, user_id, data, **kwargs)

    def organizations_create(self, data, **kwargs):
        """
        Create organizations

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organizations_create(
                data, async_req=True
            )
        >>> result = thread.get()

        :param OrganizationCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(OrganizationList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organizations_create_with_http_info(data, **kwargs)

    def organizations_get(self, organization_name, **kwargs):
        """
        Get details of an organization

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organizations_get(
                organization_name, async_req=True
            )
        >>> result = thread.get()

        :param str organization_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(OrganizationDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organizations_get_with_http_info(organization_name, **kwargs)

    def organizations_list(self, **kwargs):
        """
        List organizations

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organizations_list(
                async_req=True
            )
        >>> result = thread.get()

        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[OrganizationList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organizations_list_with_http_info(**kwargs)

    def organizations_resource_usage(self, organization_name, **kwargs):
        """
        Get resource usage

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organizations_resource_usage(
                organization_name, async_req=True
            )
        >>> result = thread.get()

        :param str organization_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ResourceUsage, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organizations_resource_usage_with_http_info(organization_name, **kwargs)

    def organizations_update(self, organization_name, data, **kwargs):
        """
        Update details of an organization

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organizations_update(
                organization_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str organization_name: (required)
        :param OrganizationUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(OrganizationDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organizations_update_with_http_info(organization_name, data, **kwargs)

    def organizations_usage_get(self, organization_name, **kwargs):
        """
        Get organization usage

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.organizations_usage_get(
                organization_name, async_req=True
            )
        >>> result = thread.get()

        :param str organization_name: (required)
        :param kwargs:
            - str start_date:
            - str end_date:
            - str interval:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(OrganizationUsage, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.organizations.organizations_usage_get_with_http_info(organization_name, **kwargs)

    def batch_pipeline_requests_create(self, project_name, pipeline_name, data, **kwargs):
        """
        Create a batch pipeline request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.batch_pipeline_requests_create(
                project_name, pipeline_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param list[object] data: (required)
        :param kwargs:
            - int timeout:
            - str notification_group:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestBatchCreateResponse], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.batch_pipeline_requests_create_with_http_info(
            project_name, pipeline_name, data, **kwargs
        )

    def batch_pipeline_version_requests_create(self, project_name, pipeline_name, version, data, **kwargs):
        """
        Create a batch pipeline version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.batch_pipeline_version_requests_create(
                project_name, pipeline_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param list[object] data: (required)
        :param kwargs:
            - int timeout:
            - str notification_group:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestBatchCreateResponse], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.batch_pipeline_version_requests_create_with_http_info(
            project_name, pipeline_name, version, data, **kwargs
        )

    def pipeline_requests_batch_delete(self, project_name, pipeline_name, data, **kwargs):
        """
        Delete multiple pipeline requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_requests_batch_delete(
                project_name, pipeline_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_requests_batch_delete_with_http_info(
            project_name, pipeline_name, data, **kwargs
        )

    def pipeline_requests_batch_get(self, project_name, pipeline_name, data, **kwargs):
        """
        Retrieve multiple pipeline requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_requests_batch_get(
                project_name, pipeline_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_requests_batch_get_with_http_info(
            project_name, pipeline_name, data, **kwargs
        )

    def pipeline_requests_create(self, project_name, pipeline_name, data, **kwargs):
        """
        Create a pipeline request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_requests_create(
                project_name, pipeline_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param object data: (required)
        :param kwargs:
            - int pipeline_timeout:
            - int deployment_timeout:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineRequestCreateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_requests_create_with_http_info(
            project_name, pipeline_name, data, **kwargs
        )

    def pipeline_requests_delete(self, project_name, pipeline_name, request_id, **kwargs):
        """
        Delete a pipeline request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_requests_delete(
                project_name, pipeline_name, request_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str request_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_requests_delete_with_http_info(
            project_name, pipeline_name, request_id, **kwargs
        )

    def pipeline_requests_get(self, project_name, pipeline_name, request_id, **kwargs):
        """
        Get a pipeline request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_requests_get(
                project_name, pipeline_name, request_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str request_id: (required)
        :param kwargs:
            - bool metadata_only:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineRequestSingleDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_requests_get_with_http_info(
            project_name, pipeline_name, request_id, **kwargs
        )

    def pipeline_requests_list(self, project_name, pipeline_name, **kwargs):
        """
        List pipeline requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_requests_list(
                project_name, pipeline_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param kwargs:
            - str status:
            - bool success:
            - int limit:
            - int offset:
            - str sort:
            - str request_schedule:
            - str start_date:
            - str end_date:
            - str search_id:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_requests_list_with_http_info(project_name, pipeline_name, **kwargs)

    def pipeline_version_object_requests_get(self, project_name, pipeline_name, request_id, version, **kwargs):
        """
        Get an operator request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_version_object_requests_get(
                project_name, pipeline_name, request_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str request_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool metadata_only:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(OperatorRequestDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_version_object_requests_get_with_http_info(
            project_name, pipeline_name, request_id, version, **kwargs
        )

    def pipeline_version_requests_batch_delete(self, project_name, pipeline_name, version, data, **kwargs):
        """
        Delete multiple pipeline version requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_version_requests_batch_delete(
                project_name, pipeline_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_version_requests_batch_delete_with_http_info(
            project_name, pipeline_name, version, data, **kwargs
        )

    def pipeline_version_requests_batch_get(self, project_name, pipeline_name, version, data, **kwargs):
        """
        Retrieve multiple pipeline version requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_version_requests_batch_get(
                project_name, pipeline_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param list[str] data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_version_requests_batch_get_with_http_info(
            project_name, pipeline_name, version, data, **kwargs
        )

    def pipeline_version_requests_create(self, project_name, pipeline_name, version, data, **kwargs):
        """
        Create a pipeline version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_version_requests_create(
                project_name, pipeline_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param object data: (required)
        :param kwargs:
            - int pipeline_timeout:
            - int deployment_timeout:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineRequestCreateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_version_requests_create_with_http_info(
            project_name, pipeline_name, version, data, **kwargs
        )

    def pipeline_version_requests_delete(self, project_name, pipeline_name, request_id, version, **kwargs):
        """
        Delete a pipeline version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_version_requests_delete(
                project_name, pipeline_name, request_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str request_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_version_requests_delete_with_http_info(
            project_name, pipeline_name, request_id, version, **kwargs
        )

    def pipeline_version_requests_get(self, project_name, pipeline_name, request_id, version, **kwargs):
        """
        Get a pipeline version request

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_version_requests_get(
                project_name, pipeline_name, request_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str request_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool metadata_only:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineRequestSingleDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_version_requests_get_with_http_info(
            project_name, pipeline_name, request_id, version, **kwargs
        )

    def pipeline_version_requests_list(self, project_name, pipeline_name, version, **kwargs):
        """
        List pipeline version requests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_version_requests_list(
                project_name, pipeline_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param kwargs:
            - str status:
            - bool success:
            - int limit:
            - int offset:
            - str sort:
            - str request_schedule:
            - str start_date:
            - str end_date:
            - str search_id:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineRequestList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipeline_requests.pipeline_version_requests_list_with_http_info(
            project_name, pipeline_name, version, **kwargs
        )

    def expressions_evaluate(self, data, **kwargs):
        """
        Evaluate expression

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.expressions_evaluate(
                data, async_req=True
            )
        >>> result = thread.get()

        :param ExpressionEvaluate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ExpressionEvaluateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.expressions_evaluate_with_http_info(data, **kwargs)

    def pipeline_audit_events_list(self, project_name, pipeline_name, **kwargs):
        """
        List audit events for a pipeline

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_audit_events_list(
                project_name, pipeline_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param kwargs:
            - str action:
            - int limit:
            - int offset:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[AuditList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipeline_audit_events_list_with_http_info(project_name, pipeline_name, **kwargs)

    def pipeline_version_object_environment_variables_list(self, project_name, name, pipeline_name, version, **kwargs):
        """
        List pipeline object environment variables

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_version_object_environment_variables_list(
                project_name, name, pipeline_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[InheritedEnvironmentVariableList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipeline_version_object_environment_variables_list_with_http_info(
            project_name, name, pipeline_name, version, **kwargs
        )

    def pipeline_versions_create(self, project_name, pipeline_name, data, **kwargs):
        """
        Create pipeline versions

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_versions_create(
                project_name, pipeline_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param PipelineVersionCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineVersionDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipeline_versions_create_with_http_info(project_name, pipeline_name, data, **kwargs)

    def pipeline_versions_delete(self, project_name, pipeline_name, version, **kwargs):
        """
        Delete pipeline version

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_versions_delete(
                project_name, pipeline_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipeline_versions_delete_with_http_info(project_name, pipeline_name, version, **kwargs)

    def pipeline_versions_get(self, project_name, pipeline_name, version, **kwargs):
        """
        Get pipeline version

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_versions_get(
                project_name, pipeline_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineVersionDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipeline_versions_get_with_http_info(project_name, pipeline_name, version, **kwargs)

    def pipeline_versions_list(self, project_name, pipeline_name, **kwargs):
        """
        List pipeline versions

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_versions_list(
                project_name, pipeline_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param kwargs:
            - str labels:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineVersionList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipeline_versions_list_with_http_info(project_name, pipeline_name, **kwargs)

    def pipeline_versions_update(self, project_name, pipeline_name, version, data, **kwargs):
        """
        Update pipeline version

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipeline_versions_update(
                project_name, pipeline_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param str version: (required)
        :param PipelineVersionUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineVersionDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipeline_versions_update_with_http_info(
            project_name, pipeline_name, version, data, **kwargs
        )

    def pipelines_create(self, project_name, data, **kwargs):
        """
        Create pipelines

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipelines_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param PipelineCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineCreateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipelines_create_with_http_info(project_name, data, **kwargs)

    def pipelines_delete(self, project_name, pipeline_name, **kwargs):
        """
        Delete a pipeline

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipelines_delete(
                project_name, pipeline_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipelines_delete_with_http_info(project_name, pipeline_name, **kwargs)

    def pipelines_get(self, project_name, pipeline_name, **kwargs):
        """
        Get details of a pipeline

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipelines_get(
                project_name, pipeline_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipelines_get_with_http_info(project_name, pipeline_name, **kwargs)

    def pipelines_list(self, project_name, **kwargs):
        """
        List pipelines

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipelines_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str labels:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PipelineList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipelines_list_with_http_info(project_name, **kwargs)

    def pipelines_update(self, project_name, pipeline_name, data, **kwargs):
        """
        Update a pipeline

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.pipelines_update(
                project_name, pipeline_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str pipeline_name: (required)
        :param PipelineUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(PipelineDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.pipelines.pipelines_update_with_http_info(project_name, pipeline_name, data, **kwargs)

    def instance_types_list(self, project_name, **kwargs):
        """
        List instance types

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.instance_types_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentInstanceType], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.instance_types_list_with_http_info(project_name, **kwargs)

    def project_audit_events_list(self, project_name, **kwargs):
        """
        List audit events in a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_audit_events_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str action:
            - int limit:
            - int offset:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[AuditList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_audit_events_list_with_http_info(project_name, **kwargs)

    def project_environment_variables_create(self, project_name, data, **kwargs):
        """
        Create project environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_environment_variables_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param EnvironmentVariableCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_environment_variables_create_with_http_info(project_name, data, **kwargs)

    def project_environment_variables_delete(self, project_name, id, **kwargs):
        """
        Delete project environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_environment_variables_delete(
                project_name, id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_environment_variables_delete_with_http_info(project_name, id, **kwargs)

    def project_environment_variables_get(self, project_name, id, **kwargs):
        """
        Get project environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_environment_variables_get(
                project_name, id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_environment_variables_get_with_http_info(project_name, id, **kwargs)

    def project_environment_variables_list(self, project_name, **kwargs):
        """
        List project environment variables

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_environment_variables_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[EnvironmentVariableList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_environment_variables_list_with_http_info(project_name, **kwargs)

    def project_environment_variables_update(self, project_name, id, data, **kwargs):
        """
        Update project environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_environment_variables_update(
                project_name, id, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str id: (required)
        :param EnvironmentVariableCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_environment_variables_update_with_http_info(project_name, id, data, **kwargs)

    def project_requests_list(self, project_name, object_type, **kwargs):
        """
        List requests in project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_requests_list(
                project_name, object_type, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str object_type: (required)
        :param kwargs:
            - str status:
            - bool success:
            - int limit:
            - int offset:
            - str sort:
            - bool pipeline:
            - str request_schedule:
            - str start_date:
            - str end_date:
            - str search_id:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[RequestsOverview], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_requests_list_with_http_info(project_name, object_type, **kwargs)

    def project_users_create(self, project_name, data, **kwargs):
        """
        Add user to a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_users_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param ProjectUserCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ProjectUserList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_users_create_with_http_info(project_name, data, **kwargs)

    def project_users_delete(self, project_name, user_id, **kwargs):
        """
        Delete user from a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_users_delete(
                project_name, user_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str user_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_users_delete_with_http_info(project_name, user_id, **kwargs)

    def project_users_get(self, project_name, user_id, **kwargs):
        """
        Get user in a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_users_get(
                project_name, user_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str user_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ProjectUserList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_users_get_with_http_info(project_name, user_id, **kwargs)

    def project_users_list(self, project_name, **kwargs):
        """
        List users in a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.project_users_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str user_type:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[ProjectUserList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.project_users_list_with_http_info(project_name, **kwargs)

    def projects_create(self, data, **kwargs):
        """
        Create projects

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.projects_create(
                data, async_req=True
            )
        >>> result = thread.get()

        :param ProjectCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ProjectDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.projects_create_with_http_info(data, **kwargs)

    def projects_delete(self, project_name, **kwargs):
        """
        Delete a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.projects_delete(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.projects_delete_with_http_info(project_name, **kwargs)

    def projects_get(self, project_name, **kwargs):
        """
        Get details of a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.projects_get(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ProjectDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.projects_get_with_http_info(project_name, **kwargs)

    def projects_list(self, **kwargs):
        """
        List projects

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.projects_list(
                async_req=True
            )
        >>> result = thread.get()

        :param kwargs:
            - str organization:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[ProjectList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.projects_list_with_http_info(**kwargs)

    def projects_log_list(self, project_name, **kwargs):
        """
        List logs for a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.projects_log_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - LogsCreate data:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[Logs], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.projects_log_list_with_http_info(project_name, **kwargs)

    def projects_resource_usage(self, project_name, **kwargs):
        """
        List resource usage of a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.projects_resource_usage(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ProjectResourceUsage, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.projects_resource_usage_with_http_info(project_name, **kwargs)

    def projects_update(self, project_name, data, **kwargs):
        """
        Update a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.projects_update(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param ProjectUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ProjectDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.projects_update_with_http_info(project_name, data, **kwargs)

    def projects_usage_get(self, project_name, **kwargs):
        """
        Get resource usage

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.projects_usage_get(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str start_date:
            - str end_date:
            - str interval:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ProjectUsage, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.projects_usage_get_with_http_info(project_name, **kwargs)

    def quotas_list(self, project_name, **kwargs):
        """
        List quotas

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.quotas_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[QuotaDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.projects.quotas_list_with_http_info(project_name, **kwargs)

    def request_schedules_create(self, project_name, data, **kwargs):
        """
        Create request schedules

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.request_schedules_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param ScheduleCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ScheduleList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.request_schedules.request_schedules_create_with_http_info(project_name, data, **kwargs)

    def request_schedules_delete(self, project_name, schedule_name, **kwargs):
        """
        Delete a request schedule

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.request_schedules_delete(
                project_name, schedule_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str schedule_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.request_schedules.request_schedules_delete_with_http_info(project_name, schedule_name, **kwargs)

    def request_schedules_get(self, project_name, schedule_name, **kwargs):
        """
        Get details of a request schedule

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.request_schedules_get(
                project_name, schedule_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str schedule_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ScheduleList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.request_schedules.request_schedules_get_with_http_info(project_name, schedule_name, **kwargs)

    def request_schedules_list(self, project_name, **kwargs):
        """
        List request schedules

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.request_schedules_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str labels:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[ScheduleList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.request_schedules.request_schedules_list_with_http_info(project_name, **kwargs)

    def request_schedules_update(self, project_name, schedule_name, data, **kwargs):
        """
        Update a request schedule

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.request_schedules_update(
                project_name, schedule_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str schedule_name: (required)
        :param ScheduleUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ScheduleList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.request_schedules.request_schedules_update_with_http_info(
            project_name, schedule_name, data, **kwargs
        )

    def permissions_list(self, **kwargs):
        """
        List the available permissions

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.permissions_list(
                async_req=True
            )
        >>> result = thread.get()

        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[PermissionList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.roles.permissions_list_with_http_info(**kwargs)

    def role_assignments_create(self, project_name, data, **kwargs):
        """
        Assign role to user/object

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.role_assignments_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param RoleAssignmentCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RoleAssignmentList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.roles.role_assignments_create_with_http_info(project_name, data, **kwargs)

    def role_assignments_delete(self, project_name, id, **kwargs):
        """
        Delete role of user

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.role_assignments_delete(
                project_name, id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.roles.role_assignments_delete_with_http_info(project_name, id, **kwargs)

    def role_assignments_get(self, project_name, id, **kwargs):
        """
        Get role assignment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.role_assignments_get(
                project_name, id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RoleAssignmentList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.roles.role_assignments_get_with_http_info(project_name, id, **kwargs)

    def role_assignments_per_object_list(self, project_name, **kwargs):
        """
        List roles on object/user

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.role_assignments_per_object_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str resource:
            - str resource_type:
            - str assignee:
            - str assignee_type:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[RoleAssignmentList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.roles.role_assignments_per_object_list_with_http_info(project_name, **kwargs)

    def roles_create(self, project_name, data, **kwargs):
        """
        Create a custom role scoped in a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.roles_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param RoleCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RoleDetailList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.roles.roles_create_with_http_info(project_name, data, **kwargs)

    def roles_delete(self, project_name, role_name, **kwargs):
        """
        Delete a role from a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.roles_delete(
                project_name, role_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str role_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.roles.roles_delete_with_http_info(project_name, role_name, **kwargs)

    def roles_get(self, project_name, role_name, **kwargs):
        """
        Get details of a role

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.roles_get(
                project_name, role_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str role_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RoleDetailList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.roles.roles_get_with_http_info(project_name, role_name, **kwargs)

    def roles_list(self, project_name, **kwargs):
        """
        List the available roles in a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.roles_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[RoleList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.roles.roles_list_with_http_info(project_name, **kwargs)

    def roles_update(self, project_name, role_name, data, **kwargs):
        """
        Update a role in a project

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.roles_update(
                project_name, role_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str role_name: (required)
        :param RoleUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RoleDetailList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.roles.roles_update_with_http_info(project_name, role_name, data, **kwargs)

    def service_users_create(self, project_name, data, **kwargs):
        """
        Create a new service user

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.service_users_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param ServiceUserCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ServiceUserTokenDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.service_users.service_users_create_with_http_info(project_name, data, **kwargs)

    def service_users_delete(self, project_name, service_user_id, **kwargs):
        """
        Delete service user

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.service_users_delete(
                project_name, service_user_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str service_user_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.service_users.service_users_delete_with_http_info(project_name, service_user_id, **kwargs)

    def service_users_get(self, project_name, service_user_id, **kwargs):
        """
        Retrieve details of a service user

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.service_users_get(
                project_name, service_user_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str service_user_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ServiceUserList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.service_users.service_users_get_with_http_info(project_name, service_user_id, **kwargs)

    def service_users_list(self, project_name, **kwargs):
        """
        List service users

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.service_users_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[ServiceUserList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.service_users.service_users_list_with_http_info(project_name, **kwargs)

    def service_users_token(self, project_name, service_user_id, **kwargs):
        """
        Reset the token of a service user

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.service_users_token(
                project_name, service_user_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str service_user_id: (required)
        :param kwargs:
            - object data:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ServiceUserTokenList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.service_users.service_users_token_with_http_info(project_name, service_user_id, **kwargs)

    def service_users_update(self, project_name, service_user_id, data, **kwargs):
        """
        Update service user details

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.service_users_update(
                project_name, service_user_id, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str service_user_id: (required)
        :param ServiceUserCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(ServiceUserList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.service_users.service_users_update_with_http_info(project_name, service_user_id, data, **kwargs)

    def service_status(self, **kwargs):
        """
        Service status

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.service_status(
                async_req=True
            )
        >>> result = thread.get()

        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(Status, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.status.service_status_with_http_info(**kwargs)

    def user_create(self, data, **kwargs):
        """
        Create a new user

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.user_create(
                data, async_req=True
            )
        >>> result = thread.get()

        :param UserPendingCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(UserPendingDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.user.user_create_with_http_info(data, **kwargs)

    def user_delete(self, **kwargs):
        """
        Delete user

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.user_delete(
                async_req=True
            )
        >>> result = thread.get()

        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.user.user_delete_with_http_info(**kwargs)

    def webhook_tests_create(self, project_name, data, **kwargs):
        """
        Create webhook tests

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.webhook_tests_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param WebhookTestCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(WebhookTestDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.webhooks.webhook_tests_create_with_http_info(project_name, data, **kwargs)

    def webhook_tests_get(self, project_name, test_id, **kwargs):
        """
        Get webhook test

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.webhook_tests_get(
                project_name, test_id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str test_id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(WebhookTestDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.webhooks.webhook_tests_get_with_http_info(project_name, test_id, **kwargs)

    def webhooks_create(self, project_name, data, **kwargs):
        """
        Create webhooks

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.webhooks_create(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param WebhookCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(WebhookDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.webhooks.webhooks_create_with_http_info(project_name, data, **kwargs)

    def webhooks_delete(self, project_name, webhook_name, **kwargs):
        """
        Delete a webhook

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.webhooks_delete(
                project_name, webhook_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str webhook_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.webhooks.webhooks_delete_with_http_info(project_name, webhook_name, **kwargs)

    def webhooks_get(self, project_name, webhook_name, **kwargs):
        """
        Get webhook

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.webhooks_get(
                project_name, webhook_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str webhook_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(WebhookDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.webhooks.webhooks_get_with_http_info(project_name, webhook_name, **kwargs)

    def webhooks_list(self, project_name, **kwargs):
        """
        List webhooks

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.webhooks_list(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str labels:
            - str object_type:
            - str event:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[WebhookDetail], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.webhooks.webhooks_list_with_http_info(project_name, **kwargs)

    def webhooks_update(self, project_name, webhook_name, data, **kwargs):
        """
        Update a webhook

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass
        async_req=True
        >>> thread = CoreApi.webhooks_update(
                project_name, webhook_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str webhook_name: (required)
        :param WebhookUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(WebhookDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        kwargs["_return_http_data_only"] = True

        return self.webhooks.webhooks_update_with_http_info(project_name, webhook_name, data, **kwargs)
