# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


from ubiops.api_client import ApiClient
from ubiops.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class Deployments(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def builds_get_with_http_info(self, project_name, build_id, deployment_name, version, **kwargs):
        """
        Get build

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.builds_get_with_http_info(
                project_name, build_id, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str build_id: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(BuildList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "builds_get"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and build_id is None:
            raise ApiValueError(f"Missing the required parameter `build_id` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(build_id, str):
                raise ApiValueError(f"Parameter `build_id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["build_id"] = build_id
        path_params["deployment_name"] = deployment_name
        path_params["version"] = version

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = (
            "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/builds/{build_id}"  # noqa: E501
        )
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="BuildList",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_audit_events_list_with_http_info(self, project_name, deployment_name, **kwargs):
        """
        List audit events for a deployment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_audit_events_list_with_http_info(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - str action:
            - int limit:
            - int offset:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[AuditList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_audit_events_list"
        optional_params = ["action", "limit", "offset"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "action" in kwargs and kwargs["action"] is not None:
            if not isinstance(kwargs["action"], str):
                raise ApiValueError(f"Parameter `action` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "limit" in kwargs and kwargs["limit"] is not None:
            if not isinstance(kwargs["limit"], int):
                raise ApiValueError(f"Parameter `limit` must be an integer when calling `{method_name}`")
        if self.api_client.client_side_validation and "offset" in kwargs and kwargs["offset"] is not None:
            if not isinstance(kwargs["offset"], int):
                raise ApiValueError(f"Parameter `offset` must be an integer when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name

        if "action" in kwargs and kwargs["action"] is not None:
            query_params.append(("action", kwargs["action"]))
        if "limit" in kwargs and kwargs["limit"] is not None:
            query_params.append(("limit", kwargs["limit"]))
        if "offset" in kwargs and kwargs["offset"] is not None:
            query_params.append(("offset", kwargs["offset"]))

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/audit"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[AuditList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_environment_variables_copy_with_http_info(self, project_name, deployment_name, data, **kwargs):
        """
        Copy deployment environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_environment_variables_copy_with_http_info(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param EnvironmentVariableCopy data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[InheritedEnvironmentVariableList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_environment_variables_copy"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if isinstance(data, dict):
                from ubiops.models.environment_variable_copy import EnvironmentVariableCopy

                data = EnvironmentVariableCopy(**data)

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/copy-environment-variables"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[InheritedEnvironmentVariableList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_environment_variables_create_with_http_info(self, project_name, deployment_name, data, **kwargs):
        """
        Create deployment environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_environment_variables_create_with_http_info(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param EnvironmentVariableCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_environment_variables_create"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if isinstance(data, dict):
                from ubiops.models.environment_variable_create import EnvironmentVariableCreate

                data = EnvironmentVariableCreate(**data)

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/environment-variables"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="EnvironmentVariableList",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_environment_variables_delete_with_http_info(self, project_name, deployment_name, id, **kwargs):
        """
        Delete deployment environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_environment_variables_delete_with_http_info(
                project_name, deployment_name, id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_environment_variables_delete"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and id is None:
            raise ApiValueError(f"Missing the required parameter `id` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(id, str):
                raise ApiValueError(f"Parameter `id` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["id"] = id

        url = "/projects/{project_name}/deployments/{deployment_name}/environment-variables/{id}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type=None,
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_environment_variables_get_with_http_info(self, project_name, deployment_name, id, **kwargs):
        """
        Get deployment environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_environment_variables_get_with_http_info(
                project_name, deployment_name, id, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_environment_variables_get"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and id is None:
            raise ApiValueError(f"Missing the required parameter `id` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(id, str):
                raise ApiValueError(f"Parameter `id` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["id"] = id

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/environment-variables/{id}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="EnvironmentVariableList",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_environment_variables_list_with_http_info(self, project_name, deployment_name, **kwargs):
        """
        List deployment environment variables

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_environment_variables_list_with_http_info(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[InheritedEnvironmentVariableList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_environment_variables_list"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/environment-variables"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[InheritedEnvironmentVariableList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_environment_variables_update_with_http_info(self, project_name, deployment_name, id, data, **kwargs):
        """
        Update deployment environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_environment_variables_update_with_http_info(
                project_name, deployment_name, id, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param EnvironmentVariableCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_environment_variables_update"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and id is None:
            raise ApiValueError(f"Missing the required parameter `id` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(id, str):
                raise ApiValueError(f"Parameter `id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if isinstance(data, dict):
                from ubiops.models.environment_variable_create import EnvironmentVariableCreate

                data = EnvironmentVariableCreate(**data)

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["id"] = id

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/environment-variables/{id}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="EnvironmentVariableList",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_version_environment_variables_copy_with_http_info(
        self, project_name, deployment_name, version, data, **kwargs
    ):
        """
        Copy deployment version environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_version_environment_variables_copy_with_http_info(
                project_name, deployment_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param EnvironmentVariableCopy data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[InheritedEnvironmentVariableList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_version_environment_variables_copy"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if isinstance(data, dict):
                from ubiops.models.environment_variable_copy import EnvironmentVariableCopy

                data = EnvironmentVariableCopy(**data)

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["version"] = version

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/copy-environment-variables"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[InheritedEnvironmentVariableList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_version_environment_variables_create_with_http_info(
        self, project_name, deployment_name, version, data, **kwargs
    ):
        """
        Create deployment version environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_version_environment_variables_create_with_http_info(
                project_name, deployment_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param EnvironmentVariableCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_version_environment_variables_create"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if isinstance(data, dict):
                from ubiops.models.environment_variable_create import EnvironmentVariableCreate

                data = EnvironmentVariableCreate(**data)

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["version"] = version

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/environment-variables"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="EnvironmentVariableList",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_version_environment_variables_delete_with_http_info(
        self, project_name, deployment_name, id, version, **kwargs
    ):
        """
        Delete deployment version environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_version_environment_variables_delete_with_http_info(
                project_name, deployment_name, id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_version_environment_variables_delete"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and id is None:
            raise ApiValueError(f"Missing the required parameter `id` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(id, str):
                raise ApiValueError(f"Parameter `id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["id"] = id
        path_params["version"] = version

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/environment-variables/{id}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type=None,
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_version_environment_variables_get_with_http_info(
        self, project_name, deployment_name, id, version, **kwargs
    ):
        """
        Get deployment version environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_version_environment_variables_get_with_http_info(
                project_name, deployment_name, id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_version_environment_variables_get"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and id is None:
            raise ApiValueError(f"Missing the required parameter `id` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(id, str):
                raise ApiValueError(f"Parameter `id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["id"] = id
        path_params["version"] = version

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/environment-variables/{id}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="EnvironmentVariableList",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_version_environment_variables_list_with_http_info(
        self, project_name, deployment_name, version, **kwargs
    ):
        """
        List deployment version environment variables

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_version_environment_variables_list_with_http_info(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[InheritedEnvironmentVariableList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_version_environment_variables_list"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["version"] = version

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/environment-variables"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[InheritedEnvironmentVariableList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_version_environment_variables_update_with_http_info(
        self, project_name, deployment_name, id, version, data, **kwargs
    ):
        """
        Update deployment version environment variable

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_version_environment_variables_update_with_http_info(
                project_name, deployment_name, id, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str id: (required)
        :param str version: (required)
        :param EnvironmentVariableCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(EnvironmentVariableList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_version_environment_variables_update"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and id is None:
            raise ApiValueError(f"Missing the required parameter `id` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(id, str):
                raise ApiValueError(f"Parameter `id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if isinstance(data, dict):
                from ubiops.models.environment_variable_create import EnvironmentVariableCreate

                data = EnvironmentVariableCreate(**data)

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["id"] = id
        path_params["version"] = version

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/environment-variables/{id}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="EnvironmentVariableList",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_versions_create_with_http_info(self, project_name, deployment_name, data, **kwargs):
        """
        Create deployment versions

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_versions_create_with_http_info(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param DeploymentVersionCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentVersionList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_versions_create"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if isinstance(data, dict):
                from ubiops.models.deployment_version_create import DeploymentVersionCreate

                data = DeploymentVersionCreate(**data)

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="DeploymentVersionList",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_versions_delete_with_http_info(self, project_name, deployment_name, version, **kwargs):
        """
        Delete deployment version

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_versions_delete_with_http_info(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_versions_delete"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["version"] = version

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type=None,
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_versions_get_with_http_info(self, project_name, deployment_name, version, **kwargs):
        """
        Get deployment version

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_versions_get_with_http_info(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentVersionDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_versions_get"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["version"] = version

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="DeploymentVersionDetail",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_versions_list_with_http_info(self, project_name, deployment_name, **kwargs):
        """
        List deployment versions

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_versions_list_with_http_info(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - str labels:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentVersionList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_versions_list"
        optional_params = ["labels"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "labels" in kwargs and kwargs["labels"] is not None:
            if not isinstance(kwargs["labels"], str):
                raise ApiValueError(f"Parameter `labels` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name

        if "labels" in kwargs and kwargs["labels"] is not None:
            query_params.append(("labels", kwargs["labels"]))

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[DeploymentVersionList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployment_versions_update_with_http_info(self, project_name, deployment_name, version, data, **kwargs):
        """
        Update deployment version

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployment_versions_update_with_http_info(
                project_name, deployment_name, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param DeploymentVersionUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentVersionDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployment_versions_update"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if isinstance(data, dict):
                from ubiops.models.deployment_version_update import DeploymentVersionUpdate

                data = DeploymentVersionUpdate(**data)

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["version"] = version

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="DeploymentVersionDetail",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployments_create_with_http_info(self, project_name, data, **kwargs):
        """
        Create deployments

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployments_create_with_http_info(
                project_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param DeploymentCreate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentCreateResponse, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployments_create"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if isinstance(data, dict):
                from ubiops.models.deployment_create import DeploymentCreate

                data = DeploymentCreate(**data)

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="DeploymentCreateResponse",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployments_delete_with_http_info(self, project_name, deployment_name, **kwargs):
        """
        Delete a deployment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployments_delete_with_http_info(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: None
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployments_delete"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name

        url = "/projects/{project_name}/deployments/{deployment_name}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type=None,
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployments_get_with_http_info(self, project_name, deployment_name, **kwargs):
        """
        Get details of a deployment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployments_get_with_http_info(
                project_name, deployment_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployments_get"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="DeploymentDetail",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployments_list_with_http_info(self, project_name, **kwargs):
        """
        List deployments

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployments_list_with_http_info(
                project_name, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param kwargs:
            - str labels:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[DeploymentList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployments_list"
        optional_params = ["labels"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "labels" in kwargs and kwargs["labels"] is not None:
            if not isinstance(kwargs["labels"], str):
                raise ApiValueError(f"Parameter `labels` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name

        if "labels" in kwargs and kwargs["labels"] is not None:
            query_params.append(("labels", kwargs["labels"]))

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[DeploymentList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def deployments_update_with_http_info(self, project_name, deployment_name, data, **kwargs):
        """
        Update a deployment

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.deployments_update_with_http_info(
                project_name, deployment_name, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param DeploymentUpdate data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(DeploymentDetail, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "deployments_update"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if isinstance(data, dict):
                from ubiops.models.deployment_update import DeploymentUpdate

                data = DeploymentUpdate(**data)

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="DeploymentDetail",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def revisions_file_download_with_http_info(self, project_name, deployment_name, revision_id, version, **kwargs):
        """
        Download deployment file

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.revisions_file_download_with_http_info(
                project_name, deployment_name, revision_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str revision_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if True, the file will be downloaded in a folder, which can be defined by
                api_client.configuration.temp_folder_path. Default is False.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "revisions_file_download"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and revision_id is None:
            raise ApiValueError(f"Missing the required parameter `revision_id` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(revision_id, str):
                raise ApiValueError(f"Parameter `revision_id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["revision_id"] = revision_id
        path_params["version"] = version

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/revisions/{revision_id}/download"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="file",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", False),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", True),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", True),
        )

    def revisions_file_upload_with_http_info(self, project_name, deployment_name, version, **kwargs):
        """
        Upload deployment file

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.revisions_file_upload_with_http_info(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - file file:
            - str source_deployment:
            - str source_version:
            - str template_deployment_id:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RevisionCreate, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "revisions_file_upload"
        optional_params = ["file", "source_deployment", "source_version", "template_deployment_id"]
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "source_deployment" in kwargs:
            if not isinstance(kwargs["source_deployment"], str):
                raise ApiValueError(f"Parameter `source_deployment` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation and "source_version" in kwargs:
            if not isinstance(kwargs["source_version"], str):
                raise ApiValueError(f"Parameter `source_version` must be a string when calling `{method_name}`")
        if (
            self.api_client.client_side_validation
            and "source_deployment" in kwargs
            and kwargs["source_deployment"] is not None
            and len(kwargs["source_deployment"]) < 1
        ):
            raise ApiValueError(
                f"Invalid value for parameter `source_deployment` when calling `{method_name}`,"
                " length must be greater than or equal to `1`"
            )
        if (
            self.api_client.client_side_validation
            and "source_version" in kwargs
            and kwargs["source_version"] is not None
            and len(kwargs["source_version"]) < 1
        ):
            raise ApiValueError(
                f"Invalid value for parameter `source_version` when calling `{method_name}`,"
                " length must be greater than or equal to `1`"
            )

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["version"] = version

        if "file" in kwargs:
            files["file"] = kwargs["file"]
        if "source_deployment" in kwargs:
            form_params.append(("source_deployment", kwargs["source_deployment"]))
        if "source_version" in kwargs:
            form_params.append(("source_version", kwargs["source_version"]))
        if "template_deployment_id" in kwargs:
            form_params.append(("template_deployment_id", kwargs["template_deployment_id"]))

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["multipart/form-data"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/revisions"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="RevisionCreate",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", True),
        )

    def revisions_get_with_http_info(self, project_name, deployment_name, revision_id, version, **kwargs):
        """
        Get revision

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.revisions_get_with_http_info(
                project_name, deployment_name, revision_id, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str revision_id: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RevisionList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "revisions_get"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and revision_id is None:
            raise ApiValueError(f"Missing the required parameter `revision_id` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(revision_id, str):
                raise ApiValueError(f"Parameter `revision_id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["revision_id"] = revision_id
        path_params["version"] = version

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/revisions/{revision_id}"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="RevisionList",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def revisions_list_with_http_info(self, project_name, deployment_name, version, **kwargs):
        """
        List revisions

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.revisions_list_with_http_info(
                project_name, deployment_name, version, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str version: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[RevisionList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "revisions_list"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["version"] = version

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/revisions"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[RevisionList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def revisions_rebuild_with_http_info(self, project_name, deployment_name, revision_id, version, data, **kwargs):
        """
        Rebuild revision

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.revisions_rebuild_with_http_info(
                project_name, deployment_name, revision_id, version, data, async_req=True
            )
        >>> result = thread.get()

        :param str project_name: (required)
        :param str deployment_name: (required)
        :param str revision_id: (required)
        :param str version: (required)
        :param object data: (required)
        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(RevisionList, status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "revisions_rebuild"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        if self.api_client.client_side_validation and project_name is None:
            raise ApiValueError(f"Missing the required parameter `project_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and deployment_name is None:
            raise ApiValueError(f"Missing the required parameter `deployment_name` when calling `{method_name}`")
        if self.api_client.client_side_validation and revision_id is None:
            raise ApiValueError(f"Missing the required parameter `revision_id` when calling `{method_name}`")
        if self.api_client.client_side_validation and version is None:
            raise ApiValueError(f"Missing the required parameter `version` when calling `{method_name}`")
        if self.api_client.client_side_validation and data is None:
            raise ApiValueError(f"Missing the required parameter `data` when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(project_name, str):
                raise ApiValueError(f"Parameter `project_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(deployment_name, str):
                raise ApiValueError(f"Parameter `deployment_name` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(revision_id, str):
                raise ApiValueError(f"Parameter `revision_id` must be a string when calling `{method_name}`")
        if self.api_client.client_side_validation:
            if not isinstance(version, str):
                raise ApiValueError(f"Parameter `version` must be a string when calling `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        path_params["project_name"] = project_name
        path_params["deployment_name"] = deployment_name
        path_params["revision_id"] = revision_id
        path_params["version"] = version

        body_params = data

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["application/json"])

        url = "/projects/{project_name}/deployments/{deployment_name}/versions/{version}/revisions/{revision_id}/rebuild"  # noqa: E501
        return self.api_client.call_api(
            url,
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="RevisionList",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )

    def template_deployments_list_with_http_info(self, **kwargs):
        """
        List template deployments

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please
        pass async_req=True.

        >>> thread = Deployments.template_deployments_list_with_http_info(
                async_req=True
            )
        >>> result = thread.get()

        :param kwargs:
            - bool _return_http_data_only: response data without head status code and headers
            - bool _preload_content: if False, the requests.Response object will be returned without reading/decoding
                response data. Default is True.
            - int|tuple _request_timeout: timeout setting for this request. If one number provided, it will be total
                request timeout. It can also be a pair (tuple) of (connection, read) timeouts.
            - bool async_req: execute request asynchronously
        :return: tuple(list[TemplateDeploymentList], status_code(int), headers(HTTPHeaderDict))
             If the method is called asynchronously, returns the request thread.
        """

        method_name = "template_deployments_list"
        optional_params = []
        additional_params = [
            "async_req",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
            "_request_stream",
            "_progress_bar",
        ]

        for key, val in kwargs.items():
            if key not in optional_params + additional_params:
                raise ApiTypeError(f"Got an unexpected keyword argument '{key}' to method `{method_name}`")

        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        files = {}
        body_params = None

        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        url = "/template-deployments"  # noqa: E501
        return self.api_client.call_api(
            url,
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=files,
            response_type="list[TemplateDeploymentList]",
            auth_settings=["api_key"],
            async_req=kwargs.get("async_req", False),
            _return_http_data_only=kwargs.get("_return_http_data_only", True),
            _preload_content=kwargs.get("_preload_content", True),
            _request_timeout=kwargs.get("_request_timeout", None),
            stream=kwargs.get("_request_stream", False),
            collection_formats=collection_formats,
            progress_bar=kwargs.get("_progress_bar", False),
        )
