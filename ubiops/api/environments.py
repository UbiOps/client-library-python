# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ubiops.api_client import ApiClient
from ubiops.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class Environments(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def environment_build_dependencies_list_with_http_info(self, project_name, build_id, environment_name, revision_id, **kwargs):  # noqa: E501
        """List dependency files  # noqa: E501

         ### Description List the dependency files and their contents in an environment build  ### Response Structure A list of details of the dependency files - `name`: Name of the dependency file - `content`: Content of the dependency file  #### Response Examples ``` [   {     \"name\": \"requirements.txt\",     \"content\": \"ubiops==3.6.1\\nrequests==2.30.0\\n\"   },   {     \"name\": \"ubiops.yaml\",     \"content\": \"environment_variables:\\n- ACCEPT_EULA=Y\\napt:\\n  packages:\\n    - python3-dev\\n\"   } ] ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environment_build_dependencies_list_with_http_info(project_name, build_id, environment_name, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str build_id: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EnvironmentBuildDependency], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'build_id', 'environment_name', 'revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environment_build_dependencies_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environment_build_dependencies_list`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if self.api_client.client_side_validation and (
            'build_id' not in local_var_params or local_var_params['build_id'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `build_id` when calling `environment_build_dependencies_list`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environment_build_dependencies_list`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and (
            'revision_id' not in local_var_params or local_var_params['revision_id'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `revision_id` when calling `environment_build_dependencies_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environment_build_dependencies_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'build_id' in local_var_params and local_var_params['build_id'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['build_id'], str):  # noqa: E501
                raise ApiValueError("Parameter `build_id` must be a string when calling `environment_build_dependencies_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environment_build_dependencies_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'revision_id' in local_var_params and local_var_params['revision_id'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['revision_id'], str):  # noqa: E501
                raise ApiValueError("Parameter `revision_id` must be a string when calling `environment_build_dependencies_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'build_id' in local_var_params:
            path_params['build_id'] = local_var_params['build_id']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501
        if 'revision_id' in local_var_params:
            path_params['revision_id'] = local_var_params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}/revisions/{revision_id}/builds/{build_id}/dependency-files', 'GET',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EnvironmentBuildDependency]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environment_builds_get_with_http_info(self, project_name, build_id, environment_name, revision_id, **kwargs):  # noqa: E501
        """Get build  # noqa: E501

         ### Description Retrieve details of a build of an environment  ### Response Structure Details of a build - `id`: Unique identifier for the build - `revision`: ID of the revision to which the build is linked - `creation_date`: The date when the build was created - `status`: Status of the build. It can be one of the following: 'queued', 'processing', 'success' or 'failed'. - `error_message`: Error message which explains why the build has failed. It is empty if the build is successful. - `trigger`: Action that triggered the build  #### Response Examples ``` {   \"id\": \"e2c5f430-265d-4f79-a828-259ada415ae4\",   \"revision\": \"8760570f-6eda-470b-99af-bde810d418d8\",   \"creation_date\": \"2023-01-30T12:27:12.108+00:00\",   \"status\": \"success\",   \"error_message\": \"\",   \"trigger\": \"Rebuild triggered\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environment_builds_get_with_http_info(project_name, build_id, environment_name, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str build_id: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnvironmentBuildList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'build_id', 'environment_name', 'revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environment_builds_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environment_builds_get`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if self.api_client.client_side_validation and (
            'build_id' not in local_var_params or local_var_params['build_id'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `build_id` when calling `environment_builds_get`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environment_builds_get`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and (
            'revision_id' not in local_var_params or local_var_params['revision_id'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `revision_id` when calling `environment_builds_get`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environment_builds_get`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'build_id' in local_var_params and local_var_params['build_id'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['build_id'], str):  # noqa: E501
                raise ApiValueError("Parameter `build_id` must be a string when calling `environment_builds_get`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environment_builds_get`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'revision_id' in local_var_params and local_var_params['revision_id'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['revision_id'], str):  # noqa: E501
                raise ApiValueError("Parameter `revision_id` must be a string when calling `environment_builds_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'build_id' in local_var_params:
            path_params['build_id'] = local_var_params['build_id']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501
        if 'revision_id' in local_var_params:
            path_params['revision_id'] = local_var_params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}/revisions/{revision_id}/builds/{build_id}', 'GET',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnvironmentBuildList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environment_builds_list_with_http_info(self, project_name, environment_name, revision_id, **kwargs):  # noqa: E501
        """List builds  # noqa: E501

         ### Description List builds of an environment. A build is triggered when a new environment file is uploaded.  ### Response Structure A list of details of the builds - `id`: Unique identifier for the build - `revision`: ID of the revision to which the build is linked - `creation_date`: The date when the build was created - `status`: Status of the build. It can be one of the following: 'queued', 'processing', 'success' or 'failed'. - `error_message`: Error message which explains why the build has failed. It is empty if the build is successful. - `trigger`: Action that triggered the build  #### Response Examples ``` [   {     \"id\": \"e3021050-b9ac-4b8e-89f4-adb9e7c9aba6\",     \"revision\": \"593bac21-7cd2-476a-aee8-ec9fc7f56232\",     \"creation_date\": \"2023-01-23T12:17:11.863+00:00\",     \"status\": \"failed\",     \"error_message\": \"Could not find the requirements file\",     \"trigger\": \"Environment file upload\"   },   {     \"id\": \"038ae310-6629-4887-952d-868b6e533b90\",     \"revision\": \"8760570f-6eda-470b-99af-bde810d418d8\",     \"creation_date\": \"2023-01-29T17:12:43.108+00:00\",     \"status\": \"queued\",     \"error_message\": \"\",     \"trigger\": \"Environment file upload\"   } ] ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environment_builds_list_with_http_info(project_name, environment_name, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EnvironmentBuildList], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'environment_name', 'revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environment_builds_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environment_builds_list`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environment_builds_list`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and (
            'revision_id' not in local_var_params or local_var_params['revision_id'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `revision_id` when calling `environment_builds_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environment_builds_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environment_builds_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'revision_id' in local_var_params and local_var_params['revision_id'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['revision_id'], str):  # noqa: E501
                raise ApiValueError("Parameter `revision_id` must be a string when calling `environment_builds_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501
        if 'revision_id' in local_var_params:
            path_params['revision_id'] = local_var_params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}/revisions/{revision_id}/builds', 'GET',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EnvironmentBuildList]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environment_builds_update_with_http_info(self, project_name, build_id, environment_name, revision_id, data, **kwargs):  # noqa: E501
        """Update build  # noqa: E501

         ### Description  Cancel a build of an environment  ### Required Parameters - `status`: Status that the build will be updated to. It can only be cancelled.  #### Request Examples ``` {     \"status\": \"cancelled\" } ```  ### Response Structure  Details of the cancelled build - `id`: Unique identifier for the build - `revision`: ID of the revision to which the build is linked - `creation_date`: The date when the build was created - `status`: Status of the build. It can be one of the following: 'queued', 'processing', 'success' or 'failed'. - `error_message`: Error message which explains why the build has failed. It is empty if the build is successful. - `trigger`: Action that triggered the build  #### Response Examples ``` {   \"id\": \"e2c5f430-265d-4f79-a828-259ada415ae4\",   \"revision\": \"8760570f-6eda-470b-99af-bde810d418d8\",   \"creation_date\": \"2023-01-30T12:27:12.108+00:00\",   \"status\": \"cancelled\",   \"error_message\": \"\",   \"trigger\": \"Rebuild triggered\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environment_builds_update_with_http_info(project_name, build_id, environment_name, revision_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str build_id: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param EnvironmentBuildUpdate data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnvironmentBuildList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'build_id', 'environment_name', 'revision_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environment_builds_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environment_builds_update`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if self.api_client.client_side_validation and (
            'build_id' not in local_var_params or local_var_params['build_id'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `build_id` when calling `environment_builds_update`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environment_builds_update`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and (
            'revision_id' not in local_var_params or local_var_params['revision_id'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `revision_id` when calling `environment_builds_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and (
            'data' not in local_var_params or local_var_params['data'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `data` when calling `environment_builds_update`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environment_builds_update`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'build_id' in local_var_params and local_var_params['build_id'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['build_id'], str):  # noqa: E501
                raise ApiValueError("Parameter `build_id` must be a string when calling `environment_builds_update`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environment_builds_update`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'revision_id' in local_var_params and local_var_params['revision_id'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['revision_id'], str):  # noqa: E501
                raise ApiValueError("Parameter `revision_id` must be a string when calling `environment_builds_update`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'data' in local_var_params and local_var_params['data'] is not None  # noqa: E501
        ):
            if isinstance(local_var_params['data'], dict):  # noqa: E501
                from ubiops.models.environment_build_update import EnvironmentBuildUpdate

                local_var_params['data'] = EnvironmentBuildUpdate(**local_var_params['data'])  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'build_id' in local_var_params:
            path_params['build_id'] = local_var_params['build_id']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501
        if 'revision_id' in local_var_params:
            path_params['revision_id'] = local_var_params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}/revisions/{revision_id}/builds/{build_id}', 'PATCH',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnvironmentBuildList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environment_revisions_file_download_with_http_info(self, project_name, environment_name, revision_id, **kwargs):  # noqa: E501
        """Download environment file  # noqa: E501

         ### Description Download the file of a revision of an environment  ### Response Structure  - `file`: Environment file   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environment_revisions_file_download_with_http_info(project_name, environment_name, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if True, the file will be downloaded in a
                                 folder, which can be defined by
                                 api_client.configuration.temp_folder_path.
                                 Default is False.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'environment_name', 'revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environment_revisions_file_download" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environment_revisions_file_download`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environment_revisions_file_download`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and (
            'revision_id' not in local_var_params or local_var_params['revision_id'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `revision_id` when calling `environment_revisions_file_download`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environment_revisions_file_download`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environment_revisions_file_download`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'revision_id' in local_var_params and local_var_params['revision_id'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['revision_id'], str):  # noqa: E501
                raise ApiValueError("Parameter `revision_id` must be a string when calling `environment_revisions_file_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501
        if 'revision_id' in local_var_params:
            path_params['revision_id'] = local_var_params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}/revisions/{revision_id}/download', 'GET',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', False),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environment_revisions_file_upload_with_http_info(self, project_name, environment_name, **kwargs):  # noqa: E501
        """Upload environment file  # noqa: E501

         ### Description Upload a file for an environment. Uploading a file will create a new revision and trigger a build. This file should contain all the dependencies that the environment should have in the zip format.  It is **also possible** to provide a source environment from which the environment file will be copied. This will also create a new revision and trigger a build.  ### Optional Parameters - `file`: Environment file - `source_environment`: Environment from which the environment file will be copied  Either **file** or **source_environment** must be provided.  ### Response Structure - `success`: Boolean indicating whether the environment file upload/copy succeeded - `revision`: ID of the created revision for the file upload - `build`: ID of the build created for the file upload   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environment_revisions_file_upload_with_http_info(project_name, environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str environment_name: (required)
        :param file file:
        :param str source_environment:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnvironmentRevisionCreate, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'environment_name', 'file', 'source_environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environment_revisions_file_upload" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environment_revisions_file_upload`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environment_revisions_file_upload`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environment_revisions_file_upload`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environment_revisions_file_upload`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'source_environment' in local_var_params and local_var_params['source_environment'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['source_environment'], str):  # noqa: E501
                raise ApiValueError("Parameter `source_environment` must be a string when calling `environment_revisions_file_upload`")  # noqa: E501

        if self.api_client.client_side_validation and (
            'source_environment' in local_var_params and len(local_var_params['source_environment']) < 1  # noqa: E501
        ):
            raise ApiValueError("Invalid value for parameter `source_environment` when calling `environment_revisions_file_upload`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'source_environment' in local_var_params:
            form_params.append(('source_environment', local_var_params['source_environment']))  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}/revisions', 'POST',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnvironmentRevisionCreate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environment_revisions_get_with_http_info(self, project_name, environment_name, revision_id, **kwargs):  # noqa: E501
        """Get revision  # noqa: E501

         ### Description Retrieve details of a revision of an environment  ### Response Structure Details of a revision - `id`: Unique identifier for the revision - `environment`: Environment to which the revision is linked - `creation_date`: The date when the revision was created - `created_by`: The email of the user that uploaded the environment file. In case the revision is created by a service, the field will have a \"UbiOps\" value. - `expired`: A boolean indicating whether the environment file has been deleted for the revision  #### Response Examples ``` {   \"id\": \"593bac21-7cd2-476a-aee8-ec9fc7f56232\",   \"version\": \"python3-8-custom\",   \"creation_date\": \"2023-01-29T17:12:43.108+00:00\",   \"created_by\": \"test@example.com\",   \"expired\": false } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environment_revisions_get_with_http_info(project_name, environment_name, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnvironmentRevisionDetail, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'environment_name', 'revision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environment_revisions_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environment_revisions_get`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environment_revisions_get`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and (
            'revision_id' not in local_var_params or local_var_params['revision_id'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `revision_id` when calling `environment_revisions_get`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environment_revisions_get`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environment_revisions_get`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'revision_id' in local_var_params and local_var_params['revision_id'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['revision_id'], str):  # noqa: E501
                raise ApiValueError("Parameter `revision_id` must be a string when calling `environment_revisions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501
        if 'revision_id' in local_var_params:
            path_params['revision_id'] = local_var_params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}/revisions/{revision_id}', 'GET',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnvironmentRevisionDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environment_revisions_list_with_http_info(self, project_name, environment_name, **kwargs):  # noqa: E501
        """List revisions  # noqa: E501

         ### Description List revisions of an environment  ### Response Structure A list of details of the revisions - `id`: Unique identifier for the revision - `environment`: Environment to which the revision is linked - `creation_date`: The date when the revision was created - `created_by`: The email of the user that uploaded the environment file. In case the revision is created by a service, the field will have a \"UbiOps\" value. - `expired`: A boolean indicating whether the environment file has been deleted for the revision  #### Response Examples ``` [   {     \"id\": \"8760570f-6eda-470b-99af-bde810d418d8\",     \"environment\": \"python3-8-custom\",     \"creation_date\": \"2023-01-23T12:17:11.863+00:00\",     \"created_by\": \"UbiOps\",     \"expired\": false   },   {     \"id\": \"593bac21-7cd2-476a-aee8-ec9fc7f56232\",     \"version\": \"python3-8-custom\",     \"creation_date\": \"2023-01-29T17:12:43.108+00:00\",     \"created_by\": \"test@example.com\",     \"expired\": false   } ] ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environment_revisions_list_with_http_info(project_name, environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str environment_name: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EnvironmentRevisionDetail], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'environment_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environment_revisions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environment_revisions_list`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environment_revisions_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environment_revisions_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environment_revisions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}/revisions', 'GET',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EnvironmentRevisionDetail]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environment_revisions_rebuild_with_http_info(self, project_name, environment_name, revision_id, **kwargs):  # noqa: E501
        """Rebuild revision  # noqa: E501

         ### Description Trigger a rebuild for a revision of an environment  ### Response Structure Details of the created build - `id`: Unique identifier for the build - `revision`: ID of the revision to which the build is linked - `creation_date`: The date when the build was created - `status`: Status of the build. It can be one of the following: 'queued', 'processing', 'success' or 'failed'. - `error_message`: Error message which explains why the build has failed. It is empty if the build is successful. - `trigger`: Action that triggered the build  #### Response Examples ``` {   \"id\": \"e2c5f430-265d-4f79-a828-259ada415ae4\",   \"revision\": \"8760570f-6eda-470b-99af-bde810d418d8\",   \"creation_date\": \"2023-01-30T12:27:12.108+00:00\",   \"status\": \"queued\",   \"error_message\": \"\",   \"trigger\": \"Rebuild triggered\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environment_revisions_rebuild_with_http_info(project_name, environment_name, revision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str environment_name: (required)
        :param str revision_id: (required)
        :param object data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnvironmentBuildList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'environment_name', 'revision_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environment_revisions_rebuild" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environment_revisions_rebuild`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environment_revisions_rebuild`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if self.api_client.client_side_validation and (
            'revision_id' not in local_var_params or local_var_params['revision_id'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `revision_id` when calling `environment_revisions_rebuild`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environment_revisions_rebuild`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environment_revisions_rebuild`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'revision_id' in local_var_params and local_var_params['revision_id'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['revision_id'], str):  # noqa: E501
                raise ApiValueError("Parameter `revision_id` must be a string when calling `environment_revisions_rebuild`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501
        if 'revision_id' in local_var_params:
            path_params['revision_id'] = local_var_params['revision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}/revisions/{revision_id}/rebuild', 'POST',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnvironmentBuildList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environments_create_with_http_info(self, project_name, data, **kwargs):  # noqa: E501
        """Create environments  # noqa: E501

         ### Description Create a custom environment  ### Required Parameters - `name`: Name of the environment - `base_environment`: Base environment name on which this environment is based  ### Optional Parameters - `display_name`: Display name of the environment. If not set, 'name' is used instead. - `description`: Description for the environment - `labels`: Dictionary containing key/value pairs where key indicates the label and value is the corresponding value of that label  #### Request Examples ``` {   \"name\": \"python3-8-custom\",   \"base_environment\": \"python3.8\" } ```  ``` {   \"name\": \"python3-8-custom-1\",   \"display_name\": \"Custom Python 3.8\",   \"base_environment\": \"python3.8\" } ```  ### Response Structure  Details of the created environment - `id`: Unique identifier for the environment - `name`: Name of the environment - `display_name`: Display name of the environment - `base_environment`: Base environment name on which this environment is based - `project`: Project name in which the environment is defined - `creation_date`: The date when the environment was created - `last_updated`: The date when the environment was last updated - `description`: Description of the environment - `labels`: Dictionary containing key/value pairs where key indicates the label and value is the corresponding value of that label - `gpu_required`: A boolean indicating whether the environment requires GPUs - `status`: Status of the environment - `implicit`: A boolean indicating whether the environment is implicitly created - `hidden`: A boolean indicating whether the environment is hidden - `deprecated`: A boolean indicating whether the environment is deprecated  #### Response Examples  ``` {   \"id\": \"3a7d94ca-4df4-4be3-857c-d6b9995cd17a\",   \"name\": \"python3-8-custom\",   \"display_name\": \"Custom Python 3.8\",   \"base_environment\": \"python3.8\",   \"project\": \"project-1\",   \"creation_date\": \"2023-03-01T08:32:14.876451Z\",   \"last_updated\": \"2023-03-01T08:32:14.876451Z\",   \"description\": \"Custom environment based on Python 3.8\",   \"labels\": {     \"type\": \"environment\"   },   \"gpu_required\": false,   \"status\": \"active\",   \"implicit\": false,   \"deprecated\": false,   \"hidden\": false } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_create_with_http_info(project_name, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param EnvironmentCreate data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnvironmentList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environments_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environments_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and (
            'data' not in local_var_params or local_var_params['data'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `data` when calling `environments_create`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environments_create`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'data' in local_var_params and local_var_params['data'] is not None  # noqa: E501
        ):
            if isinstance(local_var_params['data'], dict):  # noqa: E501
                from ubiops.models.environment_create import EnvironmentCreate

                local_var_params['data'] = EnvironmentCreate(**local_var_params['data'])  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments', 'POST',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnvironmentList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environments_delete_with_http_info(self, project_name, environment_name, **kwargs):  # noqa: E501
        """Delete environment  # noqa: E501

         ### Description Delete an environment. The environment cannot be deleted if it is referenced by a deployment version.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_delete_with_http_info(project_name, environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str environment_name: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'environment_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environments_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environments_delete`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environments_delete`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environments_delete`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environments_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}', 'DELETE',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environments_get_with_http_info(self, project_name, environment_name, **kwargs):  # noqa: E501
        """Get environment  # noqa: E501

         ### Description Retrieve details of an environment  ### Response Structure Details of an environment - `id`: Unique identifier for the environment - `name`: Name of the environment - `display_name`: Display name of the environment - `base_environment`: Base environment name on which this environment is based - `project`: Project name in which the environment is defined - `creation_date`: The date when the environment was created - `last_updated`: The date when the environment was last updated - `description`: Description of the environment - `labels`: Dictionary containing key/value pairs where key indicates the label and value is the corresponding value of that label - `gpu_required`: A boolean indicating whether the environment requires GPUs - `status`: Status of the environment - `active_revision`: UUID of the active revision of the environment - `active_build`: UUID of the active build of the environment - `latest_revision`: UUID of the latest revision of the environment - `latest_build`: UUID of the latest build of the environment - `implicit`: A boolean indicating whether the environment is implicitly created - `hidden`: A boolean indicating whether the environment is hidden - `deprecated`: A boolean indicating whether the environment is deprecated  #### Response Examples ``` {   \"id\": \"3a7d94ca-4df4-4be3-857c-d6b9995cd17a\",   \"name\": \"python3-8-custom\",   \"display_name\": \"Custom Python 3.8\",   \"base_environment\": \"python3.8\",   \"project\": \"project-1\",   \"creation_date\": \"2023-03-01T08:32:14.876451Z\",   \"last_updated\": \"2023-03-01T10:52:23.124784Z\",   \"description\": \"Custom environment based on Python 3.8\",   \"labels\": {     \"type\": \"environment\"   },   \"gpu_required\": false,   \"status\": \"active\",   \"implicit\": false,   \"deprecated\": false,   \"hidden\": false,   \"active_revision\": \"8760570f-6eda-470b-99af-bde810d418d8\",   \"active_build\": \"e3021050-b9ac-4b8e-89f4-adb9e7c9aba6\",   \"latest_revision\": \"8760570f-6eda-470b-99af-bde810d418d8\",   \"latest_build\": \"e3021050-b9ac-4b8e-89f4-adb9e7c9aba6\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_get_with_http_info(project_name, environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str environment_name: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnvironmentDetail, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'environment_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environments_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environments_get`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environments_get`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environments_get`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}', 'GET',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnvironmentDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environments_list_with_http_info(self, project_name, **kwargs):  # noqa: E501
        """List environments  # noqa: E501

         ### Description  Environments can be filtered according to the labels they have by giving labels as a query parameter. Environments that have at least one of the labels on which is filtered, are returned.  ### Optional Parameters - `labels`: Filter on labels of the environment. Should be given in the format 'label:label_value'. Separate multiple label-pairs with a comma (,). This parameter should be given as query parameter. - `environment_type`: Filter on the type of the environment. It can be one of the following: 'base', 'custom' or 'all'. The default value is 'all'.  ### Response Structure  A list of details of the environments - `id`: Unique identifier for the environment - `name`: Name of the environment - `display_name`: Display name of the environment - `base_environment`: Base environment name on which this environment is based - `project`: Project name in which the environment is defined. It is null for base environments. - `creation_date`: The date when the environment was created - `last_updated`: The date when the environment was last updated - `description`: Description of the environment - `labels`: Dictionary containing key/value pairs where key indicates the label and value is the corresponding value of that label - `gpu_required`: A boolean indicating whether the environment requires GPUs - `status`: Status of the environment - `implicit`: A boolean indicating whether the environment is implicitly created - `hidden`: A boolean indicating whether the environment is hidden - `deprecated`: A boolean indicating whether the environment is deprecated  #### Response Examples ``` [   {     \"id\": \"1319895f-467b-4732-9804-7de500099233\",     \"name\": \"python3-8\",     \"display_name\": \"Python 3.8\",     \"base_environment\": null,     \"project\": null,     \"creation_date\": \"2023-03-01T08:32:14.876451Z\",     \"last_updated\": \"2023-03-01T10:52:23.124784Z\",     \"description\": \"Base environment containing Python 3.8\",     \"labels\": {},     \"gpu_required\": false,     \"status\": \"active\",     \"implicit\": false,     \"deprecated\": false,     \"hidden\": false   },   {     \"id\": \"3a7d94ca-4df4-4be3-857c-d6b9995cd17a\",     \"name\": \"python3-8-custom\",     \"display_name\": \"Custom Python 3.8\",     \"base_environment\": \"python3.8\",     \"project\": \"project-1\",     \"creation_date\": \"2023-03-02T12:15:43.124751Z\",     \"last_updated\": \"2023-03-03T13:14:23.865421Z\",     \"description\": \"Custom environment based on Python 3.8\",     \"labels\": {       \"type\": \"environment\"     },     \"gpu_required\": false,     \"status\": \"active\",     \"implicit\": false,     \"deprecated\": false,     \"hidden\": false   } ] ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_list_with_http_info(project_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str labels:
        :param str environment_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EnvironmentList], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'labels', 'environment_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environments_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environments_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environments_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'labels' in local_var_params and local_var_params['labels'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['labels'], str):  # noqa: E501
                raise ApiValueError("Parameter `labels` must be a string when calling `environments_list`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_type' in local_var_params and local_var_params['environment_type'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_type'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_type` must be a string when calling `environments_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501

        query_params = []
        if 'labels' in local_var_params and local_var_params['labels'] is not None:  # noqa: E501
            query_params.append(('labels', local_var_params['labels']))  # noqa: E501
        if 'environment_type' in local_var_params and local_var_params['environment_type'] is not None:  # noqa: E501
            query_params.append(('environment_type', local_var_params['environment_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments', 'GET',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EnvironmentList]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environments_update_with_http_info(self, project_name, environment_name, data, **kwargs):  # noqa: E501
        """Update environment  # noqa: E501

         ### Description Update an environment. When updating labels, the labels will replace the existing value for labels.  ### Optional Parameters - `name`: Name of the environment - `display_name`: Display name of the environment - `description`: Description for the environment - `labels`: Dictionary containing key/value pairs where key indicates the label and value is the corresponding value of that label  #### Request Examples  ``` {   \"name\": \"new-python3-8-custom\" } ```  ### Response Structure Details of the updated environment - `id`: Unique identifier for the environment - `name`: Name of the environment - `display_name`: Display name of the environment - `base_environment`: Base environment name on which this environment is based - `project`: Project name in which the environment is defined - `creation_date`: The date when the environment was created - `last_updated`: The date when the environment was last updated - `description`: Description of the environment - `labels`: Dictionary containing key/value pairs where key indicates the label and value is the corresponding value of that label - `gpu_required`: A boolean indicating whether the environment requires GPUs - `status`: Status of the environment - `active_revision`: UUID of the active revision of the environment - `active_build`: UUID of the active build of the environment - `latest_revision`: UUID of the latest revision of the environment - `latest_build`: UUID of the latest build of the environment - `implicit`: A boolean indicating whether the environment is implicitly created - `hidden`: A boolean indicating whether the environment is hidden - `deprecated`: A boolean indicating whether the environment is deprecated  #### Response Examples  ``` {   \"id\": \"3a7d94ca-4df4-4be3-857c-d6b9995cd17a\",   \"name\": \"new-python3-8-custom\",   \"display_name\": \"Custom Python 3.8\",   \"base_environment\": \"python3.8\",   \"project\": \"project-1\",   \"creation_date\": \"2023-03-01T08:32:14.876451Z\",   \"last_updated\": \"2023-03-01T10:52:23.124784Z\",   \"description\": \"Custom environment based on Python 3.8\",   \"labels\": {     \"type\": \"environment\"   },   \"gpu_required\": false,   \"status\": \"active\",   \"implicit\": false,   \"deprecated\": false,   \"hidden\": false,   \"active_revision\": \"8760570f-6eda-470b-99af-bde810d418d8\",   \"active_build\": \"e3021050-b9ac-4b8e-89f4-adb9e7c9aba6\",   \"latest_revision\": \"8760570f-6eda-470b-99af-bde810d418d8\",   \"latest_build\": \"e3021050-b9ac-4b8e-89f4-adb9e7c9aba6\" } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_update_with_http_info(project_name, environment_name, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str environment_name: (required)
        :param EnvironmentUpdate data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnvironmentDetail, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'environment_name', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environments_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environments_update`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environments_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and (
            'data' not in local_var_params or local_var_params['data'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `data` when calling `environments_update`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environments_update`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environments_update`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'data' in local_var_params and local_var_params['data'] is not None  # noqa: E501
        ):
            if isinstance(local_var_params['data'], dict):  # noqa: E501
                from ubiops.models.environment_update import EnvironmentUpdate

                local_var_params['data'] = EnvironmentUpdate(**local_var_params['data'])  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}', 'PATCH',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnvironmentDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environments_usage_with_http_info(self, project_name, environment_name, **kwargs):  # noqa: E501
        """List usage of environment  # noqa: E501

         ### Description List the deployment versions used by an environment  ### Response Structure A list of details of the deployment versions - `id`: Unique identifier for the deployment version (UUID) - `deployment`: Deployment name to which the version is associated - `version`: Version name - `environment`: Environment of the version - `environment_display_name`: Human readable name of the environment - `status`: The status of the version  #### Response Examples ``` [   {     \"id\": \"4ae7d14b-4803-4e16-b96d-3b18caa4b605\",     \"deployment\": \"deployment-1\",     \"version\": \"version-1\",     \"environment\": \"python3-8\",     \"environment_display_name\": \"Python 3.8\",     \"status\": \"available\"   },   {     \"id\": \"24f6b80a-08c3-4d52-ac1a-2ea7e70f16a6\",     \"deployment\": \"deployment-1\",     \"version\": \"version-2\",     \"environment\": \"python3-8\",     \"environment_display_name\": \"Python 3.8\",     \"status\": \"unavailable\"   } ] ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_usage_with_http_info(project_name, environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_name: (required)
        :param str environment_name: (required)
        :param str environment_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EnvironmentUsage], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_name', 'environment_name', 'environment_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environments_usage" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_name' is set
        if self.api_client.client_side_validation and (
            'project_name' not in local_var_params or local_var_params['project_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `project_name` when calling `environments_usage`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if self.api_client.client_side_validation and (
            'environment_name' not in local_var_params or local_var_params['environment_name'] is None  # noqa: E501
        ):
            raise ApiValueError("Missing the required parameter `environment_name` when calling `environments_usage`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'project_name' in local_var_params and local_var_params['project_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['project_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `project_name` must be a string when calling `environments_usage`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_name' in local_var_params and local_var_params['environment_name'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_name'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_name` must be a string when calling `environments_usage`")  # noqa: E501
        if self.api_client.client_side_validation and (
            'environment_type' in local_var_params and local_var_params['environment_type'] is not None  # noqa: E501
        ):
            if not isinstance(local_var_params['environment_type'], str):  # noqa: E501
                raise ApiValueError("Parameter `environment_type` must be a string when calling `environments_usage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in local_var_params:
            path_params['project_name'] = local_var_params['project_name']  # noqa: E501
        if 'environment_name' in local_var_params:
            path_params['environment_name'] = local_var_params['environment_name']  # noqa: E501

        query_params = []
        if 'environment_type' in local_var_params and local_var_params['environment_type'] is not None:  # noqa: E501
            query_params.append(('environment_type', local_var_params['environment_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_name}/environments/{environment_name}/usage', 'GET',  # noqa: E501
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EnvironmentUsage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
