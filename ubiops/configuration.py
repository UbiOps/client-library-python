# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import logging
import os
import re
import sys
import http.client


class Configuration(object):
    """
    NOTE: This class is auto generated by OpenAPI Generator

    Ref: https://openapi-generator.tech
    Do not edit the class manually.

    For authorization:
    - host: base url
    - api_key: dict to store API key(s)
    - api_key_prefix: dict to store API prefix (e.g. Bearer)
    - refresh_api_key_hook: function hook to refresh API key if expired

    SSL, Client side and CA certificates:
    - verify_ssl: SSL/TLS verification - if False, SSL certificate verification will be skipped
    - ssl_ca_cert: set this to customize the certificate file to verify the peer
    - cert_file: client certificate file - may contain both certificate and key, don't pass key_file in that case
    - key_file: client key file

    For proxy:
    - proxy: proxy URL
    - proxy_headers: proxy headers

    For path parameter encoding
    - safe_chars_for_path_param: safe chars for path_param

    For files:
    - temp_folder_path: temp file folder for downloading files

    For logging/debugging:
    - logger: logging settings
    - logger_format: log format
    - logger_file_handler: log file handler
    - logger_file: debug file location
    - debug: debug switch
    - client_side_validation: enable/disable client side validation
    """

    def __init__(self, host=None, api_key=None, api_key_prefix=None):
        """
        :param str host: base url
        :param dict api_key: dict to store API key(s)
          Each entry in the dict specifies an API key.
          The dict key is the name of the security scheme in the OAS specification.
          The dict value is the API key secret.
        :param dict api_key_prefix: dict to store API prefix (e.g. Bearer)
          The dict key is the name of the security scheme in the OAS specification.
          The dict value is an API key prefix when generating the auth data.
        """

        if not host:
            host = os.environ.get("UBIOPS_API_HOST", "https://api.ubiops.com/v2.1")

        self.host = host

        # Initialize temp_folder_path with the current working directory
        self.temp_folder_path = "."

        # Authentication Settings
        if not api_key:
            key = os.environ.get("UBIOPS_API_TOKEN", "").strip()
            if key:
                api_key = {"Authorization": key}

        self.api_key = api_key if api_key else {}
        self.api_key_prefix = api_key_prefix if api_key_prefix else {}

        self.refresh_api_key_hook = None

        # SSL
        self.verify_ssl = True
        self.ssl_ca_cert = None
        self.cert_file = None
        self.key_file = None

        # Proxy
        self.proxy = None
        self.proxy_headers = None
        self.safe_chars_for_path_param = ""

        # Logging
        self.logger = {"package_logger": logging.getLogger("ubiops"), "requests_logger": logging.getLogger("requests")}
        self.logger_format = "%(asctime)s %(levelname)s %(message)s"
        self.logger_file_handler = None
        self.logger_file = None

        # Debug
        self.debug = False
        self.client_side_validation = True

        # Rate limiting
        self.auto_retry_rate_limiting = True

    @property
    def logger_file(self):
        """
        The logger file.

        If the logger_file is None, then add stream handler and remove file handler. Otherwise, add file handler and
        remove stream handler.

        :type: str
        """

        return self.__logger_file

    @logger_file.setter
    def logger_file(self, value):
        """
        The logger file.

        If the logger_file is None, then add stream handler and remove file handler. Otherwise, add file handler and
        remove stream handler.

        :param value: the logger_file path
        :type: str
        """

        self.__logger_file = value
        if self.__logger_file:
            # If set logging file, then add file handler and remove stream handler
            self.logger_file_handler = logging.FileHandler(self.__logger_file)
            self.logger_file_handler.setFormatter(self.logger_formatter)
            for _, logger in self.logger.items():
                logger.addHandler(self.logger_file_handler)

    @property
    def debug(self):
        """
        Debug status

        :type: bool
        """

        return self.__debug

    @debug.setter
    def debug(self, value):
        """
        Debug status

        :param value: the debug status, True or False
        :type: bool
        """

        self.__debug = value
        if self.__debug:
            # If debug status is True, turn on debug logging
            for _, logger in self.logger.items():
                logger.setLevel(logging.DEBUG)
            # Turn on httplib debug
            http.client.HTTPConnection.debuglevel = 1
        else:
            # If debug status is False, turn off debug logging, setting log level to default `logging.WARNING`
            for _, logger in self.logger.items():
                logger.setLevel(logging.WARNING)
            # turn off httplib debug
            http.client.HTTPConnection.debuglevel = 0

    @property
    def host(self):
        """
        The host

        :type: str
        """

        return self.__host

    @host.setter
    def host(self, value):
        """
        The host

        :param value: The host to use
        :type: str
        """

        if value:
            value = str(value)

            # Remove trailing / if present
            if value.endswith("/"):
                value = value[:-1]

            # Start with http or https, default to https
            if not value.startswith("http"):
                value = f"https://{value}"

            # Check api version included (../v[] or ../v[].[])
            p = re.compile(r".*/v[0-9]+\.?[0-9]*")
            if not p.match(value):
                value = f"{value}/v2.1"

        self.__host = value

    @property
    def logger_format(self):
        """
        The logger_formatter will be updated when sets logger_format.

        :type: str
        """

        return self.__logger_format

    @logger_format.setter
    def logger_format(self, value):
        """
        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """

        self.__logger_format = value
        self.logger_formatter = logging.Formatter(self.__logger_format)

    def get_api_key_with_prefix(self, identifier):
        """
        Gets API key (with prefix if set)

        :param identifier: the identifier of apiKey
        :return: the token for api key authentication
        """

        if self.refresh_api_key_hook is not None:
            self.refresh_api_key_hook(self)
        key = self.api_key.get(identifier)
        if key:
            prefix = self.api_key_prefix.get(identifier)

            # If key doesn't contain prefix and no prefix is given, automatically add "Token" as prefix
            if not prefix and len(str(key).split(" ")) < 2:
                prefix = "Token"

            if prefix:
                return f"{prefix} {key}"
            else:
                return key

    def auth_settings(self):
        """
        Gets Auth Settings dict for api client

        :return: the Auth Settings information dict
        """

        auth = {}
        if "Authorization" in self.api_key:
            auth["api_key"] = {
                "type": "api_key",
                "in": "header",
                "key": "Authorization",
                "value": self.get_api_key_with_prefix("Authorization"),
            }
        return auth

    @staticmethod
    def to_debug_report():
        """
        Gets the essential information for debugging

        :return: the report for debugging
        """

        return (
            "Python SDK Debug Report:\n"
            f"OS: {sys.platform}\n"
            f"Python Version: {sys.version}\n"
            "Version of the API: v2.1\n"
            "SDK Package Version: 3.16.0"
        )
