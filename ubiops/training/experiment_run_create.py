# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class ExperimentRunCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'training_code': 'str',
        'training_data': 'str',
        'parameters': 'dict(str, json)'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'training_code': 'training_code',
        'training_data': 'training_data',
        'parameters': 'parameters'
    }

    def __init__(self, name=None, description=None, training_code=None, training_data=None, parameters=None, local_vars_configuration=None, **kwargs):  # noqa: E501
        """ExperimentRunCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._training_code = None
        self._training_data = None
        self._parameters = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.training_code = training_code
        if training_data is not None:
            self.training_data = training_data
        if parameters is not None:
            self.parameters = parameters

    @property
    def name(self):
        """Gets the name of this ExperimentRunCreate.  # noqa: E501


        :return: The name of this ExperimentRunCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExperimentRunCreate.


        :param name: The name of this ExperimentRunCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            name is not None and not isinstance(name, str)
        ):
            raise ValueError("Parameter `name` must be a string")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExperimentRunCreate.  # noqa: E501


        :return: The description of this ExperimentRunCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExperimentRunCreate.


        :param description: The description of this ExperimentRunCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            description is not None and not isinstance(description, str)
        ):
            raise ValueError("Parameter `description` must be a string")  # noqa: E501

        self._description = description

    @property
    def training_code(self):
        """Gets the training_code of this ExperimentRunCreate.  # noqa: E501


        :return: The training_code of this ExperimentRunCreate.  # noqa: E501
        :rtype: str
        """
        return self._training_code

    @training_code.setter
    def training_code(self, training_code):
        """Sets the training_code of this ExperimentRunCreate.


        :param training_code: The training_code of this ExperimentRunCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and training_code is None:  # noqa: E501
            raise ValueError("Invalid value for `training_code`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            training_code is not None and not isinstance(training_code, str)
        ):
            raise ValueError("Parameter `training_code` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            training_code is not None and len(training_code) < 1
        ):
            raise ValueError("Invalid value for `training_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._training_code = training_code

    @property
    def training_data(self):
        """Gets the training_data of this ExperimentRunCreate.  # noqa: E501


        :return: The training_data of this ExperimentRunCreate.  # noqa: E501
        :rtype: str
        """
        return self._training_data

    @training_data.setter
    def training_data(self, training_data):
        """Sets the training_data of this ExperimentRunCreate.


        :param training_data: The training_data of this ExperimentRunCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
                training_data is not None and not isinstance(training_data, str)
        ):
            raise ValueError("Parameter `training_data` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
                training_data is not None and len(training_data) < 1
        ):
            raise ValueError(
                "Invalid value for `training_data`, length must be greater than or equal to `1`")  # noqa: E501

        self._training_data = training_data

    @property
    def parameters(self):
        """Gets the parameters of this ExperimentRunCreate.  # noqa: E501


        :return: The parameters of this ExperimentRunCreate.  # noqa: E501
        :rtype: dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ExperimentRunCreate.


        :param parameters: The parameters of this ExperimentRunCreate.  # noqa: E501
        :type: dict
        """
        if self.local_vars_configuration.client_side_validation and (
            parameters is not None and not isinstance(parameters, dict)
        ):
            raise ValueError("Parameter `parameters` must be a dict")  # noqa: E501

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentRunCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExperimentRunCreate):
            return True

        return self.to_dict() != other.to_dict()
