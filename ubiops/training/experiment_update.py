# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class ExperimentUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'environment': 'str',
        'instance_type': 'str',
        'description': 'str',
        'labels': 'dict(str, str)',
        'default_bucket': 'str'
    }

    attribute_map = {
        'name': 'name',
        'environment': 'environment',
        'instance_type': 'instance_type',
        'description': 'description',
        'labels': 'labels',
        'default_bucket': 'default_bucket'
    }

    def __init__(self, name=None, environment=None, instance_type=None, description=None, labels=None, default_bucket=None, local_vars_configuration=None, **kwargs):  # noqa: E501
        """ExperimentUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._environment = None
        self._instance_type = None
        self._description = None
        self._labels = None
        self._default_bucket = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if environment is not None:
            self.environment = environment
        if instance_type is not None:
            self.instance_type = instance_type
        if description is not None:
            self.description = description
        if labels is not None:
            self.labels = labels
        if default_bucket is not None:
            self.default_bucket = default_bucket

    @property
    def name(self):
        """Gets the name of this ExperimentUpdate.  # noqa: E501


        :return: The name of this ExperimentUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExperimentUpdate.


        :param name: The name of this ExperimentUpdate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            name is not None and not isinstance(name, str)
        ):
            raise ValueError("Parameter `name` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            name is not None and len(name) < 1
        ):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def environment(self):
        """Gets the environment of this ExperimentUpdate.  # noqa: E501


        :return: The environment of this ExperimentUpdate.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ExperimentUpdate.


        :param environment: The environment of this ExperimentUpdate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and environment is None:  # noqa: E501
            raise ValueError("Invalid value for `environment`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            environment is not None and not isinstance(environment, str)
        ):
            raise ValueError("Parameter `environment` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            environment is not None and len(environment) < 1
        ):
            raise ValueError("Invalid value for `environment`, length must be greater than or equal to `1`")  # noqa: E501

        self._environment = environment

    @property
    def instance_type(self):
        """Gets the instance_type of this ExperimentUpdate.  # noqa: E501


        :return: The instance_type of this ExperimentUpdate.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this ExperimentUpdate.


        :param instance_type: The instance_type of this ExperimentUpdate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            instance_type is not None and not isinstance(instance_type, str)
        ):
            raise ValueError("Parameter `instance_type` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            instance_type is not None and len(instance_type) < 1
        ):
            raise ValueError("Invalid value for `instance_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._instance_type = instance_type

    @property
    def description(self):
        """Gets the description of this ExperimentUpdate.  # noqa: E501


        :return: The description of this ExperimentUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExperimentUpdate.


        :param description: The description of this ExperimentUpdate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            description is not None and not isinstance(description, str)
        ):
            raise ValueError("Parameter `description` must be a string")  # noqa: E501

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this ExperimentUpdate.  # noqa: E501


        :return: The labels of this ExperimentUpdate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ExperimentUpdate.


        :param labels: The labels of this ExperimentUpdate.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and (
            labels is not None and not isinstance(labels, dict)
        ):
            raise ValueError("Parameter `labels` must be a dictionary")  # noqa: E501

        self._labels = labels

    @property
    def default_bucket(self):
        """Gets the default_bucket of this ExperimentUpdate.  # noqa: E501


        :return: The default_bucket of this ExperimentUpdate.  # noqa: E501
        :rtype: str
        """
        return self._default_bucket

    @default_bucket.setter
    def default_bucket(self, default_bucket):
        """Sets the default_bucket of this ExperimentUpdate.


        :param default_bucket: The default_bucket of this ExperimentUpdate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            default_bucket is not None and not isinstance(default_bucket, str)
        ):
            raise ValueError("Parameter `default_bucket` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            default_bucket is not None and len(default_bucket) < 1
        ):
            raise ValueError("Invalid value for `default_bucket`, length must be greater than or equal to `1`")  # noqa: E501

        self._default_bucket = default_bucket

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExperimentUpdate):
            return True

        return self.to_dict() != other.to_dict()
