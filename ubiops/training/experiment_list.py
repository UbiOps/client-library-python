# coding: utf-8

"""
    UbiOps

    Client Library to interact with the UbiOps API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubiops.configuration import Configuration


class ExperimentList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'environment': 'str',
        'environment_display_name': 'str',
        'status': 'str',
        'active_revision': 'str',
        'latest_revision': 'str',
        'instance_type': 'str',
        'labels': 'dict(str, str)',
        'creation_date': 'datetime',
        'last_updated': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'environment': 'environment',
        'environment_display_name': 'environment_display_name',
        'status': 'status',
        'active_revision': 'active_revision',
        'latest_revision': 'latest_revision',
        'instance_type': 'instance_type',
        'labels': 'labels',
        'creation_date': 'creation_date',
        'last_updated': 'last_updated'
    }

    def __init__(self, id=None, name=None, environment=None, environment_display_name=None, status=None, active_revision=None, latest_revision=None, instance_type=None, labels=None, creation_date=None, last_updated=None, local_vars_configuration=None, **kwargs):  # noqa: E501
        """ExperimentList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._environment = None
        self._environment_display_name = None
        self._status = None
        self._active_revision = None
        self._latest_revision = None
        self._instance_type = None
        self._labels = None
        self._creation_date = None
        self._last_updated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if environment is not None:
            self.environment = environment
        if environment_display_name is not None:
            self.environment_display_name = environment_display_name
        if status is not None:
            self.status = status
        if active_revision is not None:
            self.active_revision = active_revision
        if latest_revision is not None:
            self.latest_revision = latest_revision
        if instance_type is not None:
            self.instance_type = instance_type
        if labels is not None:
            self.labels = labels
        if creation_date is not None:
            self.creation_date = creation_date
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def id(self):
        """Gets the id of this ExperimentList.  # noqa: E501


        :return: The id of this ExperimentList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExperimentList.


        :param id: The id of this ExperimentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            id is not None and not isinstance(id, str)
        ):
            raise ValueError("Parameter `id` must be a string")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ExperimentList.  # noqa: E501


        :return: The name of this ExperimentList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExperimentList.


        :param name: The name of this ExperimentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if self.local_vars_configuration.client_side_validation and (
            name is not None and not isinstance(name, str)
        ):
            raise ValueError("Parameter `name` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            name is not None and len(name) < 1
        ):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def environment(self):
        """Gets the environment of this ExperimentList.  # noqa: E501


        :return: The environment of this ExperimentList.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ExperimentList.


        :param environment: The environment of this ExperimentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            environment is not None and not isinstance(environment, str)
        ):
            raise ValueError("Parameter `environment` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            environment is not None and len(environment) < 1
        ):
            raise ValueError("Invalid value for `environment`, length must be greater than or equal to `1`")  # noqa: E501

        self._environment = environment

    @property
    def environment_display_name(self):
        """Gets the environment_display_name of this ExperimentList.  # noqa: E501


        :return: The environment_display_name of this ExperimentList.  # noqa: E501
        :rtype: str
        """
        return self._environment_display_name

    @environment_display_name.setter
    def environment_display_name(self, environment_display_name):
        """Sets the environment_display_name of this ExperimentList.


        :param environment_display_name: The environment_display_name of this ExperimentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            environment_display_name is not None and not isinstance(environment_display_name, str)
        ):
            raise ValueError("Parameter `environment_display_name` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            environment_display_name is not None and len(environment_display_name) < 1
        ):
            raise ValueError("Invalid value for `environment_display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._environment_display_name = environment_display_name

    @property
    def status(self):
        """Gets the status of this ExperimentList.  # noqa: E501


        :return: The status of this ExperimentList.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExperimentList.


        :param status: The status of this ExperimentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            status is not None and not isinstance(status, str)
        ):
            raise ValueError("Parameter `status` must be a string")  # noqa: E501

        self._status = status

    @property
    def active_revision(self):
        """Gets the active_revision of this ExperimentList.  # noqa: E501


        :return: The active_revision of this ExperimentList.  # noqa: E501
        :rtype: str
        """
        return self._active_revision

    @active_revision.setter
    def active_revision(self, active_revision):
        """Sets the active_revision of this ExperimentList.


        :param active_revision: The active_revision of this ExperimentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            active_revision is not None and not isinstance(active_revision, str)
        ):
            raise ValueError("Parameter `active_revision` must be a string")  # noqa: E501

        self._active_revision = active_revision

    @property
    def latest_revision(self):
        """Gets the latest_revision of this ExperimentList.  # noqa: E501


        :return: The latest_revision of this ExperimentList.  # noqa: E501
        :rtype: str
        """
        return self._latest_revision

    @latest_revision.setter
    def latest_revision(self, latest_revision):
        """Sets the latest_revision of this ExperimentList.


        :param latest_revision: The latest_revision of this ExperimentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            latest_revision is not None and not isinstance(latest_revision, str)
        ):
            raise ValueError("Parameter `latest_revision` must be a string")  # noqa: E501

        self._latest_revision = latest_revision

    @property
    def instance_type(self):
        """Gets the instance_type of this ExperimentList.  # noqa: E501


        :return: The instance_type of this ExperimentList.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this ExperimentList.


        :param instance_type: The instance_type of this ExperimentList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and (
            instance_type is not None and not isinstance(instance_type, str)
        ):
            raise ValueError("Parameter `instance_type` must be a string")  # noqa: E501

        if self.local_vars_configuration.client_side_validation and (
            instance_type is not None and len(instance_type) < 1
        ):
            raise ValueError("Invalid value for `instance_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._instance_type = instance_type

    @property
    def labels(self):
        """Gets the labels of this ExperimentList.  # noqa: E501


        :return: The labels of this ExperimentList.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ExperimentList.


        :param labels: The labels of this ExperimentList.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and (
            labels is not None and not isinstance(labels, dict)
        ):
            raise ValueError("Parameter `labels` must be a dictionary")  # noqa: E501

        self._labels = labels

    @property
    def creation_date(self):
        """Gets the creation_date of this ExperimentList.  # noqa: E501


        :return: The creation_date of this ExperimentList.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ExperimentList.


        :param creation_date: The creation_date of this ExperimentList.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_updated(self):
        """Gets the last_updated of this ExperimentList.  # noqa: E501


        :return: The last_updated of this ExperimentList.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ExperimentList.


        :param last_updated: The last_updated of this ExperimentList.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExperimentList):
            return True

        return self.to_dict() != other.to_dict()
